package randoopTest;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_76.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_76.go(byteArray88);
        staticInitializationVectorABMC1_63.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_51.go(byteArray77);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray86);
        staticInitializationVectorABMC1_43.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_25.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass63 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_0.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_0.go(byteArray49);
        java.lang.Class<?> wildcardClass51 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_46.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_56.go(byteArray85);
        staticInitializationVectorABMC1_46.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass89 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_12.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_12.go(byteArray38);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_12.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_50.go(byteArray76);
        staticInitializationVectorABMC1_46.go(byteArray76);
        staticInitializationVectorABMC1_12.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_84.go(byteArray90);
        byte[] byteArray96 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_84.go(byteArray96);
        staticInitializationVectorABMC1_12.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_25.go(byteArray56);
        staticInitializationVectorABMC1_19.go(byteArray56);
        staticInitializationVectorABMC1_18.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass65 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 100, (byte) 10, (byte) 1, (byte) -1, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_22.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_50.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray94);
        staticInitializationVectorABMC1_50.go(byteArray94);
        staticInitializationVectorABMC1_22.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass75 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_24.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        staticInitializationVectorABMC1_24.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_24.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_43.go(byteArray74);
        staticInitializationVectorABMC1_37.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_32.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_60.go(byteArray85);
        staticInitializationVectorABMC1_32.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_43.go(byteArray74);
        staticInitializationVectorABMC1_37.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_82.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        byte[] byteArray96 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_85.go(byteArray96);
        staticInitializationVectorABMC1_82.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_31.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_23.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        staticInitializationVectorABMC1_23.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_43.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_23.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_52.go(byteArray58);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_52.go(byteArray64);
        staticInitializationVectorABMC1_39.go(byteArray64);
        staticInitializationVectorABMC1_23.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass69 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray33);
        staticInitializationVectorABMC1_11.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_36.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray75);
        staticInitializationVectorABMC1_36.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_36.go(byteArray85);
        staticInitializationVectorABMC1_11.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_14.go(byteArray74);
        staticInitializationVectorABMC1_3.go(byteArray74);
        byte[] byteArray82 = new byte[] {};
        staticInitializationVectorABMC1_3.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_22.go(byteArray28);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_22.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_55.go(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_55.go(byteArray67);
        staticInitializationVectorABMC1_32.go(byteArray67);
        byte[] byteArray71 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_32.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_25.go(byteArray51);
        staticInitializationVectorABMC1_15.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        java.lang.Class<?> wildcardClass55 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_13.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_38.go(byteArray72);
        staticInitializationVectorABMC1_13.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_28.go(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_28.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_42.go(byteArray85);
        staticInitializationVectorABMC1_28.go(byteArray85);
        staticInitializationVectorABMC1_22.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_25.go(byteArray75);
        staticInitializationVectorABMC1_14.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_14.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        staticInitializationVectorABMC1_3.go(byteArray29);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_3.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_40.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        byte[] byteArray89 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_50.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_3.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_0.go(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass66 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        staticInitializationVectorABMC1_16.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_43.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass81 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_59.go(byteArray65);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_59.go(byteArray71);
        staticInitializationVectorABMC1_36.go(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_36.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_31.go(byteArray57);
        staticInitializationVectorABMC1_27.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_64.go(byteArray86);
        staticInitializationVectorABMC1_27.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_25.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass75 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_17.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_44.go(byteArray56);
        staticInitializationVectorABMC1_13.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_13.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_66.go(byteArray72);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_66.go(byteArray78);
        staticInitializationVectorABMC1_13.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass82 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        staticInitializationVectorABMC1_8.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass64 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_41.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_41.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_49.go(byteArray80);
        staticInitializationVectorABMC1_43.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_93 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_93.go(byteArray95);
        staticInitializationVectorABMC1_92.go(byteArray95);
        staticInitializationVectorABMC1_88.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_40.go(byteArray52);
        staticInitializationVectorABMC1_17.go(byteArray52);
        byte[] byteArray56 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_17.go(byteArray56);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_17.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_60.go(byteArray86);
        staticInitializationVectorABMC1_17.go(byteArray86);
        staticInitializationVectorABMC1_4.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        staticInitializationVectorABMC1_28.go(byteArray59);
        staticInitializationVectorABMC1_22.go(byteArray59);
        staticInitializationVectorABMC1_21.go(byteArray59);
        staticInitializationVectorABMC1_8.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_8.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_8.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        java.lang.Class<?> wildcardClass26 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_79.go(byteArray85);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_79.go(byteArray91);
        staticInitializationVectorABMC1_48.go(byteArray91);
        staticInitializationVectorABMC1_11.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_24.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_70.go(byteArray88);
        staticInitializationVectorABMC1_39.go(byteArray88);
        staticInitializationVectorABMC1_38.go(byteArray88);
        staticInitializationVectorABMC1_24.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_0.go(byteArray39);
        java.lang.Class<?> wildcardClass41 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_41.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_41.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_37.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass75 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_24.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_70.go(byteArray88);
        staticInitializationVectorABMC1_39.go(byteArray88);
        staticInitializationVectorABMC1_38.go(byteArray88);
        staticInitializationVectorABMC1_24.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_18.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_18.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        java.lang.Class<?> wildcardClass66 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass87 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_64.go(byteArray76);
        staticInitializationVectorABMC1_33.go(byteArray76);
        staticInitializationVectorABMC1_22.go(byteArray76);
        staticInitializationVectorABMC1_11.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_53.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_8.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_8.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_26.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_26.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        staticInitializationVectorABMC1_26.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        staticInitializationVectorABMC1_26.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray59);
        staticInitializationVectorABMC1_24.go(byteArray59);
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_27.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_40.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_40.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray90);
        staticInitializationVectorABMC1_27.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_80.go(byteArray86);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_80.go(byteArray92);
        staticInitializationVectorABMC1_49.go(byteArray92);
        staticInitializationVectorABMC1_38.go(byteArray92);
        staticInitializationVectorABMC1_27.go(byteArray92);
        staticInitializationVectorABMC1_16.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_10.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_35.go(byteArray61);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass73 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_32.go(byteArray44);
        staticInitializationVectorABMC1_19.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_47.go(byteArray72);
        staticInitializationVectorABMC1_19.go(byteArray72);
        staticInitializationVectorABMC1_15.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_72.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_15.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_15.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_95 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray97 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_95.go(byteArray97);
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray97);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_80.go(byteArray86);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_80.go(byteArray92);
        staticInitializationVectorABMC1_49.go(byteArray92);
        staticInitializationVectorABMC1_38.go(byteArray92);
        staticInitializationVectorABMC1_27.go(byteArray92);
        staticInitializationVectorABMC1_16.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        staticInitializationVectorABMC1_41.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_41.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass98 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray94 = new byte[] { (byte) 0, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_41.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        staticInitializationVectorABMC1_41.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_41.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        staticInitializationVectorABMC1_3.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_71.go(byteArray83);
        staticInitializationVectorABMC1_40.go(byteArray83);
        staticInitializationVectorABMC1_3.go(byteArray83);
        staticInitializationVectorABMC1_2.go(byteArray83);
        staticInitializationVectorABMC1_1.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_26.go(byteArray75);
        staticInitializationVectorABMC1_25.go(byteArray75);
        staticInitializationVectorABMC1_14.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_55.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_55.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass73 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_44.go(byteArray56);
        staticInitializationVectorABMC1_13.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_13.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_66.go(byteArray72);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_66.go(byteArray78);
        staticInitializationVectorABMC1_13.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_19.go(byteArray54);
        staticInitializationVectorABMC1_15.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass59 = byteArray54.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        staticInitializationVectorABMC1_23.go(byteArray54);
        staticInitializationVectorABMC1_17.go(byteArray54);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_17.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_17.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass79 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_28.go(byteArray34);
        byte[] byteArray36 = null;
        staticInitializationVectorABMC1_28.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        staticInitializationVectorABMC1_28.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_70.go(byteArray88);
        staticInitializationVectorABMC1_28.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_28.go(byteArray77);
        staticInitializationVectorABMC1_27.go(byteArray77);
        staticInitializationVectorABMC1_13.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_19.go(byteArray54);
        staticInitializationVectorABMC1_13.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray87);
        staticInitializationVectorABMC1_13.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_72.go(byteArray83);
        staticInitializationVectorABMC1_61.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass87 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        staticInitializationVectorABMC1_6.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_6.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_59.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_62.go(byteArray91);
        staticInitializationVectorABMC1_59.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_43.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_60.go(byteArray91);
        staticInitializationVectorABMC1_59.go(byteArray91);
        staticInitializationVectorABMC1_43.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_11.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_49.go(byteArray75);
        staticInitializationVectorABMC1_11.go(byteArray75);
        byte[] byteArray85 = new byte[] { (byte) -1, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_19.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        staticInitializationVectorABMC1_19.go(byteArray45);
        staticInitializationVectorABMC1_15.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_63.go(byteArray74);
        staticInitializationVectorABMC1_52.go(byteArray74);
        staticInitializationVectorABMC1_15.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray7 = null;
        staticInitializationVectorABMC1_1.go(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_1.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        staticInitializationVectorABMC1_15.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_1.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass97 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_32.go(byteArray69);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_32.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_32.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_10.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_47.go(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_47.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_20.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        staticInitializationVectorABMC1_20.go(byteArray46);
        staticInitializationVectorABMC1_10.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass66 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_78.go(byteArray89);
        staticInitializationVectorABMC1_55.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass93 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_4.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_4.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_19.go(byteArray54);
        staticInitializationVectorABMC1_13.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray87);
        staticInitializationVectorABMC1_13.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass91 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_21.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray81);
        staticInitializationVectorABMC1_15.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_43.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_43.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_22.go(byteArray57);
        byte[] byteArray61 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_22.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_22.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_65.go(byteArray91);
        staticInitializationVectorABMC1_22.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray50);
        staticInitializationVectorABMC1_16.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_16.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_51.go(byteArray77);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray86);
        staticInitializationVectorABMC1_43.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass90 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_37.go(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass77 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_53.go(byteArray84);
        staticInitializationVectorABMC1_47.go(byteArray84);
        staticInitializationVectorABMC1_46.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_37.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_47.go(byteArray82);
        byte[] byteArray86 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_47.go(byteArray86);
        staticInitializationVectorABMC1_37.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_53.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray48);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_19.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_55.go(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_55.go(byteArray67);
        staticInitializationVectorABMC1_19.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_70.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_70.go(byteArray91);
        staticInitializationVectorABMC1_19.go(byteArray91);
        staticInitializationVectorABMC1_6.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_35.go(byteArray61);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_73.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_73.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_56.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_59.go(byteArray84);
        staticInitializationVectorABMC1_56.go(byteArray84);
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_22.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_50.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray94);
        staticInitializationVectorABMC1_50.go(byteArray94);
        staticInitializationVectorABMC1_22.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_11.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_25.go(byteArray31);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_25.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        staticInitializationVectorABMC1_25.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_11.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_11.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_59.go(byteArray65);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_59.go(byteArray71);
        staticInitializationVectorABMC1_36.go(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_36.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass80 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_34.go(byteArray84);
        staticInitializationVectorABMC1_23.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray18 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray18);
        java.lang.Class<?> wildcardClass20 = byteArray18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_56.go(byteArray74);
        staticInitializationVectorABMC1_25.go(byteArray74);
        staticInitializationVectorABMC1_14.go(byteArray74);
        staticInitializationVectorABMC1_3.go(byteArray74);
        byte[] byteArray82 = new byte[] {};
        staticInitializationVectorABMC1_3.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass85 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_11.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_60.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_70.go(byteArray81);
        staticInitializationVectorABMC1_60.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_13.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        staticInitializationVectorABMC1_13.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_66.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_35.go(byteArray61);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_73.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_73.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_48.go(byteArray79);
        staticInitializationVectorABMC1_42.go(byteArray79);
        staticInitializationVectorABMC1_41.go(byteArray79);
        staticInitializationVectorABMC1_18.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_43.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray87);
        staticInitializationVectorABMC1_43.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray20);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_8.go(byteArray22);
        byte[] byteArray24 = null;
        staticInitializationVectorABMC1_8.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_33.go(byteArray64);
        staticInitializationVectorABMC1_27.go(byteArray64);
        staticInitializationVectorABMC1_26.go(byteArray64);
        staticInitializationVectorABMC1_8.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass74 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_55.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_55.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_4.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_32.go(byteArray69);
        staticInitializationVectorABMC1_31.go(byteArray69);
        staticInitializationVectorABMC1_18.go(byteArray69);
        staticInitializationVectorABMC1_4.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        byte[] byteArray43 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_4.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_52.go(byteArray83);
        staticInitializationVectorABMC1_46.go(byteArray83);
        staticInitializationVectorABMC1_45.go(byteArray83);
        staticInitializationVectorABMC1_4.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_27.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_60.go(byteArray78);
        staticInitializationVectorABMC1_47.go(byteArray78);
        staticInitializationVectorABMC1_41.go(byteArray78);
        staticInitializationVectorABMC1_40.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_27.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass95 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass69 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_11.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray32);
        staticInitializationVectorABMC1_11.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_11.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_32.go(byteArray81);
        staticInitializationVectorABMC1_31.go(byteArray81);
        staticInitializationVectorABMC1_25.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_34.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_34.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_34.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass84 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray18 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray18);
        java.lang.Class<?> wildcardClass20 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_29.go(byteArray60);
        staticInitializationVectorABMC1_23.go(byteArray60);
        staticInitializationVectorABMC1_22.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_22.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_75.go(byteArray82);
        staticInitializationVectorABMC1_22.go(byteArray82);
        staticInitializationVectorABMC1_16.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray94);
        staticInitializationVectorABMC1_36.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_41.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_72.go(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_72.go(byteArray84);
        staticInitializationVectorABMC1_41.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass74 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_20.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        staticInitializationVectorABMC1_20.go(byteArray46);
        staticInitializationVectorABMC1_10.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass66 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        staticInitializationVectorABMC1_8.go(byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        staticInitializationVectorABMC1_34.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_34.go(byteArray82);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray91);
        staticInitializationVectorABMC1_33.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_46.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray90);
        staticInitializationVectorABMC1_46.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_8.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_8.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_26.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        staticInitializationVectorABMC1_34.go(byteArray60);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray69);
        staticInitializationVectorABMC1_26.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass73 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_35.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_72.go(byteArray83);
        staticInitializationVectorABMC1_35.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_35.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_91.go(byteArray94);
        staticInitializationVectorABMC1_35.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_49.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_65.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_78.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_78.go(byteArray90);
        staticInitializationVectorABMC1_65.go(byteArray90);
        staticInitializationVectorABMC1_49.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_11.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        java.lang.Class<?> wildcardClass46 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_4.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_38.go(byteArray69);
        staticInitializationVectorABMC1_32.go(byteArray69);
        staticInitializationVectorABMC1_31.go(byteArray69);
        staticInitializationVectorABMC1_18.go(byteArray69);
        staticInitializationVectorABMC1_4.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass82 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        staticInitializationVectorABMC1_7.go(byteArray38);
        staticInitializationVectorABMC1_1.go(byteArray38);
        staticInitializationVectorABMC1_0.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_73.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_76.go(byteArray87);
        staticInitializationVectorABMC1_73.go(byteArray87);
        staticInitializationVectorABMC1_65.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        staticInitializationVectorABMC1_16.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass89 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_32.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_32.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_59.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_59.go(byteArray85);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_59.go(byteArray94);
        staticInitializationVectorABMC1_32.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        staticInitializationVectorABMC1_32.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_32.go(byteArray80);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_32.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass92 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_71.go(byteArray83);
        staticInitializationVectorABMC1_58.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_60.go(byteArray78);
        staticInitializationVectorABMC1_47.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_67.go(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_67.go(byteArray79);
        staticInitializationVectorABMC1_54.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass83 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_71.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_91.go(byteArray94);
        staticInitializationVectorABMC1_87.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_1.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_66.go(byteArray80);
        staticInitializationVectorABMC1_58.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass85 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_19.go(byteArray54);
        staticInitializationVectorABMC1_15.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass59 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_14.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        staticInitializationVectorABMC1_29.go(byteArray47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray58);
        staticInitializationVectorABMC1_14.go(byteArray58);
        staticInitializationVectorABMC1_13.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        staticInitializationVectorABMC1_21.go(byteArray39);
        staticInitializationVectorABMC1_13.go(byteArray39);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        staticInitializationVectorABMC1_50.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_73.go(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_73.go(byteArray85);
        staticInitializationVectorABMC1_50.go(byteArray85);
        byte[] byteArray89 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_50.go(byteArray89);
        staticInitializationVectorABMC1_13.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        java.lang.Class<?> wildcardClass34 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_46.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray90);
        staticInitializationVectorABMC1_46.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_15.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        staticInitializationVectorABMC1_29.go(byteArray47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_29.go(byteArray72);
        staticInitializationVectorABMC1_15.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_15.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_15.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_15.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass89 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray93 = new byte[] { (byte) 0, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray50);
        staticInitializationVectorABMC1_16.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_16.go(byteArray64);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray73);
        staticInitializationVectorABMC1_15.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_15.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass89 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass69 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_59.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_62.go(byteArray73);
        staticInitializationVectorABMC1_59.go(byteArray73);
        staticInitializationVectorABMC1_51.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass78 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray20);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_8.go(byteArray22);
        byte[] byteArray24 = null;
        staticInitializationVectorABMC1_8.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_33.go(byteArray64);
        staticInitializationVectorABMC1_27.go(byteArray64);
        staticInitializationVectorABMC1_26.go(byteArray64);
        staticInitializationVectorABMC1_8.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass74 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_17.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_27.go(byteArray38);
        staticInitializationVectorABMC1_17.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        staticInitializationVectorABMC1_41.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_64.go(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_64.go(byteArray76);
        staticInitializationVectorABMC1_41.go(byteArray76);
        staticInitializationVectorABMC1_17.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_17.go(byteArray87);
        staticInitializationVectorABMC1_11.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray94);
        staticInitializationVectorABMC1_36.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_0.go(byteArray16);
        java.lang.Class<?> wildcardClass20 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_5.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_5.go(byteArray31);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_5.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_42.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        byte[] byteArray91 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_52.go(byteArray91);
        staticInitializationVectorABMC1_42.go(byteArray91);
        staticInitializationVectorABMC1_5.go(byteArray91);
        staticInitializationVectorABMC1_1.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_55.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_55.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass73 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_47.go(byteArray73);
        staticInitializationVectorABMC1_36.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_14.go(byteArray26);
        staticInitializationVectorABMC1_1.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_29.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_29.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_19.go(byteArray48);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_19.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_55.go(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_55.go(byteArray67);
        staticInitializationVectorABMC1_19.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_70.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_70.go(byteArray91);
        staticInitializationVectorABMC1_19.go(byteArray91);
        staticInitializationVectorABMC1_6.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_0.go(byteArray42);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_0.go(byteArray46);
        java.lang.Class<?> wildcardClass48 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_56.go(byteArray62);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_56.go(byteArray68);
        staticInitializationVectorABMC1_25.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_25.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass84 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray49 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_10.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_63.go(byteArray89);
        staticInitializationVectorABMC1_52.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray93 = new byte[] { (byte) 0, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_14.go(byteArray26);
        staticInitializationVectorABMC1_1.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_29.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        staticInitializationVectorABMC1_44.go(byteArray62);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray73);
        staticInitializationVectorABMC1_29.go(byteArray73);
        staticInitializationVectorABMC1_1.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass83 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_43.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_43.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass61 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray28);
        staticInitializationVectorABMC1_3.go(byteArray28);
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        staticInitializationVectorABMC1_32.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_32.go(byteArray80);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_32.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass44 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_4.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_4.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_71.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_79.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_82.go(byteArray93);
        staticInitializationVectorABMC1_79.go(byteArray93);
        staticInitializationVectorABMC1_71.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_13.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_38.go(byteArray72);
        staticInitializationVectorABMC1_13.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        java.lang.Class<?> wildcardClass76 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_53.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_44.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray88);
        staticInitializationVectorABMC1_44.go(byteArray88);
        staticInitializationVectorABMC1_43.go(byteArray88);
        staticInitializationVectorABMC1_30.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_20.go(byteArray69);
        staticInitializationVectorABMC1_19.go(byteArray69);
        staticInitializationVectorABMC1_8.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_8.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_38.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_38.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_38.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        staticInitializationVectorABMC1_6.go(byteArray37);
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_0.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_46.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray74);
        staticInitializationVectorABMC1_11.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 0, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass88 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_37.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray76);
        staticInitializationVectorABMC1_37.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_37.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_38.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_75.go(byteArray86);
        staticInitializationVectorABMC1_38.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_38.go(byteArray91);
        staticInitializationVectorABMC1_37.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_42.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_45.go(byteArray70);
        staticInitializationVectorABMC1_42.go(byteArray70);
        staticInitializationVectorABMC1_41.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        java.lang.Class<?> wildcardClass76 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_34.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_89.go(byteArray92);
        staticInitializationVectorABMC1_85.go(byteArray92);
        staticInitializationVectorABMC1_74.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        staticInitializationVectorABMC1_38.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass75 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_54.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_54.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_80.go(byteArray86);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_80.go(byteArray92);
        staticInitializationVectorABMC1_57.go(byteArray92);
        staticInitializationVectorABMC1_53.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass97 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_45.go(byteArray80);
        byte[] byteArray84 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_45.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_48.go(byteArray79);
        staticInitializationVectorABMC1_42.go(byteArray79);
        staticInitializationVectorABMC1_41.go(byteArray79);
        staticInitializationVectorABMC1_18.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass89 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_0.go(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        staticInitializationVectorABMC1_7.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        staticInitializationVectorABMC1_7.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_7.go(byteArray60);
        staticInitializationVectorABMC1_6.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_10.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_54.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_57.go(byteArray82);
        staticInitializationVectorABMC1_54.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        staticInitializationVectorABMC1_36.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray33);
        staticInitializationVectorABMC1_11.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_36.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray75);
        staticInitializationVectorABMC1_36.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_36.go(byteArray85);
        staticInitializationVectorABMC1_11.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass92 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_35.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        staticInitializationVectorABMC1_45.go(byteArray71);
        staticInitializationVectorABMC1_35.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_35.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_38.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_38.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_38.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_20.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        staticInitializationVectorABMC1_20.go(byteArray46);
        staticInitializationVectorABMC1_10.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_66.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_66.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_67.go(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_67.go(byteArray79);
        staticInitializationVectorABMC1_54.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray14);
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray18 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_27.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_27.go(byteArray76);
        staticInitializationVectorABMC1_26.go(byteArray76);
        staticInitializationVectorABMC1_20.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass85 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_0.go(byteArray37);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_42.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_45.go(byteArray70);
        staticInitializationVectorABMC1_42.go(byteArray70);
        staticInitializationVectorABMC1_41.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray7 = null;
        staticInitializationVectorABMC1_1.go(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_1.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        staticInitializationVectorABMC1_15.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_1.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass71 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray62);
        staticInitializationVectorABMC1_27.go(byteArray62);
        byte[] byteArray66 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_27.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        staticInitializationVectorABMC1_43.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_18.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_18.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray62);
        staticInitializationVectorABMC1_18.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray72 = null;
        staticInitializationVectorABMC1_66.go(byteArray72);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_66.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        java.lang.Class<?> wildcardClass81 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_3.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_13.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_23.go(byteArray49);
        staticInitializationVectorABMC1_13.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_3.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_69.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_69.go(byteArray85);
        staticInitializationVectorABMC1_3.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        staticInitializationVectorABMC1_60.go(byteArray67);
        staticInitializationVectorABMC1_49.go(byteArray67);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_49.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        staticInitializationVectorABMC1_8.go(byteArray56);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray65);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_8.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_80.go(byteArray91);
        staticInitializationVectorABMC1_69.go(byteArray91);
        staticInitializationVectorABMC1_8.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass96 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_8.go(byteArray37);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray50 = null;
        staticInitializationVectorABMC1_44.go(byteArray50);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_44.go(byteArray56);
        staticInitializationVectorABMC1_8.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_0.go(byteArray35);
        java.lang.Class<?> wildcardClass37 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray50);
        staticInitializationVectorABMC1_16.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_16.go(byteArray64);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_16.go(byteArray73);
        staticInitializationVectorABMC1_15.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_15.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass89 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        staticInitializationVectorABMC1_1.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_1.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray49);
        staticInitializationVectorABMC1_1.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_0.go(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray77);
        staticInitializationVectorABMC1_43.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_31.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_68.go(byteArray79);
        staticInitializationVectorABMC1_31.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_31.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_37.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_16.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        staticInitializationVectorABMC1_16.go(byteArray65);
        staticInitializationVectorABMC1_5.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_5.go(byteArray79);
        staticInitializationVectorABMC1_1.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        java.lang.Class<?> wildcardClass86 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_7.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_7.go(byteArray55);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_7.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_60.go(byteArray86);
        staticInitializationVectorABMC1_7.go(byteArray86);
        staticInitializationVectorABMC1_1.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray23);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_12.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_27.go(byteArray56);
        staticInitializationVectorABMC1_12.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_54.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_54.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass87 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_6.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_45.go(byteArray80);
        byte[] byteArray84 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_45.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass87 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass69 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        staticInitializationVectorABMC1_13.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_13.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_40.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_40.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_40.go(byteArray90);
        staticInitializationVectorABMC1_13.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray98 = null;
        staticInitializationVectorABMC1_0.go(byteArray98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_60.go(byteArray71);
        staticInitializationVectorABMC1_37.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_74.go(byteArray85);
        staticInitializationVectorABMC1_37.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_37.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_20.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        staticInitializationVectorABMC1_20.go(byteArray46);
        staticInitializationVectorABMC1_10.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_10.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_66.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        staticInitializationVectorABMC1_79.go(byteArray82);
        staticInitializationVectorABMC1_66.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_3.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        staticInitializationVectorABMC1_3.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray62);
        staticInitializationVectorABMC1_27.go(byteArray62);
        staticInitializationVectorABMC1_3.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_3.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_3.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass84 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_53.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_69.go(byteArray94);
        staticInitializationVectorABMC1_53.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_8.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_8.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_26.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass89 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        staticInitializationVectorABMC1_17.go(byteArray66);
        staticInitializationVectorABMC1_16.go(byteArray66);
        staticInitializationVectorABMC1_10.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_75.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        byte[] byteArray96 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_85.go(byteArray96);
        staticInitializationVectorABMC1_75.go(byteArray96);
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_0.go(byteArray58);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        java.lang.Class<?> wildcardClass62 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray20 = null;
        staticInitializationVectorABMC1_14.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        staticInitializationVectorABMC1_22.go(byteArray40);
        staticInitializationVectorABMC1_14.go(byteArray40);
        staticInitializationVectorABMC1_10.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray76);
        staticInitializationVectorABMC1_10.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        staticInitializationVectorABMC1_18.go(byteArray36);
        staticInitializationVectorABMC1_10.go(byteArray36);
        staticInitializationVectorABMC1_0.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_55.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_55.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        staticInitializationVectorABMC1_3.go(byteArray6);
        byte[] byteArray9 = null;
        staticInitializationVectorABMC1_3.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        staticInitializationVectorABMC1_3.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_36.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_36.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_3.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_83.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_59.go(byteArray90);
        staticInitializationVectorABMC1_58.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass98 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        staticInitializationVectorABMC1_36.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_27.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_40.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray84);
        staticInitializationVectorABMC1_40.go(byteArray84);
        byte[] byteArray90 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray90);
        staticInitializationVectorABMC1_27.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_24.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_7.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_72.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_72.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_38.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_69.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_69.go(byteArray81);
        staticInitializationVectorABMC1_38.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        staticInitializationVectorABMC1_7.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_44.go(byteArray55);
        staticInitializationVectorABMC1_7.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_7.go(byteArray60);
        staticInitializationVectorABMC1_6.go(byteArray60);
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        java.lang.Class<?> wildcardClass67 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_24.go(byteArray50);
        staticInitializationVectorABMC1_20.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_58.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray37);
        staticInitializationVectorABMC1_3.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_3.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_3.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_82.go(byteArray88);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_82.go(byteArray94);
        staticInitializationVectorABMC1_59.go(byteArray94);
        staticInitializationVectorABMC1_3.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass91 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_43.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_43.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass61 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        staticInitializationVectorABMC1_23.go(byteArray41);
        staticInitializationVectorABMC1_15.go(byteArray41);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_15.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_55.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_55.go(byteArray69);
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_50.go(byteArray81);
        staticInitializationVectorABMC1_44.go(byteArray81);
        staticInitializationVectorABMC1_43.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_0.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_56.go(byteArray62);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_56.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        byte[] byteArray95 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_66.go(byteArray95);
        staticInitializationVectorABMC1_56.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        staticInitializationVectorABMC1_70.go(byteArray77);
        staticInitializationVectorABMC1_59.go(byteArray77);
        staticInitializationVectorABMC1_51.go(byteArray77);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray86);
        staticInitializationVectorABMC1_43.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        staticInitializationVectorABMC1_0.go(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray50);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_0.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_54.go(byteArray60);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_54.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_54.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_7.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_7.go(byteArray55);
        byte[] byteArray58 = null;
        staticInitializationVectorABMC1_7.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_68.go(byteArray86);
        staticInitializationVectorABMC1_60.go(byteArray86);
        staticInitializationVectorABMC1_7.go(byteArray86);
        staticInitializationVectorABMC1_1.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        staticInitializationVectorABMC1_15.go(byteArray33);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_15.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_46.go(byteArray52);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray58);
        staticInitializationVectorABMC1_15.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_62.go(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_62.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        staticInitializationVectorABMC1_30.go(byteArray79);
        staticInitializationVectorABMC1_29.go(byteArray79);
        staticInitializationVectorABMC1_23.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray42);
        staticInitializationVectorABMC1_20.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_52.go(byteArray83);
        staticInitializationVectorABMC1_46.go(byteArray83);
        staticInitializationVectorABMC1_45.go(byteArray83);
        staticInitializationVectorABMC1_20.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_69.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_72.go(byteArray83);
        staticInitializationVectorABMC1_69.go(byteArray83);
        byte[] byteArray87 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass90 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray21);
        staticInitializationVectorABMC1_0.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_24.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_24.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_65.go(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_65.go(byteArray77);
        staticInitializationVectorABMC1_52.go(byteArray77);
        staticInitializationVectorABMC1_24.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_85.go(byteArray88);
        staticInitializationVectorABMC1_81.go(byteArray88);
        staticInitializationVectorABMC1_24.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        byte[] byteArray21 = null;
        staticInitializationVectorABMC1_15.go(byteArray21);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_15.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        staticInitializationVectorABMC1_15.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_15.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_15.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_69.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_69.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_15.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        byte[] byteArray25 = null;
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        staticInitializationVectorABMC1_34.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        staticInitializationVectorABMC1_34.go(byteArray52);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_34.go(byteArray83);
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_27.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_32.go(byteArray75);
        staticInitializationVectorABMC1_21.go(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray81);
        staticInitializationVectorABMC1_15.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_22.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray47);
        staticInitializationVectorABMC1_22.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_50.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_63.go(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_63.go(byteArray75);
        staticInitializationVectorABMC1_50.go(byteArray75);
        staticInitializationVectorABMC1_22.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        staticInitializationVectorABMC1_79.go(byteArray86);
        staticInitializationVectorABMC1_22.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray39 = null;
        staticInitializationVectorABMC1_33.go(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_33.go(byteArray45);
        staticInitializationVectorABMC1_10.go(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_10.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_54.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_70.go(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_70.go(byteArray82);
        staticInitializationVectorABMC1_57.go(byteArray82);
        staticInitializationVectorABMC1_54.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass87 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_19.go(byteArray54);
        staticInitializationVectorABMC1_15.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        java.lang.Class<?> wildcardClass61 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        staticInitializationVectorABMC1_38.go(byteArray41);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_38.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_38.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_38.go(byteArray77);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_38.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass96 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray40);
        staticInitializationVectorABMC1_6.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_6.go(byteArray54);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_6.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        java.lang.Class<?> wildcardClass70 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        staticInitializationVectorABMC1_41.go(byteArray48);
        staticInitializationVectorABMC1_30.go(byteArray48);
        staticInitializationVectorABMC1_17.go(byteArray48);
        staticInitializationVectorABMC1_16.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_60.go(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_60.go(byteArray72);
        staticInitializationVectorABMC1_37.go(byteArray72);
        byte[] byteArray76 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_37.go(byteArray76);
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass88 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        byte[] byteArray24 = null;
        staticInitializationVectorABMC1_18.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        staticInitializationVectorABMC1_26.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        staticInitializationVectorABMC1_26.go(byteArray44);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_26.go(byteArray55);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_26.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_62.go(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_62.go(byteArray74);
        staticInitializationVectorABMC1_26.go(byteArray74);
        staticInitializationVectorABMC1_18.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_13.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        staticInitializationVectorABMC1_13.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_66.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_86.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray51);
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_17.go(byteArray70);
        staticInitializationVectorABMC1_6.go(byteArray70);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_6.go(byteArray74);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_6.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_6.go(byteArray85);
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) 1, (byte) 10, (byte) -1 };
        staticInitializationVectorABMC1_6.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_8.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        staticInitializationVectorABMC1_8.go(byteArray34);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_8.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass60 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_31.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_62.go(byteArray80);
        staticInitializationVectorABMC1_31.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray91 = null;
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        staticInitializationVectorABMC1_13.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        staticInitializationVectorABMC1_13.go(byteArray31);
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_0.go(byteArray86);
        byte[] byteArray88 = null;
        staticInitializationVectorABMC1_0.go(byteArray88);
        byte[] byteArray90 = null;
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass92 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_3.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass71 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_11.go(byteArray40);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        staticInitializationVectorABMC1_47.go(byteArray65);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_47.go(byteArray76);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_47.go(byteArray81);
        staticInitializationVectorABMC1_11.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_84.go(byteArray91);
        staticInitializationVectorABMC1_11.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray39 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        java.lang.Class<?> wildcardClass80 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_45.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        staticInitializationVectorABMC1_58.go(byteArray76);
        staticInitializationVectorABMC1_45.go(byteArray76);
        staticInitializationVectorABMC1_39.go(byteArray76);
        staticInitializationVectorABMC1_38.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_38.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = new byte[] {};
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray7 = null;
        staticInitializationVectorABMC1_1.go(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_1.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_1.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_18.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_34.go(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_34.go(byteArray46);
        staticInitializationVectorABMC1_21.go(byteArray46);
        staticInitializationVectorABMC1_18.go(byteArray46);
        staticInitializationVectorABMC1_17.go(byteArray46);
        staticInitializationVectorABMC1_1.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_52.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_55.go(byteArray66);
        staticInitializationVectorABMC1_52.go(byteArray66);
        staticInitializationVectorABMC1_1.go(byteArray66);
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass71 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_35.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_35.go(byteArray61);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 0, (byte) 0 };
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_73.go(byteArray84);
        byte[] byteArray86 = null;
        staticInitializationVectorABMC1_73.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_89.go(byteArray91);
        staticInitializationVectorABMC1_88.go(byteArray91);
        staticInitializationVectorABMC1_73.go(byteArray91);
        staticInitializationVectorABMC1_0.go(byteArray91);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_59.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_62.go(byteArray73);
        staticInitializationVectorABMC1_59.go(byteArray73);
        staticInitializationVectorABMC1_51.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        java.lang.Class<?> wildcardClass78 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_6.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_37.go(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_37.go(byteArray49);
        staticInitializationVectorABMC1_6.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        staticInitializationVectorABMC1_56.go(byteArray59);
        staticInitializationVectorABMC1_52.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        staticInitializationVectorABMC1_52.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_75.go(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_75.go(byteArray87);
        staticInitializationVectorABMC1_52.go(byteArray87);
        staticInitializationVectorABMC1_6.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        byte[] byteArray94 = null;
        staticInitializationVectorABMC1_0.go(byteArray94);
        byte[] byteArray96 = null;
        staticInitializationVectorABMC1_0.go(byteArray96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        staticInitializationVectorABMC1_20.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        staticInitializationVectorABMC1_20.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray54);
        staticInitializationVectorABMC1_20.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_57.go(byteArray68);
        staticInitializationVectorABMC1_20.go(byteArray68);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_20.go(byteArray77);
        staticInitializationVectorABMC1_14.go(byteArray77);
        staticInitializationVectorABMC1_0.go(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) -1, (byte) 0, (byte) 100, (byte) -1, (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        byte[] byteArray16 = null;
        staticInitializationVectorABMC1_10.go(byteArray16);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_10.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_20.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        staticInitializationVectorABMC1_20.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_52.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_81.go(byteArray83);
        staticInitializationVectorABMC1_80.go(byteArray83);
        staticInitializationVectorABMC1_76.go(byteArray83);
        staticInitializationVectorABMC1_65.go(byteArray83);
        staticInitializationVectorABMC1_52.go(byteArray83);
        staticInitializationVectorABMC1_20.go(byteArray83);
        staticInitializationVectorABMC1_10.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_6.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        staticInitializationVectorABMC1_16.go(byteArray42);
        staticInitializationVectorABMC1_6.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_61.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_61.go(byteArray75);
        staticInitializationVectorABMC1_6.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_2 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_2.go(byteArray4);
        staticInitializationVectorABMC1_1.go(byteArray4);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_1.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_14.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        staticInitializationVectorABMC1_29.go(byteArray47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray58);
        staticInitializationVectorABMC1_14.go(byteArray58);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray64);
        staticInitializationVectorABMC1_1.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        staticInitializationVectorABMC1_14.go(byteArray45);
        staticInitializationVectorABMC1_8.go(byteArray45);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_8.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_54.go(byteArray85);
        staticInitializationVectorABMC1_8.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass93 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        staticInitializationVectorABMC1_16.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray50);
        staticInitializationVectorABMC1_16.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray64);
        staticInitializationVectorABMC1_16.go(byteArray64);
        staticInitializationVectorABMC1_15.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        java.lang.Class<?> wildcardClass70 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        staticInitializationVectorABMC1_65.go(byteArray72);
        staticInitializationVectorABMC1_54.go(byteArray72);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        java.lang.Class<?> wildcardClass86 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_0.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        byte[] byteArray18 = null;
        staticInitializationVectorABMC1_12.go(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_12.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_12.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        staticInitializationVectorABMC1_40.go(byteArray58);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_40.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_86.go(byteArray89);
        staticInitializationVectorABMC1_82.go(byteArray89);
        staticInitializationVectorABMC1_71.go(byteArray89);
        staticInitializationVectorABMC1_40.go(byteArray89);
        staticInitializationVectorABMC1_39.go(byteArray89);
        staticInitializationVectorABMC1_28.go(byteArray89);
        staticInitializationVectorABMC1_12.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        staticInitializationVectorABMC1_63.go(byteArray70);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_63.go(byteArray74);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_63.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_63.go(byteArray81);
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        staticInitializationVectorABMC1_64.go(byteArray71);
        staticInitializationVectorABMC1_53.go(byteArray71);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_53.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_0.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_0.go(byteArray22);
        java.lang.Class<?> wildcardClass26 = byteArray22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        staticInitializationVectorABMC1_30.go(byteArray37);
        staticInitializationVectorABMC1_19.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray48 = null;
        staticInitializationVectorABMC1_42.go(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_42.go(byteArray54);
        staticInitializationVectorABMC1_19.go(byteArray54);
        staticInitializationVectorABMC1_15.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        java.lang.Class<?> wildcardClass63 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray31 = null;
        staticInitializationVectorABMC1_0.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray44);
        byte[] byteArray46 = null;
        staticInitializationVectorABMC1_33.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_64.go(byteArray66);
        staticInitializationVectorABMC1_63.go(byteArray66);
        staticInitializationVectorABMC1_59.go(byteArray66);
        staticInitializationVectorABMC1_48.go(byteArray66);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray77);
        staticInitializationVectorABMC1_33.go(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_33.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass91 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        byte[] byteArray17 = null;
        staticInitializationVectorABMC1_11.go(byteArray17);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_11.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_21.go(byteArray32);
        staticInitializationVectorABMC1_11.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_58.go(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_58.go(byteArray70);
        staticInitializationVectorABMC1_35.go(byteArray70);
        staticInitializationVectorABMC1_11.go(byteArray70);
        staticInitializationVectorABMC1_0.go(byteArray70);
        byte[] byteArray75 = null;
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray77 = null;
        staticInitializationVectorABMC1_0.go(byteArray77);
        byte[] byteArray79 = null;
        staticInitializationVectorABMC1_0.go(byteArray79);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        java.lang.Class<?> wildcardClass83 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_27.go(byteArray72);
        staticInitializationVectorABMC1_14.go(byteArray72);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 100, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray82);
        staticInitializationVectorABMC1_0.go(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_0.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_16.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_29.go(byteArray41);
        staticInitializationVectorABMC1_16.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_51.go(byteArray86);
        staticInitializationVectorABMC1_47.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        staticInitializationVectorABMC1_35.go(byteArray38);
        staticInitializationVectorABMC1_31.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_31.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_57.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_57.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_57.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray82 = null;
        staticInitializationVectorABMC1_0.go(byteArray82);
        java.lang.Class<?> wildcardClass84 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        staticInitializationVectorABMC1_26.go(byteArray29);
        staticInitializationVectorABMC1_22.go(byteArray29);
        staticInitializationVectorABMC1_11.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        staticInitializationVectorABMC1_34.go(byteArray37);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_34.go(byteArray45);
        staticInitializationVectorABMC1_11.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_48.go(byteArray59);
        staticInitializationVectorABMC1_11.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_11.go(byteArray64);
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 1, (byte) 10, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray88);
        java.lang.Class<?> wildcardClass90 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_3.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        byte[] byteArray28 = null;
        staticInitializationVectorABMC1_0.go(byteArray28);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_31.go(byteArray33);
        staticInitializationVectorABMC1_30.go(byteArray33);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_30.go(byteArray41);
        staticInitializationVectorABMC1_0.go(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_0.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_0.go(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        staticInitializationVectorABMC1_11.go(byteArray14);
        staticInitializationVectorABMC1_7.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        staticInitializationVectorABMC1_22.go(byteArray25);
        staticInitializationVectorABMC1_18.go(byteArray25);
        staticInitializationVectorABMC1_7.go(byteArray25);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_7.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_38.go(byteArray56);
        staticInitializationVectorABMC1_7.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        staticInitializationVectorABMC1_0.go(byteArray56);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_0.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_72.go(byteArray83);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_72.go(byteArray85);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_88 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_88.go(byteArray90);
        staticInitializationVectorABMC1_87.go(byteArray90);
        staticInitializationVectorABMC1_72.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass95 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        staticInitializationVectorABMC1_3.go(byteArray21);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_3.go(byteArray32);
        staticInitializationVectorABMC1_0.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_58.go(byteArray69);
        staticInitializationVectorABMC1_35.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_72.go(byteArray83);
        staticInitializationVectorABMC1_35.go(byteArray83);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_86 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_86.go(byteArray88);
        staticInitializationVectorABMC1_35.go(byteArray88);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_92 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray94 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_92.go(byteArray94);
        staticInitializationVectorABMC1_91.go(byteArray94);
        staticInitializationVectorABMC1_35.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass99 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_7.go(byteArray9);
        staticInitializationVectorABMC1_6.go(byteArray9);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_6.go(byteArray12);
        byte[] byteArray14 = null;
        staticInitializationVectorABMC1_6.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        byte[] byteArray22 = null;
        staticInitializationVectorABMC1_16.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        staticInitializationVectorABMC1_24.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        staticInitializationVectorABMC1_24.go(byteArray42);
        staticInitializationVectorABMC1_16.go(byteArray42);
        staticInitializationVectorABMC1_6.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        staticInitializationVectorABMC1_49.go(byteArray56);
        staticInitializationVectorABMC1_6.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_61.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_64 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_64.go(byteArray67);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_64.go(byteArray75);
        staticInitializationVectorABMC1_61.go(byteArray75);
        staticInitializationVectorABMC1_6.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass80 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_17.go(byteArray46);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray51);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        staticInitializationVectorABMC1_53.go(byteArray56);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_53.go(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_53.go(byteArray65);
        staticInitializationVectorABMC1_17.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        staticInitializationVectorABMC1_68.go(byteArray75);
        staticInitializationVectorABMC1_17.go(byteArray75);
        staticInitializationVectorABMC1_0.go(byteArray75);
        java.lang.Class<?> wildcardClass81 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        byte[] byteArray61 = null;
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        java.lang.Class<?> wildcardClass65 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray24);
        byte[] byteArray26 = null;
        staticInitializationVectorABMC1_13.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray57);
        staticInitializationVectorABMC1_13.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        staticInitializationVectorABMC1_13.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_66.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_70.go(byteArray72);
        staticInitializationVectorABMC1_69.go(byteArray72);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_69.go(byteArray80);
        staticInitializationVectorABMC1_66.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        java.lang.Class<?> wildcardClass86 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = null;
        staticInitializationVectorABMC1_69.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_72.go(byteArray83);
        staticInitializationVectorABMC1_69.go(byteArray83);
        byte[] byteArray87 = new byte[] { (byte) -1 };
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        java.lang.Class<?> wildcardClass90 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray6 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_4.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        staticInitializationVectorABMC1_4.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        staticInitializationVectorABMC1_19.go(byteArray22);
        staticInitializationVectorABMC1_15.go(byteArray22);
        staticInitializationVectorABMC1_4.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        byte[] byteArray33 = null;
        staticInitializationVectorABMC1_27.go(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_27.go(byteArray39);
        staticInitializationVectorABMC1_4.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        byte[] byteArray43 = null;
        staticInitializationVectorABMC1_0.go(byteArray43);
        byte[] byteArray45 = null;
        staticInitializationVectorABMC1_0.go(byteArray45);
        byte[] byteArray47 = null;
        staticInitializationVectorABMC1_0.go(byteArray47);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_0.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        staticInitializationVectorABMC1_55.go(byteArray58);
        staticInitializationVectorABMC1_51.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        staticInitializationVectorABMC1_66.go(byteArray69);
        staticInitializationVectorABMC1_62.go(byteArray69);
        staticInitializationVectorABMC1_51.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_51.go(byteArray86);
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) 10, (byte) 10 };
        staticInitializationVectorABMC1_51.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass95 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_9.go(byteArray11);
        staticInitializationVectorABMC1_8.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_27.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        staticInitializationVectorABMC1_27.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        staticInitializationVectorABMC1_38.go(byteArray45);
        staticInitializationVectorABMC1_27.go(byteArray45);
        staticInitializationVectorABMC1_14.go(byteArray45);
        staticInitializationVectorABMC1_8.go(byteArray45);
        byte[] byteArray52 = null;
        staticInitializationVectorABMC1_8.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_54.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_83.go(byteArray85);
        staticInitializationVectorABMC1_82.go(byteArray85);
        staticInitializationVectorABMC1_78.go(byteArray85);
        staticInitializationVectorABMC1_67.go(byteArray85);
        staticInitializationVectorABMC1_54.go(byteArray85);
        staticInitializationVectorABMC1_8.go(byteArray85);
        staticInitializationVectorABMC1_0.go(byteArray85);
        java.lang.Class<?> wildcardClass93 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray1 = null;
        staticInitializationVectorABMC1_0.go(byteArray1);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_3 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray5 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_3.go(byteArray5);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_7 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        staticInitializationVectorABMC1_7.go(byteArray10);
        staticInitializationVectorABMC1_3.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        staticInitializationVectorABMC1_14.go(byteArray32);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        staticInitializationVectorABMC1_45.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_56 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_56.go(byteArray58);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        staticInitializationVectorABMC1_60.go(byteArray63);
        staticInitializationVectorABMC1_56.go(byteArray63);
        staticInitializationVectorABMC1_45.go(byteArray63);
        staticInitializationVectorABMC1_14.go(byteArray63);
        staticInitializationVectorABMC1_3.go(byteArray63);
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        java.lang.Class<?> wildcardClass73 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        staticInitializationVectorABMC1_10.go(byteArray13);
        staticInitializationVectorABMC1_6.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        staticInitializationVectorABMC1_6.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        byte[] byteArray35 = null;
        staticInitializationVectorABMC1_29.go(byteArray35);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_29.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        staticInitializationVectorABMC1_54.go(byteArray57);
        staticInitializationVectorABMC1_50.go(byteArray57);
        staticInitializationVectorABMC1_39.go(byteArray57);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_39.go(byteArray68);
        staticInitializationVectorABMC1_29.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_76.go(byteArray78);
        staticInitializationVectorABMC1_75.go(byteArray78);
        staticInitializationVectorABMC1_71.go(byteArray78);
        staticInitializationVectorABMC1_29.go(byteArray78);
        staticInitializationVectorABMC1_6.go(byteArray78);
        staticInitializationVectorABMC1_0.go(byteArray78);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray89 = null;
        staticInitializationVectorABMC1_0.go(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        byte[] byteArray8 = null;
        staticInitializationVectorABMC1_0.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        staticInitializationVectorABMC1_10.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_26 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_26.go(byteArray28);
        staticInitializationVectorABMC1_25.go(byteArray28);
        staticInitializationVectorABMC1_21.go(byteArray28);
        staticInitializationVectorABMC1_10.go(byteArray28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_10.go(byteArray39);
        staticInitializationVectorABMC1_0.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray54 = null;
        staticInitializationVectorABMC1_0.go(byteArray54);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_0.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_58.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_76 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        staticInitializationVectorABMC1_76.go(byteArray79);
        staticInitializationVectorABMC1_72.go(byteArray79);
        staticInitializationVectorABMC1_61.go(byteArray79);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray90);
        staticInitializationVectorABMC1_58.go(byteArray90);
        staticInitializationVectorABMC1_0.go(byteArray90);
        java.lang.Class<?> wildcardClass94 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_75 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_75.go(byteArray77);
        staticInitializationVectorABMC1_74.go(byteArray77);
        byte[] byteArray80 = null;
        staticInitializationVectorABMC1_74.go(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_74.go(byteArray86);
        staticInitializationVectorABMC1_32.go(byteArray86);
        staticInitializationVectorABMC1_0.go(byteArray86);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_91 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_91.go(byteArray93);
        staticInitializationVectorABMC1_90.go(byteArray93);
        staticInitializationVectorABMC1_0.go(byteArray93);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        staticInitializationVectorABMC1_5.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        staticInitializationVectorABMC1_16.go(byteArray23);
        staticInitializationVectorABMC1_5.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        staticInitializationVectorABMC1_5.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        staticInitializationVectorABMC1_42.go(byteArray45);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray53);
        staticInitializationVectorABMC1_5.go(byteArray53);
        staticInitializationVectorABMC1_4.go(byteArray53);
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 100, (byte) 10, (byte) 1, (byte) -1, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray64);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        byte[] byteArray68 = null;
        staticInitializationVectorABMC1_0.go(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_59.go(byteArray70);
        staticInitializationVectorABMC1_36.go(byteArray70);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_73.go(byteArray84);
        staticInitializationVectorABMC1_36.go(byteArray84);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_87 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_87.go(byteArray89);
        staticInitializationVectorABMC1_36.go(byteArray89);
        staticInitializationVectorABMC1_0.go(byteArray89);
        byte[] byteArray93 = null;
        staticInitializationVectorABMC1_0.go(byteArray93);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        byte[] byteArray97 = null;
        staticInitializationVectorABMC1_0.go(byteArray97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_21.go(byteArray23);
        staticInitializationVectorABMC1_20.go(byteArray23);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_20.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        staticInitializationVectorABMC1_33.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_49.go(byteArray51);
        staticInitializationVectorABMC1_48.go(byteArray51);
        staticInitializationVectorABMC1_44.go(byteArray51);
        staticInitializationVectorABMC1_33.go(byteArray51);
        staticInitializationVectorABMC1_20.go(byteArray51);
        staticInitializationVectorABMC1_14.go(byteArray51);
        staticInitializationVectorABMC1_13.go(byteArray51);
        staticInitializationVectorABMC1_0.go(byteArray51);
        byte[] byteArray60 = null;
        staticInitializationVectorABMC1_0.go(byteArray60);
        byte[] byteArray62 = null;
        staticInitializationVectorABMC1_0.go(byteArray62);
        byte[] byteArray64 = null;
        staticInitializationVectorABMC1_0.go(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = null;
        staticInitializationVectorABMC1_6.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_9 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_10 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_10.go(byteArray12);
        staticInitializationVectorABMC1_9.go(byteArray12);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_9.go(byteArray20);
        staticInitializationVectorABMC1_6.go(byteArray20);
        staticInitializationVectorABMC1_0.go(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_4.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        staticInitializationVectorABMC1_4.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_39.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        staticInitializationVectorABMC1_39.go(byteArray46);
        staticInitializationVectorABMC1_28.go(byteArray46);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_51.go(byteArray63);
        staticInitializationVectorABMC1_28.go(byteArray63);
        staticInitializationVectorABMC1_4.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_67.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_67.go(byteArray74);
        staticInitializationVectorABMC1_4.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray92 = null;
        staticInitializationVectorABMC1_0.go(byteArray92);
        java.lang.Class<?> wildcardClass94 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_36.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_51.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_51.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_61.go(byteArray72);
        staticInitializationVectorABMC1_51.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_4.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_18.go(byteArray20);
        staticInitializationVectorABMC1_17.go(byteArray20);
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_17.go(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_17.go(byteArray29);
        staticInitializationVectorABMC1_4.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_32.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        staticInitializationVectorABMC1_45.go(byteArray48);
        byte[] byteArray51 = null;
        staticInitializationVectorABMC1_45.go(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_45.go(byteArray57);
        staticInitializationVectorABMC1_32.go(byteArray57);
        staticInitializationVectorABMC1_4.go(byteArray57);
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 0, (byte) 10, (byte) 10, (byte) -1 };
        staticInitializationVectorABMC1_0.go(byteArray67);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_0.go(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_47.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_55 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_55.go(byteArray57);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_60 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_60.go(byteArray62);
        staticInitializationVectorABMC1_59.go(byteArray62);
        staticInitializationVectorABMC1_55.go(byteArray62);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        staticInitializationVectorABMC1_55.go(byteArray73);
        staticInitializationVectorABMC1_47.go(byteArray73);
        staticInitializationVectorABMC1_36.go(byteArray73);
        staticInitializationVectorABMC1_0.go(byteArray73);
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_0.go(byteArray81);
        byte[] byteArray83 = null;
        staticInitializationVectorABMC1_0.go(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        byte[] byteArray12 = null;
        staticInitializationVectorABMC1_4.go(byteArray12);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_18 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        staticInitializationVectorABMC1_18.go(byteArray21);
        staticInitializationVectorABMC1_14.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_52.go(byteArray54);
        staticInitializationVectorABMC1_51.go(byteArray54);
        staticInitializationVectorABMC1_47.go(byteArray54);
        staticInitializationVectorABMC1_36.go(byteArray54);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray65);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_67 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_68.go(byteArray70);
        staticInitializationVectorABMC1_67.go(byteArray70);
        byte[] byteArray73 = null;
        staticInitializationVectorABMC1_67.go(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_67.go(byteArray79);
        staticInitializationVectorABMC1_36.go(byteArray79);
        staticInitializationVectorABMC1_25.go(byteArray79);
        staticInitializationVectorABMC1_14.go(byteArray79);
        staticInitializationVectorABMC1_4.go(byteArray79);
        staticInitializationVectorABMC1_0.go(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        staticInitializationVectorABMC1_0.go(byteArray16);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_20 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_20.go(byteArray22);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        staticInitializationVectorABMC1_24.go(byteArray27);
        byte[] byteArray30 = null;
        staticInitializationVectorABMC1_24.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        staticInitializationVectorABMC1_32.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        staticInitializationVectorABMC1_32.go(byteArray50);
        staticInitializationVectorABMC1_24.go(byteArray50);
        staticInitializationVectorABMC1_20.go(byteArray50);
        staticInitializationVectorABMC1_0.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_63 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_63.go(byteArray65);
        staticInitializationVectorABMC1_62.go(byteArray65);
        staticInitializationVectorABMC1_58.go(byteArray65);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_58.go(byteArray69);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_72.go(byteArray74);
        staticInitializationVectorABMC1_71.go(byteArray74);
        staticInitializationVectorABMC1_58.go(byteArray74);
        staticInitializationVectorABMC1_0.go(byteArray74);
        java.lang.Class<?> wildcardClass79 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_35 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_35.go(byteArray37);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_39 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        staticInitializationVectorABMC1_39.go(byteArray42);
        staticInitializationVectorABMC1_35.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        staticInitializationVectorABMC1_35.go(byteArray53);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_35.go(byteArray64);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_70 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_71 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_71.go(byteArray73);
        staticInitializationVectorABMC1_70.go(byteArray73);
        staticInitializationVectorABMC1_66.go(byteArray73);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_77.go(byteArray79);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_81 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_82 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_82.go(byteArray84);
        staticInitializationVectorABMC1_81.go(byteArray84);
        staticInitializationVectorABMC1_77.go(byteArray84);
        staticInitializationVectorABMC1_66.go(byteArray84);
        staticInitializationVectorABMC1_35.go(byteArray84);
        staticInitializationVectorABMC1_34.go(byteArray84);
        staticInitializationVectorABMC1_23.go(byteArray84);
        byte[] byteArray95 = new byte[] { (byte) -1, (byte) -1, (byte) -1 };
        staticInitializationVectorABMC1_23.go(byteArray95);
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        byte[] byteArray15 = null;
        staticInitializationVectorABMC1_0.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_21 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_22.go(byteArray24);
        staticInitializationVectorABMC1_21.go(byteArray24);
        staticInitializationVectorABMC1_17.go(byteArray24);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        staticInitializationVectorABMC1_28.go(byteArray35);
        staticInitializationVectorABMC1_17.go(byteArray35);
        staticInitializationVectorABMC1_0.go(byteArray35);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_0.go(byteArray41);
        java.lang.Class<?> wildcardClass43 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        byte[] byteArray10 = null;
        staticInitializationVectorABMC1_4.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        staticInitializationVectorABMC1_4.go(byteArray30);
        staticInitializationVectorABMC1_0.go(byteArray30);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        byte[] byteArray56 = null;
        staticInitializationVectorABMC1_50.go(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_50.go(byteArray62);
        staticInitializationVectorABMC1_37.go(byteArray62);
        staticInitializationVectorABMC1_0.go(byteArray62);
        byte[] byteArray66 = null;
        staticInitializationVectorABMC1_0.go(byteArray66);
        java.lang.Class<?> wildcardClass68 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        byte[] byteArray32 = null;
        staticInitializationVectorABMC1_0.go(byteArray32);
        byte[] byteArray34 = null;
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray42 = null;
        staticInitializationVectorABMC1_36.go(byteArray42);
        byte[] byteArray44 = null;
        staticInitializationVectorABMC1_36.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_46.go(byteArray48);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_51 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_51.go(byteArray53);
        staticInitializationVectorABMC1_50.go(byteArray53);
        staticInitializationVectorABMC1_46.go(byteArray53);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_57.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        staticInitializationVectorABMC1_57.go(byteArray64);
        staticInitializationVectorABMC1_46.go(byteArray64);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_46.go(byteArray75);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_46.go(byteArray80);
        staticInitializationVectorABMC1_36.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray84 = null;
        staticInitializationVectorABMC1_0.go(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_31 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_32.go(byteArray34);
        staticInitializationVectorABMC1_31.go(byteArray34);
        byte[] byteArray37 = null;
        staticInitializationVectorABMC1_31.go(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_31.go(byteArray43);
        staticInitializationVectorABMC1_0.go(byteArray43);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_0.go(byteArray49);
        byte[] byteArray53 = null;
        staticInitializationVectorABMC1_0.go(byteArray53);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_0.go(byteArray55);
        byte[] byteArray57 = null;
        staticInitializationVectorABMC1_0.go(byteArray57);
        java.lang.Class<?> wildcardClass59 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        byte[] byteArray11 = null;
        staticInitializationVectorABMC1_0.go(byteArray11);
        byte[] byteArray13 = null;
        staticInitializationVectorABMC1_0.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_22 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray23 = null;
        staticInitializationVectorABMC1_22.go(byteArray23);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_25 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_25.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_30 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_30.go(byteArray32);
        staticInitializationVectorABMC1_29.go(byteArray32);
        staticInitializationVectorABMC1_25.go(byteArray32);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_36.go(byteArray38);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_41.go(byteArray43);
        staticInitializationVectorABMC1_40.go(byteArray43);
        staticInitializationVectorABMC1_36.go(byteArray43);
        staticInitializationVectorABMC1_25.go(byteArray43);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_25.go(byteArray54);
        staticInitializationVectorABMC1_22.go(byteArray54);
        staticInitializationVectorABMC1_0.go(byteArray54);
        java.lang.Class<?> wildcardClass58 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_6 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_6.go(byteArray8);
        staticInitializationVectorABMC1_5.go(byteArray8);
        staticInitializationVectorABMC1_1.go(byteArray8);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_44.go(byteArray46);
        staticInitializationVectorABMC1_43.go(byteArray46);
        byte[] byteArray49 = null;
        staticInitializationVectorABMC1_43.go(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_43.go(byteArray55);
        staticInitializationVectorABMC1_12.go(byteArray55);
        staticInitializationVectorABMC1_1.go(byteArray55);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_1.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_62 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_62.go(byteArray64);
        staticInitializationVectorABMC1_61.go(byteArray64);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_61.go(byteArray67);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        staticInitializationVectorABMC1_73.go(byteArray76);
        staticInitializationVectorABMC1_69.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_80.go(byteArray82);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        staticInitializationVectorABMC1_84.go(byteArray87);
        staticInitializationVectorABMC1_80.go(byteArray87);
        staticInitializationVectorABMC1_69.go(byteArray87);
        staticInitializationVectorABMC1_61.go(byteArray87);
        staticInitializationVectorABMC1_1.go(byteArray87);
        staticInitializationVectorABMC1_0.go(byteArray87);
        byte[] byteArray95 = null;
        staticInitializationVectorABMC1_0.go(byteArray95);
        java.lang.Class<?> wildcardClass97 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_23.go(byteArray34);
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_38 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_38.go(byteArray40);
        staticInitializationVectorABMC1_37.go(byteArray40);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray48);
        staticInitializationVectorABMC1_0.go(byteArray48);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 10, (byte) 1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray57);
        byte[] byteArray59 = null;
        staticInitializationVectorABMC1_0.go(byteArray59);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_61 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_61.go(byteArray63);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_66 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_66.go(byteArray68);
        staticInitializationVectorABMC1_65.go(byteArray68);
        staticInitializationVectorABMC1_61.go(byteArray68);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_72 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        staticInitializationVectorABMC1_72.go(byteArray75);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_72.go(byteArray83);
        staticInitializationVectorABMC1_61.go(byteArray83);
        staticInitializationVectorABMC1_0.go(byteArray83);
        byte[] byteArray87 = null;
        staticInitializationVectorABMC1_0.go(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        byte[] byteArray29 = null;
        staticInitializationVectorABMC1_23.go(byteArray29);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_23.go(byteArray35);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_41 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        staticInitializationVectorABMC1_41.go(byteArray44);
        staticInitializationVectorABMC1_37.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_52 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        staticInitializationVectorABMC1_52.go(byteArray55);
        staticInitializationVectorABMC1_48.go(byteArray55);
        staticInitializationVectorABMC1_37.go(byteArray55);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_37.go(byteArray66);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_68 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_69 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_69.go(byteArray71);
        staticInitializationVectorABMC1_68.go(byteArray71);
        byte[] byteArray74 = null;
        staticInitializationVectorABMC1_68.go(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_68.go(byteArray80);
        staticInitializationVectorABMC1_37.go(byteArray80);
        staticInitializationVectorABMC1_23.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        java.lang.Class<?> wildcardClass85 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_12.go(byteArray14);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_17 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_17.go(byteArray19);
        staticInitializationVectorABMC1_16.go(byteArray19);
        staticInitializationVectorABMC1_12.go(byteArray19);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_23.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_27 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_28.go(byteArray30);
        staticInitializationVectorABMC1_27.go(byteArray30);
        staticInitializationVectorABMC1_23.go(byteArray30);
        staticInitializationVectorABMC1_12.go(byteArray30);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_12.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        staticInitializationVectorABMC1_12.go(byteArray61);
        staticInitializationVectorABMC1_11.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        byte[] byteArray71 = null;
        staticInitializationVectorABMC1_0.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_73 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_73.go(byteArray75);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_77 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_78.go(byteArray80);
        staticInitializationVectorABMC1_77.go(byteArray80);
        staticInitializationVectorABMC1_73.go(byteArray80);
        staticInitializationVectorABMC1_0.go(byteArray80);
        byte[] byteArray85 = null;
        staticInitializationVectorABMC1_0.go(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray6 = null;
        staticInitializationVectorABMC1_0.go(byteArray6);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_8 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_8.go(byteArray10);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_12 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_13.go(byteArray15);
        staticInitializationVectorABMC1_12.go(byteArray15);
        staticInitializationVectorABMC1_8.go(byteArray15);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_19 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_19.go(byteArray21);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_23 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_24 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_24.go(byteArray26);
        staticInitializationVectorABMC1_23.go(byteArray26);
        staticInitializationVectorABMC1_19.go(byteArray26);
        staticInitializationVectorABMC1_8.go(byteArray26);
        staticInitializationVectorABMC1_0.go(byteArray26);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_32 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_33.go(byteArray35);
        staticInitializationVectorABMC1_32.go(byteArray35);
        byte[] byteArray38 = null;
        staticInitializationVectorABMC1_32.go(byteArray38);
        byte[] byteArray40 = null;
        staticInitializationVectorABMC1_32.go(byteArray40);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_42 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_42.go(byteArray44);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_46 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_47.go(byteArray49);
        staticInitializationVectorABMC1_46.go(byteArray49);
        staticInitializationVectorABMC1_42.go(byteArray49);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_53 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_53.go(byteArray55);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_57 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_58.go(byteArray60);
        staticInitializationVectorABMC1_57.go(byteArray60);
        staticInitializationVectorABMC1_53.go(byteArray60);
        staticInitializationVectorABMC1_42.go(byteArray60);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_42.go(byteArray71);
        staticInitializationVectorABMC1_32.go(byteArray71);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_74 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_74.go(byteArray76);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_78 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_79 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_79.go(byteArray81);
        staticInitializationVectorABMC1_78.go(byteArray81);
        staticInitializationVectorABMC1_74.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_85 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_85.go(byteArray87);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_89 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_90 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_90.go(byteArray92);
        staticInitializationVectorABMC1_89.go(byteArray92);
        staticInitializationVectorABMC1_85.go(byteArray92);
        staticInitializationVectorABMC1_74.go(byteArray92);
        staticInitializationVectorABMC1_32.go(byteArray92);
        staticInitializationVectorABMC1_0.go(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_14.go(byteArray16);
        staticInitializationVectorABMC1_13.go(byteArray16);
        byte[] byteArray19 = null;
        staticInitializationVectorABMC1_13.go(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_13.go(byteArray25);
        staticInitializationVectorABMC1_0.go(byteArray25);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_28 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        staticInitializationVectorABMC1_28.go(byteArray31);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_28.go(byteArray39);
        byte[] byteArray41 = null;
        staticInitializationVectorABMC1_28.go(byteArray41);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_43 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_43.go(byteArray45);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_47 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_48 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_48.go(byteArray50);
        staticInitializationVectorABMC1_47.go(byteArray50);
        staticInitializationVectorABMC1_43.go(byteArray50);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_54 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_54.go(byteArray56);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_58 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_59 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_59.go(byteArray61);
        staticInitializationVectorABMC1_58.go(byteArray61);
        staticInitializationVectorABMC1_54.go(byteArray61);
        staticInitializationVectorABMC1_43.go(byteArray61);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_43.go(byteArray72);
        staticInitializationVectorABMC1_28.go(byteArray72);
        staticInitializationVectorABMC1_0.go(byteArray72);
        byte[] byteArray76 = null;
        staticInitializationVectorABMC1_0.go(byteArray76);
        byte[] byteArray78 = null;
        staticInitializationVectorABMC1_0.go(byteArray78);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_80 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray81 = null;
        staticInitializationVectorABMC1_80.go(byteArray81);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_83 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_84 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_84.go(byteArray86);
        staticInitializationVectorABMC1_83.go(byteArray86);
        byte[] byteArray94 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_83.go(byteArray94);
        staticInitializationVectorABMC1_80.go(byteArray94);
        staticInitializationVectorABMC1_0.go(byteArray94);
        java.lang.Class<?> wildcardClass98 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_1 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_1.go(byteArray3);
        staticInitializationVectorABMC1_0.go(byteArray3);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray11);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_13 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_14 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_15.go(byteArray17);
        staticInitializationVectorABMC1_14.go(byteArray17);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_14.go(byteArray25);
        byte[] byteArray27 = null;
        staticInitializationVectorABMC1_14.go(byteArray27);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_29 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_29.go(byteArray31);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_33 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_34 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_34.go(byteArray36);
        staticInitializationVectorABMC1_33.go(byteArray36);
        staticInitializationVectorABMC1_29.go(byteArray36);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_40 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_40.go(byteArray42);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_44 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_45 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_45.go(byteArray47);
        staticInitializationVectorABMC1_44.go(byteArray47);
        staticInitializationVectorABMC1_40.go(byteArray47);
        staticInitializationVectorABMC1_29.go(byteArray47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_29.go(byteArray58);
        staticInitializationVectorABMC1_14.go(byteArray58);
        staticInitializationVectorABMC1_13.go(byteArray58);
        staticInitializationVectorABMC1_0.go(byteArray58);
        byte[] byteArray63 = null;
        staticInitializationVectorABMC1_0.go(byteArray63);
        byte[] byteArray65 = null;
        staticInitializationVectorABMC1_0.go(byteArray65);
        byte[] byteArray67 = null;
        staticInitializationVectorABMC1_0.go(byteArray67);
        byte[] byteArray69 = null;
        staticInitializationVectorABMC1_0.go(byteArray69);
        java.lang.Class<?> wildcardClass71 = staticInitializationVectorABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_0 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_0.go(byteArray2);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_4 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_5 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_5.go(byteArray7);
        staticInitializationVectorABMC1_4.go(byteArray7);
        staticInitializationVectorABMC1_0.go(byteArray7);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_11 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_11.go(byteArray13);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_15 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_16 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_16.go(byteArray18);
        staticInitializationVectorABMC1_15.go(byteArray18);
        staticInitializationVectorABMC1_11.go(byteArray18);
        staticInitializationVectorABMC1_0.go(byteArray18);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1, (byte) 1 };
        staticInitializationVectorABMC1_0.go(byteArray29);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) -1, (byte) 0 };
        staticInitializationVectorABMC1_0.go(byteArray34);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_36 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_37 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_37.go(byteArray39);
        staticInitializationVectorABMC1_36.go(byteArray39);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        staticInitializationVectorABMC1_36.go(byteArray47);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_49 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_50 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_50.go(byteArray52);
        staticInitializationVectorABMC1_49.go(byteArray52);
        byte[] byteArray55 = null;
        staticInitializationVectorABMC1_49.go(byteArray55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 0 };
        staticInitializationVectorABMC1_49.go(byteArray61);
        staticInitializationVectorABMC1_36.go(byteArray61);
        staticInitializationVectorABMC1_0.go(byteArray61);
        org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1 staticInitializationVectorABMC1_65 = new org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticInitializationVectorABMC1_65.go(byteArray67);
        staticInitializationVectorABMC1_0.go(byteArray67);
        java.lang.Class<?> wildcardClass70 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }
}

