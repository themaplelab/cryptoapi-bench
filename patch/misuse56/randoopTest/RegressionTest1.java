package randoopTest;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_11.key2(byteArray22, (int) (short) 10);
        staticSaltsABICase1_6.key2(byteArray22, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_27.key2(byteArray45, 100);
        staticSaltsABICase1_6.key2(byteArray45, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) 0);
        java.lang.Class<?> wildcardClass56 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray63, 10);
        staticSaltsABICase1_55.key2(byteArray63, 10);
        staticSaltsABICase1_34.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_70.key2(byteArray89, (int) 'a');
        staticSaltsABICase1_34.key2(byteArray89, (int) '4');
        staticSaltsABICase1_0.key2(byteArray89, 100);
        java.lang.Class<?> wildcardClass98 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        java.lang.Class<?> wildcardClass53 = byteArray44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABICase1_0.key2(byteArray37, (int) (short) 1);
        java.lang.Class<?> wildcardClass40 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, 1);
        java.lang.Class<?> wildcardClass52 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        java.lang.Class<?> wildcardClass34 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABICase1_46.key2(byteArray62, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_75.key2(byteArray85, 0);
        staticSaltsABICase1_67.key2(byteArray85, 100);
        staticSaltsABICase1_46.key2(byteArray85, (int) (short) 0);
        byte[] byteArray95 = new byte[] { (byte) 10 };
        staticSaltsABICase1_46.key2(byteArray95, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray95, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_20.key2(byteArray30, 0);
        staticSaltsABICase1_12.key2(byteArray30, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_37.key2(byteArray62, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray72, (int) (short) 0);
        staticSaltsABICase1_12.key2(byteArray72, (int) '4');
        staticSaltsABICase1_0.key2(byteArray72, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_83.key2(byteArray86, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass93 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABICase1_0.key2(byteArray37, (int) (byte) 100);
        java.lang.Class<?> wildcardClass40 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        staticSaltsABICase1_18.key2(byteArray43, (int) '4');
        staticSaltsABICase1_0.key2(byteArray43, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray77, (int) '4');
        java.lang.Class<?> wildcardClass86 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        staticSaltsABICase1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABICase1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray52, (-1));
        staticSaltsABICase1_0.key2(byteArray52, (int) '4');
        byte[] byteArray65 = null;
        staticSaltsABICase1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_68.key2(byteArray86, 100);
        staticSaltsABICase1_0.key2(byteArray86, (int) (byte) 0);
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_25.key2(byteArray36, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_39.key2(byteArray57, 100);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_39.key2(byteArray70, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABICase1_39.key2(byteArray80, (int) (short) -1);
        staticSaltsABICase1_25.key2(byteArray80, 0);
        staticSaltsABICase1_0.key2(byteArray80, (int) 'a');
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        java.lang.Class<?> wildcardClass67 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_20.key2(byteArray30, 0);
        staticSaltsABICase1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABICase1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_49.key2(byteArray67, 100);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_49.key2(byteArray80, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) 100);
        byte[] byteArray85 = null;
        staticSaltsABICase1_0.key2(byteArray85, 1);
        byte[] byteArray88 = null;
        staticSaltsABICase1_0.key2(byteArray88, (-1));
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABICase1_22.key2(byteArray41, (int) 'a');
        staticSaltsABICase1_14.key2(byteArray41, 100);
        byte[] byteArray48 = null;
        staticSaltsABICase1_14.key2(byteArray48, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_51.key2(byteArray62, 1);
        staticSaltsABICase1_14.key2(byteArray62, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_71.key2(byteArray78, (int) (byte) 10);
        staticSaltsABICase1_14.key2(byteArray78, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) 0);
        java.lang.Class<?> wildcardClass87 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_37.key2(byteArray62, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray90, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray90, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_55.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_55.key2(byteArray80, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_5.key2(byteArray32, 100);
        byte[] byteArray39 = null;
        staticSaltsABICase1_5.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABICase1_42.key2(byteArray53, 1);
        staticSaltsABICase1_5.key2(byteArray53, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_62.key2(byteArray80, 100);
        staticSaltsABICase1_5.key2(byteArray80, (int) '#');
        staticSaltsABICase1_0.key2(byteArray80, (int) 'a');
        java.lang.Class<?> wildcardClass91 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        java.lang.Class<?> wildcardClass70 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_17.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_32.key2(byteArray43, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_51.key2(byteArray61, 0);
        staticSaltsABICase1_50.key2(byteArray61, (int) (byte) 1);
        staticSaltsABICase1_32.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) 'a');
        java.lang.Class<?> wildcardClass72 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        java.lang.Class<?> wildcardClass18 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABICase1_11.key2(byteArray13, (int) '#');
        staticSaltsABICase1_10.key2(byteArray13, (int) (short) 0);
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_10.key2(byteArray21, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray21, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray53, (int) 'a');
        staticSaltsABICase1_26.key2(byteArray53, 100);
        staticSaltsABICase1_5.key2(byteArray53, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_62.key2(byteArray80, 100);
        staticSaltsABICase1_5.key2(byteArray80, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray80, (int) '4');
        java.lang.Class<?> wildcardClass91 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray59, (int) 'a');
        staticSaltsABICase1_32.key2(byteArray59, 100);
        staticSaltsABICase1_0.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_0.key2(byteArray70, (int) (byte) -1);
        java.lang.Class<?> wildcardClass75 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_30.key2(byteArray36, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray36, 0);
        java.lang.Class<?> wildcardClass41 = byteArray36.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        staticSaltsABICase1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABICase1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray41, (int) ' ');
        java.lang.Class<?> wildcardClass52 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_17.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_32.key2(byteArray43, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_51.key2(byteArray61, 0);
        staticSaltsABICase1_50.key2(byteArray61, (int) (byte) 1);
        staticSaltsABICase1_32.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) 'a');
        java.lang.Class<?> wildcardClass72 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray22, 10);
        staticSaltsABICase1_14.key2(byteArray22, 10);
        staticSaltsABICase1_0.key2(byteArray22, (int) (short) 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_0.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_36.key2(byteArray43, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_48.key2(byteArray59, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_66.key2(byteArray77, (int) (byte) 1);
        staticSaltsABICase1_48.key2(byteArray77, (int) (byte) 0);
        staticSaltsABICase1_36.key2(byteArray77, (int) ' ');
        staticSaltsABICase1_0.key2(byteArray77, (int) (byte) 0);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_35.key2(byteArray62, 10);
        staticSaltsABICase1_0.key2(byteArray62, 100);
        java.lang.Class<?> wildcardClass67 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_30.key2(byteArray36, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray36, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_41.key2(byteArray66, (int) 'a');
        byte[] byteArray73 = null;
        staticSaltsABICase1_41.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_41.key2(byteArray86, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray86, (int) (byte) 1);
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_22.key2(byteArray33, (int) (short) 10);
        staticSaltsABICase1_17.key2(byteArray33, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_46.key2(byteArray56, 0);
        staticSaltsABICase1_38.key2(byteArray56, 100);
        staticSaltsABICase1_17.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_65.key2(byteArray75, 0);
        staticSaltsABICase1_17.key2(byteArray75, (int) '#');
        staticSaltsABICase1_0.key2(byteArray75, (int) ' ');
        java.lang.Class<?> wildcardClass84 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray30, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        staticSaltsABICase1_14.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray72, 10);
        staticSaltsABICase1_64.key2(byteArray72, 10);
        staticSaltsABICase1_50.key2(byteArray72, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray72, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray72, (int) (short) 100);
        java.lang.Class<?> wildcardClass83 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        staticSaltsABICase1_14.key2(byteArray54, 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_14.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_64.key2(byteArray74, 0);
        staticSaltsABICase1_14.key2(byteArray74, 1);
        staticSaltsABICase1_0.key2(byteArray74, 0);
        java.lang.Class<?> wildcardClass83 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABICase1_0.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_41.key2(byteArray66, (int) 'a');
        byte[] byteArray73 = null;
        staticSaltsABICase1_41.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_41.key2(byteArray86, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray86, (-1));
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_30.key2(byteArray36, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray36, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_41.key2(byteArray66, (int) 'a');
        byte[] byteArray73 = null;
        staticSaltsABICase1_41.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_41.key2(byteArray86, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray86, (int) (byte) 1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_48.key2(byteArray65, (-1));
        staticSaltsABICase1_0.key2(byteArray65, (int) (short) -1);
        byte[] byteArray72 = null;
        staticSaltsABICase1_0.key2(byteArray72, (int) ' ');
        java.lang.Class<?> wildcardClass75 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray26, 10);
        staticSaltsABICase1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray50, (int) 'a');
        staticSaltsABICase1_18.key2(byteArray50, 1);
        staticSaltsABICase1_0.key2(byteArray50, 0);
        java.lang.Class<?> wildcardClass59 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 1);
        java.lang.Class<?> wildcardClass70 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_28.key2(byteArray44, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_49.key2(byteArray67, 100);
        staticSaltsABICase1_28.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_22.key2(byteArray67, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray67, (int) '#');
        java.lang.Class<?> wildcardClass80 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        staticSaltsABICase1_21.key2(byteArray39, 100);
        staticSaltsABICase1_0.key2(byteArray39, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 10 };
        staticSaltsABICase1_0.key2(byteArray49, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray61, 10);
        staticSaltsABICase1_53.key2(byteArray61, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_74.key2(byteArray85, (int) (short) 10);
        staticSaltsABICase1_66.key2(byteArray85, (int) 'a');
        staticSaltsABICase1_53.key2(byteArray85, 1);
        staticSaltsABICase1_52.key2(byteArray85, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray85, 0);
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_44.key2(byteArray75, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_78.key2(byteArray85, (int) (byte) 10);
        staticSaltsABICase1_44.key2(byteArray85, (int) (short) -1);
        staticSaltsABICase1_30.key2(byteArray85, 0);
        staticSaltsABICase1_0.key2(byteArray85, 10);
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_50.key2(byteArray69, (int) 'a');
        staticSaltsABICase1_42.key2(byteArray69, 100);
        staticSaltsABICase1_0.key2(byteArray69, (int) ' ');
        java.lang.Class<?> wildcardClass78 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_6.key2(byteArray16, 0);
        staticSaltsABICase1_5.key2(byteArray16, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        staticSaltsABICase1_5.key2(byteArray34, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_45.key2(byteArray62, (-1));
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_45.key2(byteArray72, 10);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 100);
        java.lang.Class<?> wildcardClass77 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray48, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_53.key2(byteArray69, (int) (byte) 0);
        staticSaltsABICase1_13.key2(byteArray69, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray69, (int) (byte) 10);
        java.lang.Class<?> wildcardClass78 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        staticSaltsABICase1_21.key2(byteArray39, 100);
        staticSaltsABICase1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_48.key2(byteArray66, 100);
        staticSaltsABICase1_0.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_0.key2(byteArray77, (int) (short) 1);
        java.lang.Class<?> wildcardClass82 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray26 = null;
        staticSaltsABICase1_18.key2(byteArray26, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray37, 10);
        staticSaltsABICase1_29.key2(byteArray37, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_42.key2(byteArray61, (int) 'a');
        staticSaltsABICase1_29.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_29.key2(byteArray70, 0);
        staticSaltsABICase1_18.key2(byteArray70, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_77.key2(byteArray80, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray80, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray80, (int) ' ');
        java.lang.Class<?> wildcardClass89 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray59, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray59, (int) '4');
        byte[] byteArray66 = null;
        staticSaltsABICase1_0.key2(byteArray66, (-1));
        java.lang.Class<?> wildcardClass69 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        staticSaltsABICase1_21.key2(byteArray29, 10);
        staticSaltsABICase1_0.key2(byteArray29, (int) (short) 0);
        byte[] byteArray36 = null;
        staticSaltsABICase1_0.key2(byteArray36, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray48, 10);
        staticSaltsABICase1_40.key2(byteArray48, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABICase1_53.key2(byteArray72, (int) 'a');
        staticSaltsABICase1_40.key2(byteArray72, 1);
        staticSaltsABICase1_39.key2(byteArray72, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray72, (int) (short) 1);
        java.lang.Class<?> wildcardClass83 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray45, 10);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_50.key2(byteArray68, 100);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray80, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_77.key2(byteArray85, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray85, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_15.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_32.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_32.key2(byteArray72, 0);
        staticSaltsABICase1_15.key2(byteArray72, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 1);
        java.lang.Class<?> wildcardClass83 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (byte) 10);
        java.lang.Class<?> wildcardClass57 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_25.key2(byteArray36, (int) (short) 10);
        staticSaltsABICase1_17.key2(byteArray36, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_17.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray52, (int) ' ');
        java.lang.Class<?> wildcardClass59 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABICase1_0.key2(byteArray47, (int) '#');
        java.lang.Class<?> wildcardClass50 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_40.key2(byteArray50, 0);
        staticSaltsABICase1_39.key2(byteArray50, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_57.key2(byteArray68, (int) (byte) 1);
        staticSaltsABICase1_39.key2(byteArray68, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray68, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 0);
        byte[] byteArray81 = null;
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 10);
        java.lang.Class<?> wildcardClass84 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        staticSaltsABICase1_21.key2(byteArray29, 10);
        staticSaltsABICase1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABICase1_36.key2(byteArray55, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray55, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 1);
        java.lang.Class<?> wildcardClass79 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 10);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_80.key2(byteArray83, (int) (short) 0);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_80.key2(byteArray91, (int) (short) 10);
        staticSaltsABICase1_72.key2(byteArray91, (int) 'a');
        staticSaltsABICase1_64.key2(byteArray91, 100);
        staticSaltsABICase1_0.key2(byteArray91, (int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        staticSaltsABICase1_31.key2(byteArray42, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        staticSaltsABICase1_49.key2(byteArray60, (int) (byte) 1);
        staticSaltsABICase1_31.key2(byteArray60, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABICase1_69.key2(byteArray81, (int) (short) 0);
        staticSaltsABICase1_31.key2(byteArray81, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 100);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray24, 10);
        staticSaltsABICase1_16.key2(byteArray24, 10);
        staticSaltsABICase1_8.key2(byteArray24, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray50, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_55.key2(byteArray66, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray66, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABICase1_71.key2(byteArray87, (int) (byte) 0);
        staticSaltsABICase1_31.key2(byteArray87, (int) (short) -1);
        staticSaltsABICase1_8.key2(byteArray87, (int) '4');
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) -1);
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_12.key2(byteArray23, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray34, 10);
        staticSaltsABICase1_26.key2(byteArray34, 10);
        staticSaltsABICase1_12.key2(byteArray34, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray34, (int) (short) 10);
        java.lang.Class<?> wildcardClass43 = byteArray34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABICase1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray73, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_78.key2(byteArray88, 0);
        staticSaltsABICase1_48.key2(byteArray88, 0);
        staticSaltsABICase1_8.key2(byteArray88, 1);
        staticSaltsABICase1_0.key2(byteArray88, (int) (byte) 10);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        java.lang.Class<?> wildcardClass52 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABICase1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        staticSaltsABICase1_0.key2(byteArray60, (int) (byte) 100);
        java.lang.Class<?> wildcardClass67 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_25.key2(byteArray35, 0);
        staticSaltsABICase1_24.key2(byteArray35, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray35, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABICase1_44.key2(byteArray60, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_73.key2(byteArray83, 0);
        staticSaltsABICase1_65.key2(byteArray83, 100);
        staticSaltsABICase1_44.key2(byteArray83, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) 10);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_32.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_32.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray79, (int) '#');
        staticSaltsABICase1_0.key2(byteArray79, (int) (byte) -1);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABICase1_26.key2(byteArray45, (int) 'a');
        staticSaltsABICase1_18.key2(byteArray45, 100);
        byte[] byteArray52 = null;
        staticSaltsABICase1_18.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        staticSaltsABICase1_55.key2(byteArray66, 1);
        staticSaltsABICase1_18.key2(byteArray66, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_75.key2(byteArray82, (int) (byte) 10);
        staticSaltsABICase1_18.key2(byteArray82, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) -1);
        java.lang.Class<?> wildcardClass91 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (byte) 10);
        java.lang.Class<?> wildcardClass57 = byteArray50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_12.key2(byteArray23, (int) (short) 10);
        byte[] byteArray26 = null;
        staticSaltsABICase1_12.key2(byteArray26, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        staticSaltsABICase1_12.key2(byteArray39, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_46.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_65.key2(byteArray75, 0);
        staticSaltsABICase1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABICase1_46.key2(byteArray75, (int) (byte) 0);
        staticSaltsABICase1_12.key2(byteArray75, 0);
        staticSaltsABICase1_0.key2(byteArray75, (int) (short) 1);
        java.lang.Class<?> wildcardClass88 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_16.key2(byteArray32, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_16.key2(byteArray54, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABICase1_16.key2(byteArray64, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_71.key2(byteArray88, (-1));
        staticSaltsABICase1_16.key2(byteArray88, 0);
        staticSaltsABICase1_1.key2(byteArray88, 100);
        staticSaltsABICase1_0.key2(byteArray88, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_35.key2(byteArray62, 10);
        staticSaltsABICase1_0.key2(byteArray62, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_67.key2(byteArray75, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_82.key2(byteArray89, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray89, (int) 'a');
        java.lang.Class<?> wildcardClass96 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABICase1_39.key2(byteArray55, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_68.key2(byteArray78, 0);
        staticSaltsABICase1_60.key2(byteArray78, 100);
        staticSaltsABICase1_39.key2(byteArray78, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray78, (int) (byte) 10);
        java.lang.Class<?> wildcardClass89 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABICase1_30.key2(byteArray49, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_17.key2(byteArray58, 0);
        staticSaltsABICase1_0.key2(byteArray58, (int) '#');
        java.lang.Class<?> wildcardClass65 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_63.key2(byteArray82, (int) 'a');
        staticSaltsABICase1_55.key2(byteArray82, 100);
        staticSaltsABICase1_34.key2(byteArray82, 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) 'a');
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        staticSaltsABICase1_17.key2(byteArray42, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABICase1_57.key2(byteArray76, (int) 'a');
        staticSaltsABICase1_49.key2(byteArray76, 100);
        staticSaltsABICase1_17.key2(byteArray76, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray76, (int) (byte) -1);
        java.lang.Class<?> wildcardClass87 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray19, 0);
        java.lang.Class<?> wildcardClass28 = byteArray19.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        staticSaltsABICase1_31.key2(byteArray42, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        staticSaltsABICase1_49.key2(byteArray60, (int) (byte) 1);
        staticSaltsABICase1_31.key2(byteArray60, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABICase1_69.key2(byteArray81, (int) (short) 0);
        staticSaltsABICase1_31.key2(byteArray81, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 100);
        java.lang.Class<?> wildcardClass90 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray50, 10);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) -1);
        byte[] byteArray55 = null;
        staticSaltsABICase1_0.key2(byteArray55, (int) '#');
        java.lang.Class<?> wildcardClass58 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray62, 10);
        staticSaltsABICase1_37.key2(byteArray62, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray62, (int) 'a');
        java.lang.Class<?> wildcardClass69 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        staticSaltsABICase1_21.key2(byteArray39, 100);
        staticSaltsABICase1_0.key2(byteArray39, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 10 };
        staticSaltsABICase1_0.key2(byteArray49, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray61, 10);
        staticSaltsABICase1_53.key2(byteArray61, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_74.key2(byteArray85, (int) (short) 10);
        staticSaltsABICase1_66.key2(byteArray85, (int) 'a');
        staticSaltsABICase1_53.key2(byteArray85, 1);
        staticSaltsABICase1_52.key2(byteArray85, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray85, 0);
        java.lang.Class<?> wildcardClass96 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray65, (int) (byte) 10);
        java.lang.Class<?> wildcardClass72 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        staticSaltsABICase1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABICase1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray63, 0);
        java.lang.Class<?> wildcardClass74 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        staticSaltsABICase1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABICase1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_52.key2(byteArray69, (-1));
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_52.key2(byteArray79, 10);
        staticSaltsABICase1_0.key2(byteArray79, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray87, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABICase1_90.key2(byteArray92, (int) '#');
        staticSaltsABICase1_84.key2(byteArray92, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray92, (int) '#');
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_12.key2(byteArray23, (int) (short) 10);
        byte[] byteArray26 = null;
        staticSaltsABICase1_12.key2(byteArray26, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        staticSaltsABICase1_12.key2(byteArray39, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_46.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_65.key2(byteArray75, 0);
        staticSaltsABICase1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABICase1_46.key2(byteArray75, (int) (byte) 0);
        staticSaltsABICase1_12.key2(byteArray75, 0);
        staticSaltsABICase1_0.key2(byteArray75, (int) (short) 1);
        java.lang.Class<?> wildcardClass88 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        staticSaltsABICase1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABICase1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_52.key2(byteArray69, (-1));
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_52.key2(byteArray79, 10);
        staticSaltsABICase1_0.key2(byteArray79, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray87, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABICase1_90.key2(byteArray92, (int) '#');
        staticSaltsABICase1_84.key2(byteArray92, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray92, (int) '#');
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        staticSaltsABICase1_31.key2(byteArray42, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        staticSaltsABICase1_49.key2(byteArray60, (int) (byte) 1);
        staticSaltsABICase1_31.key2(byteArray60, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABICase1_69.key2(byteArray81, (int) (short) 0);
        staticSaltsABICase1_31.key2(byteArray81, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 100);
        byte[] byteArray90 = null;
        staticSaltsABICase1_0.key2(byteArray90, (int) (byte) -1);
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        staticSaltsABICase1_0.key2(byteArray47, (int) ' ');
        java.lang.Class<?> wildcardClass54 = byteArray47.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_44.key2(byteArray75, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_78.key2(byteArray85, (int) (byte) 10);
        staticSaltsABICase1_44.key2(byteArray85, (int) (short) -1);
        staticSaltsABICase1_30.key2(byteArray85, 0);
        staticSaltsABICase1_0.key2(byteArray85, 10);
        java.lang.Class<?> wildcardClass96 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        staticSaltsABICase1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABICase1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray63, 0);
        java.lang.Class<?> wildcardClass74 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_38.key2(byteArray57, (int) 'a');
        staticSaltsABICase1_30.key2(byteArray57, 100);
        staticSaltsABICase1_15.key2(byteArray57, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray57, 100);
        byte[] byteArray68 = new byte[] {};
        staticSaltsABICase1_0.key2(byteArray68, (-1));
        java.lang.Class<?> wildcardClass71 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        staticSaltsABICase1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABICase1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        staticSaltsABICase1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABICase1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray81, 100);
        java.lang.Class<?> wildcardClass92 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        staticSaltsABICase1_9.key2(byteArray27, 100);
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_9.key2(byteArray40, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_43.key2(byteArray50, (int) (byte) 10);
        staticSaltsABICase1_9.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_57.key2(byteArray68, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_57.key2(byteArray82, (int) (short) -1);
        staticSaltsABICase1_9.key2(byteArray82, 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) '#');
        java.lang.Class<?> wildcardClass91 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        staticSaltsABICase1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABICase1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_52.key2(byteArray69, (-1));
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_52.key2(byteArray79, 10);
        staticSaltsABICase1_0.key2(byteArray79, (int) (short) 100);
        java.lang.Class<?> wildcardClass84 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        java.lang.Class<?> wildcardClass70 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_27.key2(byteArray37, 0);
        staticSaltsABICase1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABICase1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABICase1_0.key2(byteArray56, 1);
        byte[] byteArray59 = null;
        staticSaltsABICase1_0.key2(byteArray59, (int) (byte) 10);
        java.lang.Class<?> wildcardClass62 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray26, 10);
        staticSaltsABICase1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray50, (int) 'a');
        staticSaltsABICase1_18.key2(byteArray50, 1);
        staticSaltsABICase1_0.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray67 = null;
        staticSaltsABICase1_59.key2(byteArray67, (int) (short) 100);
        byte[] byteArray70 = null;
        staticSaltsABICase1_59.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray89, 10);
        staticSaltsABICase1_81.key2(byteArray89, 10);
        staticSaltsABICase1_73.key2(byteArray89, (int) (short) 1);
        staticSaltsABICase1_59.key2(byteArray89, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray89, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABICase1_0.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray63, 10);
        staticSaltsABICase1_55.key2(byteArray63, 10);
        staticSaltsABICase1_41.key2(byteArray63, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray63, (int) '4');
        java.lang.Class<?> wildcardClass72 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) 100);
        java.lang.Class<?> wildcardClass87 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABICase1_64.key2(byteArray83, (int) 'a');
        staticSaltsABICase1_56.key2(byteArray83, 100);
        staticSaltsABICase1_35.key2(byteArray83, 0);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) 1);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABICase1_52.key2(byteArray68, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray81, 10);
        staticSaltsABICase1_73.key2(byteArray81, 10);
        staticSaltsABICase1_52.key2(byteArray81, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray81, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_72.key2(byteArray82, 0);
        staticSaltsABICase1_24.key2(byteArray82, (int) '#');
        staticSaltsABICase1_0.key2(byteArray82, (-1));
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray50, 10);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) -1);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_35.key2(byteArray62, 10);
        staticSaltsABICase1_0.key2(byteArray62, 100);
        java.lang.Class<?> wildcardClass67 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABICase1_0.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_41.key2(byteArray66, (int) 'a');
        byte[] byteArray73 = null;
        staticSaltsABICase1_41.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_41.key2(byteArray86, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray86, (-1));
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        java.lang.Class<?> wildcardClass53 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_34.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        staticSaltsABICase1_34.key2(byteArray69, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray69, (int) (byte) 10);
        byte[] byteArray78 = null;
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) 10);
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray67, 10);
        staticSaltsABICase1_59.key2(byteArray67, 10);
        staticSaltsABICase1_45.key2(byteArray67, (int) (short) 10);
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_45.key2(byteArray78, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray78, 0);
        staticSaltsABICase1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass85 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_25.key2(byteArray35, 0);
        staticSaltsABICase1_17.key2(byteArray35, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_42.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_42.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray77, (int) '4');
        staticSaltsABICase1_0.key2(byteArray77, (int) (short) 100);
        java.lang.Class<?> wildcardClass88 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray45, 10);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABICase1_0.key2(byteArray50, (int) ' ');
        byte[] byteArray53 = null;
        staticSaltsABICase1_0.key2(byteArray53, (int) (short) 100);
        java.lang.Class<?> wildcardClass56 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        staticSaltsABICase1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABICase1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray52, (-1));
        staticSaltsABICase1_0.key2(byteArray52, (int) '4');
        byte[] byteArray65 = null;
        staticSaltsABICase1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_68.key2(byteArray86, 100);
        staticSaltsABICase1_0.key2(byteArray86, (int) (byte) 0);
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_6.key2(byteArray17, (int) (short) 10);
        staticSaltsABICase1_1.key2(byteArray17, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_22.key2(byteArray40, 100);
        staticSaltsABICase1_1.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_1.key2(byteArray59, (int) '#');
        staticSaltsABICase1_0.key2(byteArray59, (int) (byte) -1);
        java.lang.Class<?> wildcardClass68 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_0.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_30.key2(byteArray41, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_54.key2(byteArray64, 0);
        staticSaltsABICase1_53.key2(byteArray64, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_72.key2(byteArray82, 0);
        staticSaltsABICase1_71.key2(byteArray82, (int) (byte) 1);
        staticSaltsABICase1_53.key2(byteArray82, (int) (byte) 0);
        staticSaltsABICase1_48.key2(byteArray82, (-1));
        staticSaltsABICase1_30.key2(byteArray82, (int) '4');
        staticSaltsABICase1_0.key2(byteArray82, 0);
        byte[] byteArray97 = null;
        staticSaltsABICase1_0.key2(byteArray97, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_18.key2(byteArray28, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_18.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray63, 10);
        staticSaltsABICase1_18.key2(byteArray63, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_68.key2(byteArray86, 100);
        staticSaltsABICase1_18.key2(byteArray86, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray86, (int) (byte) 10);
        byte[] byteArray97 = null;
        staticSaltsABICase1_0.key2(byteArray97, (int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray50, 10);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) -1);
        byte[] byteArray55 = null;
        staticSaltsABICase1_0.key2(byteArray55, (int) '#');
        byte[] byteArray58 = null;
        staticSaltsABICase1_0.key2(byteArray58, (int) (short) 0);
        java.lang.Class<?> wildcardClass61 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_1.key2(byteArray19, 100);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_1.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray60, (int) (short) -1);
        staticSaltsABICase1_1.key2(byteArray60, (int) '4');
        byte[] byteArray67 = null;
        staticSaltsABICase1_1.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_70.key2(byteArray89, (int) 'a');
        staticSaltsABICase1_1.key2(byteArray89, (int) '#');
        staticSaltsABICase1_0.key2(byteArray89, (int) ' ');
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_27.key2(byteArray37, 0);
        staticSaltsABICase1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABICase1_52.key2(byteArray71, (int) 'a');
        staticSaltsABICase1_44.key2(byteArray71, 100);
        staticSaltsABICase1_12.key2(byteArray71, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray71, (int) '#');
        java.lang.Class<?> wildcardClass82 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_38.key2(byteArray49, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_52.key2(byteArray63, (int) (short) 10);
        staticSaltsABICase1_38.key2(byteArray63, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_68.key2(byteArray78, 0);
        staticSaltsABICase1_38.key2(byteArray78, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray88, 10);
        staticSaltsABICase1_38.key2(byteArray88, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray88, 1);
        byte[] byteArray95 = null;
        staticSaltsABICase1_0.key2(byteArray95, (int) (byte) 100);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_26.key2(byteArray36, 0);
        staticSaltsABICase1_18.key2(byteArray36, 100);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_18.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_52.key2(byteArray63, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABICase1_52.key2(byteArray77, (int) (short) -1);
        staticSaltsABICase1_18.key2(byteArray77, (int) '4');
        byte[] byteArray84 = null;
        staticSaltsABICase1_18.key2(byteArray84, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABICase1_88.key2(byteArray90, (int) '#');
        staticSaltsABICase1_87.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray90, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray90, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray70, 10);
        staticSaltsABICase1_0.key2(byteArray70, (int) (short) -1);
        java.lang.Class<?> wildcardClass75 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_0.key2(byteArray69, (int) 'a');
        java.lang.Class<?> wildcardClass74 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_0.key2(byteArray76, (int) ' ');
        byte[] byteArray81 = null;
        staticSaltsABICase1_0.key2(byteArray81, 0);
        java.lang.Class<?> wildcardClass84 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray24, 10);
        staticSaltsABICase1_16.key2(byteArray24, 10);
        staticSaltsABICase1_8.key2(byteArray24, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray50, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_55.key2(byteArray66, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray66, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABICase1_71.key2(byteArray87, (int) (byte) 0);
        staticSaltsABICase1_31.key2(byteArray87, (int) (short) -1);
        staticSaltsABICase1_8.key2(byteArray87, (int) '4');
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) -1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_38.key2(byteArray48, 0);
        staticSaltsABICase1_30.key2(byteArray48, 100);
        staticSaltsABICase1_0.key2(byteArray48, 1);
        byte[] byteArray57 = null;
        staticSaltsABICase1_0.key2(byteArray57, (int) (short) -1);
        java.lang.Class<?> wildcardClass60 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray26, 10);
        staticSaltsABICase1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray50, (int) 'a');
        staticSaltsABICase1_18.key2(byteArray50, 1);
        staticSaltsABICase1_0.key2(byteArray50, 0);
        java.lang.Class<?> wildcardClass59 = byteArray50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        java.lang.Class<?> wildcardClass76 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        java.lang.Class<?> wildcardClass17 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_28.key2(byteArray38, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABICase1_51.key2(byteArray70, (int) 'a');
        staticSaltsABICase1_43.key2(byteArray70, 100);
        staticSaltsABICase1_28.key2(byteArray70, (int) (byte) 10);
        staticSaltsABICase1_13.key2(byteArray70, 100);
        staticSaltsABICase1_0.key2(byteArray70, (int) ' ');
        java.lang.Class<?> wildcardClass83 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        staticSaltsABICase1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABICase1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_82.key2(byteArray85, (int) (short) 0);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_82.key2(byteArray93, (int) (short) 10);
        staticSaltsABICase1_74.key2(byteArray93, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray93, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABICase1_0.key2(byteArray13, 1);
        java.lang.Class<?> wildcardClass16 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray72, 10);
        staticSaltsABICase1_0.key2(byteArray72, (int) (short) 1);
        java.lang.Class<?> wildcardClass77 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_26.key2(byteArray36, 0);
        staticSaltsABICase1_18.key2(byteArray36, 100);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_18.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_52.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray87, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_23.key2(byteArray34, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_53.key2(byteArray59, (int) (short) 0);
        staticSaltsABICase1_23.key2(byteArray59, 0);
        staticSaltsABICase1_0.key2(byteArray59, (int) 'a');
        java.lang.Class<?> wildcardClass66 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray40, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray40, 1);
        java.lang.Class<?> wildcardClass47 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_35.key2(byteArray62, 10);
        staticSaltsABICase1_0.key2(byteArray62, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_67.key2(byteArray84, (-1));
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_67.key2(byteArray94, 10);
        staticSaltsABICase1_0.key2(byteArray94, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray74, (int) 'a');
        staticSaltsABICase1_47.key2(byteArray74, 100);
        staticSaltsABICase1_0.key2(byteArray74, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_0.key2(byteArray85, (int) (short) -1);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_22.key2(byteArray32, 0);
        staticSaltsABICase1_14.key2(byteArray32, 100);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_14.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_48.key2(byteArray55, (int) (byte) 10);
        staticSaltsABICase1_14.key2(byteArray55, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray67, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_64.key2(byteArray72, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray72, (int) '#');
        java.lang.Class<?> wildcardClass79 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        java.lang.Class<?> wildcardClass67 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 1);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_72.key2(byteArray82, 0);
        staticSaltsABICase1_71.key2(byteArray82, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray82, 10);
        java.lang.Class<?> wildcardClass91 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_14.key2(byteArray24, 0);
        staticSaltsABICase1_6.key2(byteArray24, 100);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_6.key2(byteArray37, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_40.key2(byteArray47, (int) (byte) 10);
        staticSaltsABICase1_6.key2(byteArray47, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_54.key2(byteArray64, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_69.key2(byteArray79, 0);
        staticSaltsABICase1_54.key2(byteArray79, (int) 'a');
        staticSaltsABICase1_6.key2(byteArray79, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray79, 0);
        byte[] byteArray90 = null;
        staticSaltsABICase1_0.key2(byteArray90, (int) '#');
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray74, (-1));
        java.lang.Class<?> wildcardClass81 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_6.key2(byteArray16, 0);
        staticSaltsABICase1_5.key2(byteArray16, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        staticSaltsABICase1_5.key2(byteArray34, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_45.key2(byteArray62, (-1));
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_45.key2(byteArray72, 10);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 100);
        java.lang.Class<?> wildcardClass77 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_28.key2(byteArray38, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABICase1_51.key2(byteArray70, (int) 'a');
        staticSaltsABICase1_43.key2(byteArray70, 100);
        staticSaltsABICase1_28.key2(byteArray70, (int) (byte) 10);
        staticSaltsABICase1_13.key2(byteArray70, 100);
        staticSaltsABICase1_0.key2(byteArray70, (int) ' ');
        java.lang.Class<?> wildcardClass83 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABICase1_0.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray63, 10);
        staticSaltsABICase1_55.key2(byteArray63, 10);
        staticSaltsABICase1_41.key2(byteArray63, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray63, (int) '4');
        java.lang.Class<?> wildcardClass72 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) '#');
        byte[] byteArray69 = null;
        staticSaltsABICase1_0.key2(byteArray69, 100);
        java.lang.Class<?> wildcardClass72 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        staticSaltsABICase1_14.key2(byteArray54, 0);
        staticSaltsABICase1_0.key2(byteArray54, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABICase1_63.key2(byteArray75, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray75, 1);
        java.lang.Class<?> wildcardClass82 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        staticSaltsABICase1_0.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_65.key2(byteArray75, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_65.key2(byteArray82, (-1));
        staticSaltsABICase1_0.key2(byteArray82, (int) (byte) 0);
        byte[] byteArray89 = null;
        staticSaltsABICase1_0.key2(byteArray89, (int) (byte) 100);
        java.lang.Class<?> wildcardClass92 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABICase1_0.key2(byteArray30, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_33.key2(byteArray40, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray57, (int) (short) 0);
        staticSaltsABICase1_33.key2(byteArray57, 0);
        staticSaltsABICase1_0.key2(byteArray57, (-1));
        java.lang.Class<?> wildcardClass66 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray30, 10);
        staticSaltsABICase1_22.key2(byteArray30, 10);
        staticSaltsABICase1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_51.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABICase1_51.key2(byteArray80, (int) (byte) 0);
        staticSaltsABICase1_46.key2(byteArray80, (-1));
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) 1);
        java.lang.Class<?> wildcardClass93 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray32, 10);
        staticSaltsABICase1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        staticSaltsABICase1_24.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_24.key2(byteArray65, 0);
        staticSaltsABICase1_18.key2(byteArray65, 10);
        staticSaltsABICase1_0.key2(byteArray65, (int) ' ');
        java.lang.Class<?> wildcardClass74 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 1);
        byte[] byteArray55 = null;
        staticSaltsABICase1_0.key2(byteArray55, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray66 = null;
        staticSaltsABICase1_58.key2(byteArray66, (int) (short) 100);
        byte[] byteArray69 = null;
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray88, 10);
        staticSaltsABICase1_80.key2(byteArray88, 10);
        staticSaltsABICase1_72.key2(byteArray88, (int) (short) 1);
        staticSaltsABICase1_58.key2(byteArray88, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray88, (int) '4');
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABICase1_0.key2(byteArray30, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_33.key2(byteArray40, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray57, (int) (short) 0);
        staticSaltsABICase1_33.key2(byteArray57, 0);
        staticSaltsABICase1_0.key2(byteArray57, (-1));
        java.lang.Class<?> wildcardClass66 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_17.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) '4');
        java.lang.Class<?> wildcardClass32 = byteArray25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray72, 10);
        staticSaltsABICase1_0.key2(byteArray72, (int) (short) 1);
        java.lang.Class<?> wildcardClass77 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_26.key2(byteArray36, 0);
        staticSaltsABICase1_18.key2(byteArray36, 100);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_18.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_52.key2(byteArray63, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABICase1_52.key2(byteArray77, (int) (short) -1);
        staticSaltsABICase1_18.key2(byteArray77, (int) '4');
        byte[] byteArray84 = null;
        staticSaltsABICase1_18.key2(byteArray84, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABICase1_88.key2(byteArray90, (int) '#');
        staticSaltsABICase1_87.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray90, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray90, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) (byte) 1);
        java.lang.Class<?> wildcardClass73 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_18.key2(byteArray28, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_18.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray63, 10);
        staticSaltsABICase1_18.key2(byteArray63, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray63, (int) (short) 10);
        java.lang.Class<?> wildcardClass70 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray63, 100);
        byte[] byteArray74 = null;
        staticSaltsABICase1_0.key2(byteArray74, 100);
        java.lang.Class<?> wildcardClass77 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_0.key2(byteArray60, 0);
        java.lang.Class<?> wildcardClass65 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_5.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray45, 10);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_50.key2(byteArray67, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray75, 10);
        staticSaltsABICase1_50.key2(byteArray75, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray75, (int) '#');
        java.lang.Class<?> wildcardClass82 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 1);
        java.lang.Class<?> wildcardClass70 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_0.key2(byteArray69, (int) 'a');
        java.lang.Class<?> wildcardClass74 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABICase1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray73, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_78.key2(byteArray88, 0);
        staticSaltsABICase1_48.key2(byteArray88, 0);
        staticSaltsABICase1_8.key2(byteArray88, 1);
        staticSaltsABICase1_0.key2(byteArray88, (int) (byte) 10);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        byte[] byteArray22 = null;
        staticSaltsABICase1_17.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        byte[] byteArray59 = null;
        staticSaltsABICase1_25.key2(byteArray59, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_62.key2(byteArray69, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABICase1_74.key2(byteArray86, (int) (short) 0);
        staticSaltsABICase1_62.key2(byteArray86, 0);
        staticSaltsABICase1_25.key2(byteArray86, (int) (byte) 1);
        staticSaltsABICase1_17.key2(byteArray86, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray86, (int) ' ');
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_14.key2(byteArray24, 0);
        staticSaltsABICase1_6.key2(byteArray24, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_31.key2(byteArray42, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_45.key2(byteArray76, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_79.key2(byteArray86, (int) (byte) 10);
        staticSaltsABICase1_45.key2(byteArray86, (int) (short) -1);
        staticSaltsABICase1_31.key2(byteArray86, 0);
        staticSaltsABICase1_6.key2(byteArray86, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_35.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_47.key2(byteArray72, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_47.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_35.key2(byteArray82, 10);
        staticSaltsABICase1_0.key2(byteArray82, (int) '#');
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        staticSaltsABICase1_18.key2(byteArray43, (int) '4');
        staticSaltsABICase1_0.key2(byteArray43, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray77, (int) '4');
        java.lang.Class<?> wildcardClass86 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_20.key2(byteArray30, 0);
        staticSaltsABICase1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABICase1_5.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray50, 10);
        staticSaltsABICase1_5.key2(byteArray50, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_63.key2(byteArray82, (int) 'a');
        staticSaltsABICase1_55.key2(byteArray82, 100);
        staticSaltsABICase1_5.key2(byteArray82, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray82, 10);
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_35.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_47.key2(byteArray72, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_47.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_35.key2(byteArray82, 10);
        staticSaltsABICase1_0.key2(byteArray82, (int) '#');
        java.lang.Class<?> wildcardClass93 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray42, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_47.key2(byteArray58, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray58, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_68.key2(byteArray79, (int) (short) 10);
        staticSaltsABICase1_63.key2(byteArray79, (int) (byte) 0);
        staticSaltsABICase1_23.key2(byteArray79, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray79, (int) '4');
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        staticSaltsABICase1_21.key2(byteArray29, 10);
        staticSaltsABICase1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABICase1_36.key2(byteArray55, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray55, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 1);
        java.lang.Class<?> wildcardClass79 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABICase1_24.key2(byteArray59, 1);
        staticSaltsABICase1_0.key2(byteArray59, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        staticSaltsABICase1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray93 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_90.key2(byteArray93, 10);
        staticSaltsABICase1_0.key2(byteArray93, (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = byteArray93.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_16.key2(byteArray26, 0);
        staticSaltsABICase1_8.key2(byteArray26, 100);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_8.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_42.key2(byteArray49, (int) (byte) 10);
        staticSaltsABICase1_8.key2(byteArray49, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABICase1_56.key2(byteArray81, (int) (short) -1);
        staticSaltsABICase1_8.key2(byteArray81, 0);
        staticSaltsABICase1_0.key2(byteArray81, 1);
        java.lang.Class<?> wildcardClass90 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        staticSaltsABICase1_24.key2(byteArray42, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABICase1_57.key2(byteArray76, (int) 'a');
        staticSaltsABICase1_49.key2(byteArray76, 100);
        staticSaltsABICase1_24.key2(byteArray76, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_85.key2(byteArray88, (int) (short) 0);
        staticSaltsABICase1_24.key2(byteArray88, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray88, 100);
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray21 = null;
        staticSaltsABICase1_13.key2(byteArray21, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray32, 10);
        staticSaltsABICase1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        staticSaltsABICase1_24.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_24.key2(byteArray65, 0);
        staticSaltsABICase1_13.key2(byteArray65, 0);
        staticSaltsABICase1_0.key2(byteArray65, (int) (short) -1);
        byte[] byteArray74 = null;
        staticSaltsABICase1_0.key2(byteArray74, 100);
        java.lang.Class<?> wildcardClass77 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_15.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_32.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_32.key2(byteArray72, 0);
        staticSaltsABICase1_15.key2(byteArray72, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 1);
        byte[] byteArray83 = null;
        staticSaltsABICase1_0.key2(byteArray83, (int) ' ');
        java.lang.Class<?> wildcardClass86 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray80, 10);
        staticSaltsABICase1_72.key2(byteArray80, 10);
        staticSaltsABICase1_55.key2(byteArray80, (int) '4');
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_17.key2(byteArray28, (int) (short) 10);
        byte[] byteArray31 = null;
        staticSaltsABICase1_17.key2(byteArray31, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_34.key2(byteArray42, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_55.key2(byteArray66, (int) (short) 10);
        staticSaltsABICase1_47.key2(byteArray66, (int) 'a');
        staticSaltsABICase1_34.key2(byteArray66, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_34.key2(byteArray75, 0);
        staticSaltsABICase1_17.key2(byteArray75, (int) '#');
        staticSaltsABICase1_0.key2(byteArray75, (-1));
        java.lang.Class<?> wildcardClass84 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABICase1_22.key2(byteArray41, (int) 'a');
        staticSaltsABICase1_14.key2(byteArray41, 100);
        byte[] byteArray48 = null;
        staticSaltsABICase1_14.key2(byteArray48, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_51.key2(byteArray62, 1);
        staticSaltsABICase1_14.key2(byteArray62, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_71.key2(byteArray78, (int) (byte) 10);
        staticSaltsABICase1_14.key2(byteArray78, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) 0);
        java.lang.Class<?> wildcardClass87 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        java.lang.Class<?> wildcardClass35 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray74, 10);
        staticSaltsABICase1_66.key2(byteArray74, 10);
        staticSaltsABICase1_45.key2(byteArray74, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray74, (int) (byte) 0);
        java.lang.Class<?> wildcardClass83 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        staticSaltsABICase1_9.key2(byteArray27, 100);
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_9.key2(byteArray40, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_43.key2(byteArray50, (int) (byte) 10);
        staticSaltsABICase1_9.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_57.key2(byteArray68, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_57.key2(byteArray82, (int) (short) -1);
        staticSaltsABICase1_9.key2(byteArray82, 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) '#');
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray33, 10);
        staticSaltsABICase1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_38.key2(byteArray57, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray57, 1);
        staticSaltsABICase1_0.key2(byteArray57, (int) (short) 1);
        java.lang.Class<?> wildcardClass66 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_50.key2(byteArray69, (int) 'a');
        staticSaltsABICase1_42.key2(byteArray69, 100);
        staticSaltsABICase1_0.key2(byteArray69, (int) ' ');
        byte[] byteArray78 = null;
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) 1);
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_50.key2(byteArray69, (int) 'a');
        staticSaltsABICase1_42.key2(byteArray69, 100);
        staticSaltsABICase1_0.key2(byteArray69, (int) ' ');
        byte[] byteArray78 = null;
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass88 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_18.key2(byteArray28, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        staticSaltsABICase1_33.key2(byteArray58, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        staticSaltsABICase1_33.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray78, 10);
        staticSaltsABICase1_33.key2(byteArray78, (int) (byte) -1);
        staticSaltsABICase1_18.key2(byteArray78, 100);
        staticSaltsABICase1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass87 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        staticSaltsABICase1_14.key2(byteArray54, 0);
        staticSaltsABICase1_0.key2(byteArray54, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABICase1_63.key2(byteArray75, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray75, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray85, (int) (byte) 0);
        java.lang.Class<?> wildcardClass92 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABICase1_0.key2(byteArray5, 0);
        java.lang.Class<?> wildcardClass8 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        staticSaltsABICase1_30.key2(byteArray38, 10);
        staticSaltsABICase1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABICase1_8.key2(byteArray49, 0);
        staticSaltsABICase1_0.key2(byteArray49, 0);
        java.lang.Class<?> wildcardClass56 = byteArray49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABICase1_52.key2(byteArray68, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray81, 10);
        staticSaltsABICase1_73.key2(byteArray81, 10);
        staticSaltsABICase1_52.key2(byteArray81, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray81, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray77, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_89.key2(byteArray92, 10);
        staticSaltsABICase1_84.key2(byteArray92, 10);
        staticSaltsABICase1_0.key2(byteArray92, 100);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_17.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_17.key2(byteArray42, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray42, 100);
        java.lang.Class<?> wildcardClass49 = byteArray42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray33, 10);
        staticSaltsABICase1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_38.key2(byteArray57, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray57, 1);
        staticSaltsABICase1_0.key2(byteArray57, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_66.key2(byteArray77, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_80.key2(byteArray83, (int) (short) 0);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_80.key2(byteArray91, (int) (short) 10);
        staticSaltsABICase1_66.key2(byteArray91, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray91, (int) (short) 100);
        java.lang.Class<?> wildcardClass98 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 10 };
        staticSaltsABICase1_23.key2(byteArray72, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_83.key2(byteArray86, (int) (short) 0);
        staticSaltsABICase1_75.key2(byteArray86, 1);
        staticSaltsABICase1_23.key2(byteArray86, 0);
        staticSaltsABICase1_0.key2(byteArray86, (int) ' ');
        java.lang.Class<?> wildcardClass97 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABICase1_11.key2(byteArray13, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray19, 10);
        staticSaltsABICase1_11.key2(byteArray19, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray43, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray43, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_11.key2(byteArray52, 0);
        staticSaltsABICase1_0.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) (byte) 0);
        java.lang.Class<?> wildcardClass69 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray40, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray40, 1);
        java.lang.Class<?> wildcardClass47 = byteArray40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray74, (int) 'a');
        staticSaltsABICase1_47.key2(byteArray74, 100);
        staticSaltsABICase1_32.key2(byteArray74, (int) (byte) 10);
        staticSaltsABICase1_17.key2(byteArray74, 100);
        staticSaltsABICase1_0.key2(byteArray74, 0);
        java.lang.Class<?> wildcardClass87 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray67, 10);
        staticSaltsABICase1_59.key2(byteArray67, 10);
        staticSaltsABICase1_45.key2(byteArray67, (int) (short) 10);
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_45.key2(byteArray78, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray78, 0);
        staticSaltsABICase1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass85 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_55.key2(byteArray65, 0);
        staticSaltsABICase1_47.key2(byteArray65, 100);
        staticSaltsABICase1_0.key2(byteArray65, 0);
        java.lang.Class<?> wildcardClass74 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_50.key2(byteArray69, (int) 'a');
        staticSaltsABICase1_42.key2(byteArray69, 100);
        staticSaltsABICase1_0.key2(byteArray69, (int) ' ');
        java.lang.Class<?> wildcardClass78 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray32, 10);
        staticSaltsABICase1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        staticSaltsABICase1_24.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_24.key2(byteArray65, 0);
        staticSaltsABICase1_18.key2(byteArray65, 10);
        staticSaltsABICase1_0.key2(byteArray65, (int) ' ');
        java.lang.Class<?> wildcardClass74 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray73, 10);
        staticSaltsABICase1_65.key2(byteArray73, 10);
        staticSaltsABICase1_57.key2(byteArray73, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 10);
        java.lang.Class<?> wildcardClass82 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_25.key2(byteArray35, 0);
        staticSaltsABICase1_17.key2(byteArray35, 100);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_17.key2(byteArray48, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_51.key2(byteArray58, (int) (byte) 10);
        staticSaltsABICase1_17.key2(byteArray58, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray58, (int) (short) 100);
        java.lang.Class<?> wildcardClass67 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_11.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABICase1_11.key2(byteArray46, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_51.key2(byteArray67, (int) (byte) 0);
        staticSaltsABICase1_11.key2(byteArray67, 0);
        staticSaltsABICase1_0.key2(byteArray67, 0);
        java.lang.Class<?> wildcardClass76 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray74, 10);
        staticSaltsABICase1_66.key2(byteArray74, 10);
        staticSaltsABICase1_45.key2(byteArray74, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray74, (int) (byte) 0);
        byte[] byteArray83 = null;
        staticSaltsABICase1_0.key2(byteArray83, (-1));
        java.lang.Class<?> wildcardClass86 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray20, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray62, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray75 = null;
        staticSaltsABICase1_0.key2(byteArray75, 1);
        java.lang.Class<?> wildcardClass78 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_23.key2(byteArray40, (-1));
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_23.key2(byteArray50, 10);
        staticSaltsABICase1_0.key2(byteArray50, 10);
        java.lang.Class<?> wildcardClass55 = byteArray50.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray56, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABICase1_69.key2(byteArray88, (int) 'a');
        staticSaltsABICase1_61.key2(byteArray88, 100);
        staticSaltsABICase1_40.key2(byteArray88, 0);
        staticSaltsABICase1_0.key2(byteArray88, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray59, (int) 'a');
        staticSaltsABICase1_32.key2(byteArray59, 100);
        staticSaltsABICase1_0.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_0.key2(byteArray70, (int) (byte) -1);
        java.lang.Class<?> wildcardClass75 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray37, 10);
        staticSaltsABICase1_29.key2(byteArray37, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_42.key2(byteArray61, (int) 'a');
        staticSaltsABICase1_29.key2(byteArray61, 1);
        staticSaltsABICase1_28.key2(byteArray61, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray61, 1);
        java.lang.Class<?> wildcardClass72 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_32.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_32.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray79, (int) '#');
        staticSaltsABICase1_0.key2(byteArray79, (int) (byte) -1);
        java.lang.Class<?> wildcardClass88 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_5.key2(byteArray32, 100);
        byte[] byteArray39 = null;
        staticSaltsABICase1_5.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABICase1_42.key2(byteArray53, 1);
        staticSaltsABICase1_5.key2(byteArray53, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_62.key2(byteArray80, 100);
        staticSaltsABICase1_5.key2(byteArray80, (int) '#');
        staticSaltsABICase1_0.key2(byteArray80, (int) 'a');
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABICase1_64.key2(byteArray83, (int) 'a');
        staticSaltsABICase1_56.key2(byteArray83, 100);
        staticSaltsABICase1_35.key2(byteArray83, 0);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) 1);
        byte[] byteArray94 = null;
        staticSaltsABICase1_0.key2(byteArray94, 100);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray63, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABICase1_74.key2(byteArray85, 1);
        staticSaltsABICase1_0.key2(byteArray85, (int) (short) 10);
        byte[] byteArray94 = null;
        staticSaltsABICase1_0.key2(byteArray94, (int) (byte) 0);
        byte[] byteArray97 = null;
        staticSaltsABICase1_0.key2(byteArray97, (int) (byte) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_35.key2(byteArray43, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray43, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABICase1_50.key2(byteArray75, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray75, 0);
        java.lang.Class<?> wildcardClass82 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (byte) 1);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_34.key2(byteArray42, 10);
        staticSaltsABICase1_0.key2(byteArray42, (int) '4');
        java.lang.Class<?> wildcardClass49 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_16.key2(byteArray26, 0);
        staticSaltsABICase1_8.key2(byteArray26, 100);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_8.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_42.key2(byteArray49, (int) (byte) 10);
        staticSaltsABICase1_8.key2(byteArray49, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABICase1_56.key2(byteArray81, (int) (short) -1);
        staticSaltsABICase1_8.key2(byteArray81, 0);
        staticSaltsABICase1_0.key2(byteArray81, 1);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 10 };
        staticSaltsABICase1_23.key2(byteArray72, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_83.key2(byteArray86, (int) (short) 0);
        staticSaltsABICase1_75.key2(byteArray86, 1);
        staticSaltsABICase1_23.key2(byteArray86, 0);
        staticSaltsABICase1_0.key2(byteArray86, (int) ' ');
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABICase1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_13.key2(byteArray63, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray63, (int) (byte) 10);
        java.lang.Class<?> wildcardClass76 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_67.key2(byteArray73, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 1);
        java.lang.Class<?> wildcardClass78 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray45, 10);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABICase1_0.key2(byteArray50, (int) ' ');
        byte[] byteArray53 = null;
        staticSaltsABICase1_0.key2(byteArray53, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABICase1_56.key2(byteArray81, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_86.key2(byteArray92, (int) (short) 0);
        staticSaltsABICase1_56.key2(byteArray92, 0);
        staticSaltsABICase1_0.key2(byteArray92, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (short) 1);
        java.lang.Class<?> wildcardClass67 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        staticSaltsABICase1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABICase1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray52, (-1));
        staticSaltsABICase1_0.key2(byteArray52, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray83, 10);
        staticSaltsABICase1_75.key2(byteArray83, 10);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABICase1_22.key2(byteArray41, (int) 'a');
        staticSaltsABICase1_14.key2(byteArray41, 100);
        byte[] byteArray48 = null;
        staticSaltsABICase1_14.key2(byteArray48, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_51.key2(byteArray62, 1);
        staticSaltsABICase1_14.key2(byteArray62, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_79.key2(byteArray89, 0);
        staticSaltsABICase1_71.key2(byteArray89, 100);
        staticSaltsABICase1_14.key2(byteArray89, (int) '#');
        staticSaltsABICase1_0.key2(byteArray89, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_18.key2(byteArray28, 0);
        staticSaltsABICase1_17.key2(byteArray28, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_36.key2(byteArray46, 0);
        staticSaltsABICase1_35.key2(byteArray46, (int) (byte) 1);
        staticSaltsABICase1_17.key2(byteArray46, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray67, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray77, 10);
        staticSaltsABICase1_17.key2(byteArray77, 0);
        staticSaltsABICase1_0.key2(byteArray77, (int) (byte) 1);
        java.lang.Class<?> wildcardClass84 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_55.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_55.key2(byteArray80, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABICase1_88.key2(byteArray90, (int) '#');
        staticSaltsABICase1_87.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_55.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray90, 10);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_1.key2(byteArray19, 100);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_1.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray60, (int) (short) -1);
        staticSaltsABICase1_1.key2(byteArray60, (int) '4');
        staticSaltsABICase1_0.key2(byteArray60, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray85, 10);
        staticSaltsABICase1_77.key2(byteArray85, 10);
        staticSaltsABICase1_69.key2(byteArray85, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray85, (int) (byte) -1);
        byte[] byteArray94 = null;
        staticSaltsABICase1_0.key2(byteArray94, (int) (byte) -1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_6.key2(byteArray17, (int) (short) 10);
        staticSaltsABICase1_1.key2(byteArray17, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_22.key2(byteArray40, 100);
        staticSaltsABICase1_1.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_1.key2(byteArray59, (int) '#');
        staticSaltsABICase1_0.key2(byteArray59, (int) (byte) -1);
        java.lang.Class<?> wildcardClass68 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray59, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray59, (int) '4');
        byte[] byteArray66 = null;
        staticSaltsABICase1_0.key2(byteArray66, 0);
        byte[] byteArray69 = null;
        staticSaltsABICase1_0.key2(byteArray69, (int) (short) 0);
        java.lang.Class<?> wildcardClass72 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray59, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray59, (int) '4');
        byte[] byteArray66 = null;
        staticSaltsABICase1_0.key2(byteArray66, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray72, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) 0);
        java.lang.Class<?> wildcardClass89 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_34.key2(byteArray42, 10);
        staticSaltsABICase1_0.key2(byteArray42, (int) '4');
        java.lang.Class<?> wildcardClass49 = byteArray42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) (byte) 1);
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        staticSaltsABICase1_14.key2(byteArray54, 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_14.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_64.key2(byteArray74, 0);
        staticSaltsABICase1_14.key2(byteArray74, 1);
        staticSaltsABICase1_0.key2(byteArray74, 0);
        java.lang.Class<?> wildcardClass83 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABICase1_24.key2(byteArray59, 1);
        staticSaltsABICase1_0.key2(byteArray59, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        staticSaltsABICase1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 10);
        byte[] byteArray90 = null;
        staticSaltsABICase1_0.key2(byteArray90, (-1));
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_22.key2(byteArray32, 0);
        staticSaltsABICase1_14.key2(byteArray32, 100);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_14.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray73, (int) (short) -1);
        staticSaltsABICase1_14.key2(byteArray73, (int) '4');
        staticSaltsABICase1_0.key2(byteArray73, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_0.key2(byteArray84, (int) '#');
        java.lang.Class<?> wildcardClass89 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_42.key2(byteArray67, (int) 'a');
        byte[] byteArray74 = null;
        staticSaltsABICase1_42.key2(byteArray74, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_77.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_77.key2(byteArray87, 0);
        staticSaltsABICase1_42.key2(byteArray87, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) 10);
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_67.key2(byteArray74, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray74, (-1));
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        staticSaltsABICase1_0.key2(byteArray47, (int) ' ');
        java.lang.Class<?> wildcardClass54 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_67.key2(byteArray74, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray74, (-1));
        java.lang.Class<?> wildcardClass81 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_22.key2(byteArray32, 0);
        staticSaltsABICase1_14.key2(byteArray32, 100);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_14.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray73, (int) (short) -1);
        staticSaltsABICase1_14.key2(byteArray73, (int) '4');
        staticSaltsABICase1_0.key2(byteArray73, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_0.key2(byteArray84, (int) '#');
        java.lang.Class<?> wildcardClass89 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_52.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) ' ');
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray56, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABICase1_69.key2(byteArray88, (int) 'a');
        staticSaltsABICase1_61.key2(byteArray88, 100);
        staticSaltsABICase1_40.key2(byteArray88, 0);
        staticSaltsABICase1_0.key2(byteArray88, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_0.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_30.key2(byteArray41, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_54.key2(byteArray64, 0);
        staticSaltsABICase1_53.key2(byteArray64, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_72.key2(byteArray82, 0);
        staticSaltsABICase1_71.key2(byteArray82, (int) (byte) 1);
        staticSaltsABICase1_53.key2(byteArray82, (int) (byte) 0);
        staticSaltsABICase1_48.key2(byteArray82, (-1));
        staticSaltsABICase1_30.key2(byteArray82, (int) '4');
        staticSaltsABICase1_0.key2(byteArray82, 0);
        java.lang.Class<?> wildcardClass97 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        java.lang.Class<?> wildcardClass76 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_18.key2(byteArray29, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray43, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_48.key2(byteArray66, 100);
        staticSaltsABICase1_18.key2(byteArray66, 1);
        staticSaltsABICase1_0.key2(byteArray66, (int) (byte) 100);
        java.lang.Class<?> wildcardClass77 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_1.key2(byteArray19, 100);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_1.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray60, (int) (short) -1);
        staticSaltsABICase1_1.key2(byteArray60, (int) '4');
        staticSaltsABICase1_0.key2(byteArray60, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray85, 10);
        staticSaltsABICase1_77.key2(byteArray85, 10);
        staticSaltsABICase1_69.key2(byteArray85, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray85, (int) (byte) -1);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        byte[] byteArray22 = null;
        staticSaltsABICase1_17.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        byte[] byteArray59 = null;
        staticSaltsABICase1_25.key2(byteArray59, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_62.key2(byteArray69, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABICase1_74.key2(byteArray86, (int) (short) 0);
        staticSaltsABICase1_62.key2(byteArray86, 0);
        staticSaltsABICase1_25.key2(byteArray86, (int) (byte) 1);
        staticSaltsABICase1_17.key2(byteArray86, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray86, (int) ' ');
        java.lang.Class<?> wildcardClass99 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_32.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_32.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray67, (int) ' ');
        byte[] byteArray78 = null;
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) -1);
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_6.key2(byteArray16, 0);
        staticSaltsABICase1_5.key2(byteArray16, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        staticSaltsABICase1_5.key2(byteArray34, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_66.key2(byteArray76, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_66.key2(byteArray83, (-1));
        staticSaltsABICase1_45.key2(byteArray83, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) 0);
        byte[] byteArray92 = null;
        staticSaltsABICase1_0.key2(byteArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABICase1_43.key2(byteArray62, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray62, 100);
        byte[] byteArray69 = null;
        staticSaltsABICase1_35.key2(byteArray69, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_72.key2(byteArray82, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_72.key2(byteArray89, (-1));
        staticSaltsABICase1_35.key2(byteArray89, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray89, (int) (byte) 10);
        java.lang.Class<?> wildcardClass98 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray80, 10);
        staticSaltsABICase1_72.key2(byteArray80, 10);
        staticSaltsABICase1_55.key2(byteArray80, (int) '4');
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_48.key2(byteArray65, (-1));
        staticSaltsABICase1_0.key2(byteArray65, (int) (short) -1);
        java.lang.Class<?> wildcardClass72 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABICase1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABICase1_16.key2(byteArray35, (int) 'a');
        staticSaltsABICase1_8.key2(byteArray35, 100);
        byte[] byteArray42 = null;
        staticSaltsABICase1_8.key2(byteArray42, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_45.key2(byteArray52, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_57.key2(byteArray69, (int) (short) 0);
        staticSaltsABICase1_45.key2(byteArray69, 0);
        staticSaltsABICase1_8.key2(byteArray69, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray69, (int) (short) 100);
        java.lang.Class<?> wildcardClass80 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray70, 10);
        staticSaltsABICase1_0.key2(byteArray70, (int) (short) -1);
        java.lang.Class<?> wildcardClass75 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_14.key2(byteArray24, 0);
        staticSaltsABICase1_6.key2(byteArray24, 100);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_6.key2(byteArray37, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABICase1_6.key2(byteArray65, (int) '4');
        staticSaltsABICase1_5.key2(byteArray65, (int) '4');
        staticSaltsABICase1_0.key2(byteArray65, (-1));
        java.lang.Class<?> wildcardClass76 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_7.key2(byteArray10, (int) (short) 0);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_7.key2(byteArray18, (int) (short) 10);
        staticSaltsABICase1_6.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_38.key2(byteArray48, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_38.key2(byteArray63, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        staticSaltsABICase1_38.key2(byteArray73, (int) (short) 0);
        staticSaltsABICase1_23.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_6.key2(byteArray73, (int) ' ');
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 0);
        byte[] byteArray86 = null;
        staticSaltsABICase1_0.key2(byteArray86, (int) (byte) 100);
        java.lang.Class<?> wildcardClass89 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_26.key2(byteArray36, 0);
        staticSaltsABICase1_18.key2(byteArray36, 100);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_18.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_52.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_18.key2(byteArray87, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_54.key2(byteArray73, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_54.key2(byteArray89, (int) 'a');
        staticSaltsABICase1_37.key2(byteArray89, (int) ' ');
        staticSaltsABICase1_0.key2(byteArray89, (int) (byte) 100);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_14.key2(byteArray24, 0);
        staticSaltsABICase1_6.key2(byteArray24, 100);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_6.key2(byteArray37, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABICase1_6.key2(byteArray65, (int) '4');
        staticSaltsABICase1_5.key2(byteArray65, (int) '4');
        staticSaltsABICase1_0.key2(byteArray65, (-1));
        java.lang.Class<?> wildcardClass76 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray73, 10);
        staticSaltsABICase1_65.key2(byteArray73, 10);
        staticSaltsABICase1_57.key2(byteArray73, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 10);
        java.lang.Class<?> wildcardClass82 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        staticSaltsABICase1_21.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray53, (int) 'a');
        staticSaltsABICase1_21.key2(byteArray53, 1);
        staticSaltsABICase1_0.key2(byteArray53, 100);
        java.lang.Class<?> wildcardClass62 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_43.key2(byteArray53, 0);
        staticSaltsABICase1_42.key2(byteArray53, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_61.key2(byteArray71, 0);
        staticSaltsABICase1_60.key2(byteArray71, (int) (byte) 1);
        staticSaltsABICase1_42.key2(byteArray71, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray71, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_82.key2(byteArray89, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray89, (int) (short) 0);
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_55.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_55.key2(byteArray80, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        staticSaltsABICase1_35.key2(byteArray60, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        staticSaltsABICase1_35.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray88, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray88, (int) '#');
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray73, 10);
        staticSaltsABICase1_65.key2(byteArray73, 10);
        staticSaltsABICase1_57.key2(byteArray73, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray90, 10);
        staticSaltsABICase1_82.key2(byteArray90, 10);
        staticSaltsABICase1_0.key2(byteArray90, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_0.key2(byteArray69, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABICase1_74.key2(byteArray90, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray90, (int) (byte) 100);
        java.lang.Class<?> wildcardClass97 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_17.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_17.key2(byteArray42, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray42, 100);
        java.lang.Class<?> wildcardClass49 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_73.key2(byteArray83, 0);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) 0);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray30, 10);
        staticSaltsABICase1_22.key2(byteArray30, 10);
        staticSaltsABICase1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_51.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABICase1_51.key2(byteArray80, (int) (byte) 0);
        staticSaltsABICase1_46.key2(byteArray80, (-1));
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) 1);
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABICase1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_13.key2(byteArray63, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABICase1_74.key2(byteArray90, (int) (byte) 0);
        staticSaltsABICase1_13.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray90, (int) 'a');
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 10 };
        staticSaltsABICase1_23.key2(byteArray72, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_83.key2(byteArray86, (int) (short) 0);
        staticSaltsABICase1_75.key2(byteArray86, 1);
        staticSaltsABICase1_23.key2(byteArray86, 0);
        staticSaltsABICase1_0.key2(byteArray86, (int) ' ');
        byte[] byteArray97 = null;
        staticSaltsABICase1_0.key2(byteArray97, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        byte[] byteArray48 = null;
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_59.key2(byteArray69, 0);
        staticSaltsABICase1_51.key2(byteArray69, 100);
        staticSaltsABICase1_0.key2(byteArray69, (int) (byte) 1);
        java.lang.Class<?> wildcardClass78 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABICase1_17.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_34.key2(byteArray42, 10);
        staticSaltsABICase1_17.key2(byteArray42, (int) '4');
        staticSaltsABICase1_0.key2(byteArray42, (int) (byte) -1);
        java.lang.Class<?> wildcardClass51 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray62, 10);
        staticSaltsABICase1_37.key2(byteArray62, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray62, (int) 'a');
        java.lang.Class<?> wildcardClass69 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABICase1_0.key2(byteArray38, 100);
        byte[] byteArray41 = null;
        staticSaltsABICase1_0.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        staticSaltsABICase1_44.key2(byteArray55, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABICase1_62.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray87, 10);
        staticSaltsABICase1_79.key2(byteArray87, 10);
        staticSaltsABICase1_62.key2(byteArray87, (int) '4');
        staticSaltsABICase1_44.key2(byteArray87, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray87, (int) '4');
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        byte[] byteArray48 = null;
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_59.key2(byteArray69, 0);
        staticSaltsABICase1_51.key2(byteArray69, 100);
        staticSaltsABICase1_0.key2(byteArray69, (int) (byte) 1);
        java.lang.Class<?> wildcardClass78 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        staticSaltsABICase1_30.key2(byteArray38, 10);
        staticSaltsABICase1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABICase1_8.key2(byteArray49, 0);
        staticSaltsABICase1_0.key2(byteArray49, 0);
        java.lang.Class<?> wildcardClass56 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_56.key2(byteArray67, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_75.key2(byteArray85, 0);
        staticSaltsABICase1_74.key2(byteArray85, (int) (byte) 1);
        staticSaltsABICase1_56.key2(byteArray85, (int) (byte) 0);
        staticSaltsABICase1_35.key2(byteArray85, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray85, 100);
        java.lang.Class<?> wildcardClass98 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray46, 10);
        staticSaltsABICase1_38.key2(byteArray46, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABICase1_51.key2(byteArray70, (int) 'a');
        staticSaltsABICase1_38.key2(byteArray70, 1);
        staticSaltsABICase1_37.key2(byteArray70, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray84, (int) (byte) 1);
        java.lang.Class<?> wildcardClass91 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_17.key2(byteArray28, (int) (short) 10);
        byte[] byteArray31 = null;
        staticSaltsABICase1_17.key2(byteArray31, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_34.key2(byteArray42, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_55.key2(byteArray66, (int) (short) 10);
        staticSaltsABICase1_47.key2(byteArray66, (int) 'a');
        staticSaltsABICase1_34.key2(byteArray66, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_34.key2(byteArray75, 0);
        staticSaltsABICase1_17.key2(byteArray75, (int) '#');
        staticSaltsABICase1_0.key2(byteArray75, (-1));
        java.lang.Class<?> wildcardClass84 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_22.key2(byteArray40, 100);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_22.key2(byteArray53, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABICase1_56.key2(byteArray81, (int) (short) -1);
        staticSaltsABICase1_22.key2(byteArray81, (int) '4');
        staticSaltsABICase1_8.key2(byteArray81, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray81, (int) '#');
        byte[] byteArray92 = null;
        staticSaltsABICase1_0.key2(byteArray92, (int) ' ');
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABICase1_0.key2(byteArray17, (int) (byte) -1);
        java.lang.Class<?> wildcardClass20 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray56, (int) '4');
        java.lang.Class<?> wildcardClass63 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_1.key2(byteArray19, 100);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_1.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray60, (int) (short) -1);
        staticSaltsABICase1_1.key2(byteArray60, (int) '4');
        staticSaltsABICase1_0.key2(byteArray60, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray80, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABICase1_90.key2(byteArray92, (int) '#');
        staticSaltsABICase1_89.key2(byteArray92, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray92, 100);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        staticSaltsABICase1_8.key2(byteArray19, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABICase1_32.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_61.key2(byteArray71, 0);
        staticSaltsABICase1_53.key2(byteArray71, 100);
        staticSaltsABICase1_32.key2(byteArray71, (int) (short) 0);
        staticSaltsABICase1_26.key2(byteArray71, (int) (byte) 0);
        staticSaltsABICase1_8.key2(byteArray71, (int) '#');
        staticSaltsABICase1_0.key2(byteArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass86 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_40.key2(byteArray50, 0);
        staticSaltsABICase1_39.key2(byteArray50, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_57.key2(byteArray68, (int) (byte) 1);
        staticSaltsABICase1_39.key2(byteArray68, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray68, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 0);
        byte[] byteArray81 = null;
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) 1);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        staticSaltsABICase1_21.key2(byteArray39, 100);
        staticSaltsABICase1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_48.key2(byteArray66, 100);
        staticSaltsABICase1_0.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray78, (int) '4');
        byte[] byteArray85 = null;
        staticSaltsABICase1_0.key2(byteArray85, 100);
        byte[] byteArray88 = null;
        staticSaltsABICase1_0.key2(byteArray88, (int) (byte) 0);
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_35.key2(byteArray62, 10);
        staticSaltsABICase1_0.key2(byteArray62, 100);
        byte[] byteArray67 = null;
        staticSaltsABICase1_0.key2(byteArray67, (int) ' ');
        java.lang.Class<?> wildcardClass70 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray45, 10);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_65.key2(byteArray75, 0);
        staticSaltsABICase1_50.key2(byteArray75, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABICase1_50.key2(byteArray85, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray85, (int) (short) -1);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        staticSaltsABICase1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABICase1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray52, (-1));
        staticSaltsABICase1_0.key2(byteArray52, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray83, 10);
        staticSaltsABICase1_75.key2(byteArray83, 10);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) -1);
        java.lang.Class<?> wildcardClass90 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_0.key2(byteArray60, 0);
        java.lang.Class<?> wildcardClass65 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_35.key2(byteArray43, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray43, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABICase1_50.key2(byteArray75, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray75, 0);
        java.lang.Class<?> wildcardClass82 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray37, (int) ' ');
        java.lang.Class<?> wildcardClass44 = byteArray37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray47, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        staticSaltsABICase1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABICase1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABICase1_31.key2(byteArray81, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray81, (int) '4');
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        staticSaltsABICase1_18.key2(byteArray43, (int) '4');
        staticSaltsABICase1_0.key2(byteArray43, (int) (short) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 100);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABICase1_0.key2(byteArray13, (int) (byte) 10);
        java.lang.Class<?> wildcardClass16 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray46, (int) (short) 0);
        staticSaltsABICase1_22.key2(byteArray46, 0);
        byte[] byteArray53 = null;
        staticSaltsABICase1_22.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_64.key2(byteArray74, 0);
        staticSaltsABICase1_56.key2(byteArray74, 100);
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_56.key2(byteArray87, (int) (byte) 1);
        staticSaltsABICase1_22.key2(byteArray87, 1);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) 10);
        byte[] byteArray94 = null;
        staticSaltsABICase1_0.key2(byteArray94, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray24, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_29.key2(byteArray46, (-1));
        staticSaltsABICase1_8.key2(byteArray46, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABICase1_8.key2(byteArray56, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_63.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_78.key2(byteArray88, 0);
        staticSaltsABICase1_63.key2(byteArray88, (int) 'a');
        staticSaltsABICase1_8.key2(byteArray88, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        byte[] byteArray53 = null;
        staticSaltsABICase1_0.key2(byteArray53, (int) (short) 1);
        java.lang.Class<?> wildcardClass56 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray74, (-1));
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        staticSaltsABICase1_14.key2(byteArray25, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_32.key2(byteArray43, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_51.key2(byteArray61, 0);
        staticSaltsABICase1_50.key2(byteArray61, (int) (byte) 1);
        staticSaltsABICase1_32.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_14.key2(byteArray61, (int) '#');
        staticSaltsABICase1_0.key2(byteArray61, 10);
        java.lang.Class<?> wildcardClass74 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_5.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, 100);
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_55.key2(byteArray65, 0);
        staticSaltsABICase1_47.key2(byteArray65, 100);
        staticSaltsABICase1_0.key2(byteArray65, 0);
        java.lang.Class<?> wildcardClass74 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABICase1_0.key2(byteArray38, 100);
        byte[] byteArray41 = null;
        staticSaltsABICase1_0.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        staticSaltsABICase1_44.key2(byteArray55, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABICase1_62.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray87, 10);
        staticSaltsABICase1_79.key2(byteArray87, 10);
        staticSaltsABICase1_62.key2(byteArray87, (int) '4');
        staticSaltsABICase1_44.key2(byteArray87, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray87, (int) '4');
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        byte[] byteArray53 = null;
        staticSaltsABICase1_0.key2(byteArray53, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_56.key2(byteArray63, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray63, 0);
        java.lang.Class<?> wildcardClass70 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_18.key2(byteArray28, 0);
        staticSaltsABICase1_17.key2(byteArray28, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_36.key2(byteArray46, 0);
        staticSaltsABICase1_35.key2(byteArray46, (int) (byte) 1);
        staticSaltsABICase1_17.key2(byteArray46, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray67, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray77, 10);
        staticSaltsABICase1_17.key2(byteArray77, 0);
        staticSaltsABICase1_0.key2(byteArray77, (int) (byte) 1);
        java.lang.Class<?> wildcardClass84 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_23.key2(byteArray40, (-1));
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_23.key2(byteArray50, 10);
        staticSaltsABICase1_0.key2(byteArray50, 10);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        staticSaltsABICase1_21.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray53, (int) 'a');
        staticSaltsABICase1_21.key2(byteArray53, 1);
        staticSaltsABICase1_0.key2(byteArray53, 100);
        java.lang.Class<?> wildcardClass62 = byteArray53.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray77, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_84.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray90, (int) (short) 1);
        java.lang.Class<?> wildcardClass95 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_0.key2(byteArray69, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABICase1_74.key2(byteArray90, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray90, (int) (byte) 100);
        byte[] byteArray97 = null;
        staticSaltsABICase1_0.key2(byteArray97, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray46, 10);
        staticSaltsABICase1_38.key2(byteArray46, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABICase1_51.key2(byteArray70, (int) 'a');
        staticSaltsABICase1_38.key2(byteArray70, 1);
        staticSaltsABICase1_37.key2(byteArray70, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray84, (int) (byte) 1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_1.key2(byteArray19, 100);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_1.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray60, (int) (short) -1);
        staticSaltsABICase1_1.key2(byteArray60, (int) '4');
        staticSaltsABICase1_0.key2(byteArray60, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray85, 10);
        staticSaltsABICase1_77.key2(byteArray85, 10);
        staticSaltsABICase1_69.key2(byteArray85, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray85, (int) (byte) -1);
        java.lang.Class<?> wildcardClass94 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray45, 10);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_50.key2(byteArray57, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABICase1_62.key2(byteArray74, (int) (short) 0);
        staticSaltsABICase1_50.key2(byteArray74, 0);
        byte[] byteArray81 = null;
        staticSaltsABICase1_50.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_50.key2(byteArray87, (int) ' ');
        staticSaltsABICase1_0.key2(byteArray87, (-1));
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        byte[] byteArray32 = null;
        staticSaltsABICase1_17.key2(byteArray32, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray67, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray67, 1);
        staticSaltsABICase1_17.key2(byteArray67, 0);
        staticSaltsABICase1_0.key2(byteArray67, (int) 'a');
        java.lang.Class<?> wildcardClass78 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_30.key2(byteArray41, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_54.key2(byteArray64, 0);
        staticSaltsABICase1_53.key2(byteArray64, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_72.key2(byteArray82, 0);
        staticSaltsABICase1_71.key2(byteArray82, (int) (byte) 1);
        staticSaltsABICase1_53.key2(byteArray82, (int) (byte) 0);
        staticSaltsABICase1_48.key2(byteArray82, (-1));
        staticSaltsABICase1_30.key2(byteArray82, (int) '4');
        staticSaltsABICase1_0.key2(byteArray82, (int) (byte) 0);
        byte[] byteArray97 = null;
        staticSaltsABICase1_0.key2(byteArray97, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_14.key2(byteArray24, 0);
        staticSaltsABICase1_6.key2(byteArray24, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_31.key2(byteArray42, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_45.key2(byteArray76, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_79.key2(byteArray86, (int) (byte) 10);
        staticSaltsABICase1_45.key2(byteArray86, (int) (short) -1);
        staticSaltsABICase1_31.key2(byteArray86, 0);
        staticSaltsABICase1_6.key2(byteArray86, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass99 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_35.key2(byteArray43, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray43, (int) (short) -1);
        java.lang.Class<?> wildcardClass50 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_54.key2(byteArray73, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_54.key2(byteArray89, (int) 'a');
        staticSaltsABICase1_37.key2(byteArray89, (int) ' ');
        staticSaltsABICase1_0.key2(byteArray89, (int) (byte) 100);
        java.lang.Class<?> wildcardClass98 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        staticSaltsABICase1_25.key2(byteArray52, 100);
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) 100);
        java.lang.Class<?> wildcardClass87 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        staticSaltsABICase1_8.key2(byteArray19, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABICase1_32.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_61.key2(byteArray71, 0);
        staticSaltsABICase1_53.key2(byteArray71, 100);
        staticSaltsABICase1_32.key2(byteArray71, (int) (short) 0);
        staticSaltsABICase1_26.key2(byteArray71, (int) (byte) 0);
        staticSaltsABICase1_8.key2(byteArray71, (int) '#');
        staticSaltsABICase1_0.key2(byteArray71, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_86.key2(byteArray92, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray92, (int) ' ');
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (short) 100);
        java.lang.Class<?> wildcardClass67 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_20.key2(byteArray23, (int) (short) 0);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_20.key2(byteArray31, (int) (short) 10);
        staticSaltsABICase1_15.key2(byteArray31, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_36.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_36.key2(byteArray53, (-1));
        staticSaltsABICase1_15.key2(byteArray53, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray63, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_70.key2(byteArray87, (-1));
        staticSaltsABICase1_15.key2(byteArray87, 0);
        staticSaltsABICase1_14.key2(byteArray87, 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_55.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_55.key2(byteArray80, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) 100 };
        staticSaltsABICase1_88.key2(byteArray90, (int) '#');
        staticSaltsABICase1_87.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_55.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray90, 10);
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray59, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray59, (int) '4');
        byte[] byteArray66 = null;
        staticSaltsABICase1_0.key2(byteArray66, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray72, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_89.key2(byteArray92, 10);
        staticSaltsABICase1_0.key2(byteArray92, (int) 'a');
        java.lang.Class<?> wildcardClass97 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray56, (int) '4');
        java.lang.Class<?> wildcardClass63 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray30, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_43.key2(byteArray53, 0);
        staticSaltsABICase1_35.key2(byteArray53, 100);
        staticSaltsABICase1_14.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_62.key2(byteArray80, 100);
        staticSaltsABICase1_14.key2(byteArray80, (-1));
        staticSaltsABICase1_0.key2(byteArray80, 10);
        byte[] byteArray91 = null;
        staticSaltsABICase1_0.key2(byteArray91, 0);
        byte[] byteArray94 = null;
        staticSaltsABICase1_0.key2(byteArray94, (int) (byte) -1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray58, (int) (byte) 100);
        java.lang.Class<?> wildcardClass65 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABICase1_0.key2(byteArray13, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABICase1_16.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_16.key2(byteArray48, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_53.key2(byteArray70, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray78, 10);
        staticSaltsABICase1_53.key2(byteArray78, (int) (short) 100);
        staticSaltsABICase1_16.key2(byteArray78, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray78, 1);
        java.lang.Class<?> wildcardClass87 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 1);
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, (int) (short) 100);
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABICase1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_18.key2(byteArray29, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray43, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_56.key2(byteArray66, 0);
        staticSaltsABICase1_48.key2(byteArray66, 100);
        staticSaltsABICase1_18.key2(byteArray66, 1);
        staticSaltsABICase1_0.key2(byteArray66, (int) (byte) 100);
        java.lang.Class<?> wildcardClass77 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray46, (int) (short) 0);
        staticSaltsABICase1_22.key2(byteArray46, 0);
        byte[] byteArray53 = null;
        staticSaltsABICase1_22.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_64.key2(byteArray74, 0);
        staticSaltsABICase1_56.key2(byteArray74, 100);
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_56.key2(byteArray87, (int) (byte) 1);
        staticSaltsABICase1_22.key2(byteArray87, 1);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) 10);
        java.lang.Class<?> wildcardClass94 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABICase1_22.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_39.key2(byteArray57, 100);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_39.key2(byteArray70, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABICase1_39.key2(byteArray80, (int) (short) -1);
        staticSaltsABICase1_22.key2(byteArray80, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) -1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray30, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_43.key2(byteArray53, 0);
        staticSaltsABICase1_35.key2(byteArray53, 100);
        staticSaltsABICase1_14.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_62.key2(byteArray80, 100);
        staticSaltsABICase1_14.key2(byteArray80, (-1));
        staticSaltsABICase1_0.key2(byteArray80, 10);
        byte[] byteArray91 = null;
        staticSaltsABICase1_0.key2(byteArray91, 0);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_45.key2(byteArray63, 100);
        staticSaltsABICase1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray77, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_84.key2(byteArray90, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray90, (int) (short) 1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_5.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_70.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) 0);
        java.lang.Class<?> wildcardClass89 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_11.key2(byteArray22, (int) (short) 10);
        staticSaltsABICase1_6.key2(byteArray22, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_27.key2(byteArray45, 100);
        staticSaltsABICase1_6.key2(byteArray45, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABICase1_64.key2(byteArray83, (int) 'a');
        staticSaltsABICase1_56.key2(byteArray83, 100);
        staticSaltsABICase1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABICase1_0.key2(byteArray13, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABICase1_16.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_16.key2(byteArray48, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_53.key2(byteArray70, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray78, 10);
        staticSaltsABICase1_53.key2(byteArray78, (int) (short) 100);
        staticSaltsABICase1_16.key2(byteArray78, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray78, 1);
        java.lang.Class<?> wildcardClass87 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        staticSaltsABICase1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABICase1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        staticSaltsABICase1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABICase1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray81, 100);
        java.lang.Class<?> wildcardClass92 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray46, (int) (short) 0);
        staticSaltsABICase1_22.key2(byteArray46, 0);
        byte[] byteArray53 = null;
        staticSaltsABICase1_22.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_64.key2(byteArray74, 0);
        staticSaltsABICase1_56.key2(byteArray74, 100);
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_56.key2(byteArray87, (int) (byte) 1);
        staticSaltsABICase1_22.key2(byteArray87, 1);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) 10);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray32, 10);
        staticSaltsABICase1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        staticSaltsABICase1_24.key2(byteArray56, 1);
        staticSaltsABICase1_0.key2(byteArray56, (int) (byte) 10);
        java.lang.Class<?> wildcardClass65 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABICase1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABICase1_33.key2(byteArray44, 1);
        staticSaltsABICase1_0.key2(byteArray44, (-1));
        java.lang.Class<?> wildcardClass53 = byteArray44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        staticSaltsABICase1_8.key2(byteArray19, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABICase1_32.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_61.key2(byteArray71, 0);
        staticSaltsABICase1_53.key2(byteArray71, 100);
        staticSaltsABICase1_32.key2(byteArray71, (int) (short) 0);
        staticSaltsABICase1_26.key2(byteArray71, (int) (byte) 0);
        staticSaltsABICase1_8.key2(byteArray71, (int) '#');
        staticSaltsABICase1_0.key2(byteArray71, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_86.key2(byteArray92, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray92, (int) ' ');
        java.lang.Class<?> wildcardClass97 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        staticSaltsABICase1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABICase1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray41, (int) ' ');
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) ' ');
        byte[] byteArray55 = null;
        staticSaltsABICase1_0.key2(byteArray55, 10);
        java.lang.Class<?> wildcardClass58 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_0.key2(byteArray69, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABICase1_74.key2(byteArray90, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray90, (int) (byte) 100);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_52.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) -1);
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_15.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_32.key2(byteArray57, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_32.key2(byteArray72, 0);
        staticSaltsABICase1_15.key2(byteArray72, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 1);
        java.lang.Class<?> wildcardClass83 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        staticSaltsABICase1_14.key2(byteArray25, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_32.key2(byteArray43, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_51.key2(byteArray61, 0);
        staticSaltsABICase1_50.key2(byteArray61, (int) (byte) 1);
        staticSaltsABICase1_32.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_14.key2(byteArray61, (int) '#');
        staticSaltsABICase1_0.key2(byteArray61, 10);
        java.lang.Class<?> wildcardClass74 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_52.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) ' ');
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_25.key2(byteArray35, 0);
        staticSaltsABICase1_17.key2(byteArray35, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_42.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_42.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray77, (int) '4');
        staticSaltsABICase1_0.key2(byteArray77, (int) (short) 100);
        java.lang.Class<?> wildcardClass88 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABICase1_17.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray42, 10);
        staticSaltsABICase1_34.key2(byteArray42, 10);
        staticSaltsABICase1_17.key2(byteArray42, (int) '4');
        staticSaltsABICase1_0.key2(byteArray42, (int) (byte) -1);
        java.lang.Class<?> wildcardClass51 = byteArray42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_44.key2(byteArray61, (-1));
        staticSaltsABICase1_23.key2(byteArray61, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABICase1_68.key2(byteArray87, (int) 'a');
        staticSaltsABICase1_23.key2(byteArray87, (int) ' ');
        staticSaltsABICase1_18.key2(byteArray87, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) 100);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABICase1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_13.key2(byteArray63, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray63, (int) (byte) 10);
        java.lang.Class<?> wildcardClass76 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray74, (int) 'a');
        staticSaltsABICase1_47.key2(byteArray74, 100);
        staticSaltsABICase1_0.key2(byteArray74, 0);
        byte[] byteArray83 = null;
        staticSaltsABICase1_0.key2(byteArray83, (int) (short) 100);
        java.lang.Class<?> wildcardClass86 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray56, (int) (short) -1);
        byte[] byteArray63 = null;
        staticSaltsABICase1_0.key2(byteArray63, (int) (byte) -1);
        java.lang.Class<?> wildcardClass66 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_16.key2(byteArray32, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_16.key2(byteArray54, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABICase1_16.key2(byteArray64, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_71.key2(byteArray88, (-1));
        staticSaltsABICase1_16.key2(byteArray88, 0);
        staticSaltsABICase1_1.key2(byteArray88, 100);
        staticSaltsABICase1_0.key2(byteArray88, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_50.key2(byteArray69, (int) 'a');
        staticSaltsABICase1_42.key2(byteArray69, 100);
        staticSaltsABICase1_0.key2(byteArray69, (int) ' ');
        byte[] byteArray78 = null;
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass88 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_20.key2(byteArray30, 0);
        staticSaltsABICase1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABICase1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_49.key2(byteArray67, 100);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_49.key2(byteArray80, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray80, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray93 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_90.key2(byteArray93, 10);
        staticSaltsABICase1_85.key2(byteArray93, 10);
        staticSaltsABICase1_0.key2(byteArray93, 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray37, 10);
        staticSaltsABICase1_29.key2(byteArray37, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_42.key2(byteArray61, (int) 'a');
        staticSaltsABICase1_29.key2(byteArray61, 1);
        staticSaltsABICase1_28.key2(byteArray61, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray61, 1);
        java.lang.Class<?> wildcardClass72 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABICase1_31.key2(byteArray47, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_71.key2(byteArray81, 0);
        staticSaltsABICase1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABICase1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABICase1_31.key2(byteArray81, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray81, (int) '4');
        java.lang.Class<?> wildcardClass94 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABICase1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, 10);
        java.lang.Class<?> wildcardClass11 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_67.key2(byteArray84, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_89.key2(byteArray92, 10);
        staticSaltsABICase1_67.key2(byteArray92, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray92, (int) ' ');
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_6.key2(byteArray17, (int) (short) 10);
        staticSaltsABICase1_1.key2(byteArray17, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_22.key2(byteArray40, 100);
        staticSaltsABICase1_1.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_1.key2(byteArray59, (int) '#');
        staticSaltsABICase1_0.key2(byteArray59, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_68.key2(byteArray79, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_82.key2(byteArray85, (int) (short) 0);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_82.key2(byteArray93, (int) (short) 10);
        staticSaltsABICase1_68.key2(byteArray93, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray93, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABICase1_43.key2(byteArray62, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray62, 100);
        byte[] byteArray69 = null;
        staticSaltsABICase1_35.key2(byteArray69, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_80.key2(byteArray83, (int) (short) 0);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_80.key2(byteArray91, (int) (short) 10);
        staticSaltsABICase1_72.key2(byteArray91, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray91, (int) '4');
        staticSaltsABICase1_0.key2(byteArray91, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABICase1_45.key2(byteArray56, 1);
        staticSaltsABICase1_0.key2(byteArray56, (int) 'a');
        java.lang.Class<?> wildcardClass65 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray58, (int) (byte) 100);
        java.lang.Class<?> wildcardClass65 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_26.key2(byteArray37, (int) (short) 10);
        staticSaltsABICase1_21.key2(byteArray37, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        staticSaltsABICase1_42.key2(byteArray60, 100);
        staticSaltsABICase1_21.key2(byteArray60, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 10 };
        staticSaltsABICase1_21.key2(byteArray70, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray70, (int) (byte) 100);
        byte[] byteArray75 = null;
        staticSaltsABICase1_0.key2(byteArray75, 100);
        java.lang.Class<?> wildcardClass78 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray15, (int) '#');
        staticSaltsABICase1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_27.key2(byteArray37, 0);
        staticSaltsABICase1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABICase1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABICase1_0.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray62, 10);
        staticSaltsABICase1_0.key2(byteArray62, (int) ' ');
        java.lang.Class<?> wildcardClass67 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray30, 10);
        staticSaltsABICase1_22.key2(byteArray30, 10);
        staticSaltsABICase1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_46.key2(byteArray56, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_61.key2(byteArray71, 0);
        staticSaltsABICase1_46.key2(byteArray71, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_86.key2(byteArray89, (int) (short) 0);
        staticSaltsABICase1_78.key2(byteArray89, 1);
        staticSaltsABICase1_46.key2(byteArray89, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray89, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_43.key2(byteArray54, (int) (short) 10);
        staticSaltsABICase1_42.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray67, 10);
        staticSaltsABICase1_59.key2(byteArray67, 10);
        staticSaltsABICase1_42.key2(byteArray67, (int) '4');
        staticSaltsABICase1_0.key2(byteArray67, (int) (short) 0);
        java.lang.Class<?> wildcardClass76 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABICase1_32.key2(byteArray57, (int) (short) -1);
        byte[] byteArray62 = null;
        staticSaltsABICase1_32.key2(byteArray62, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_65.key2(byteArray72, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_77.key2(byteArray89, (int) (short) 0);
        staticSaltsABICase1_65.key2(byteArray89, 0);
        staticSaltsABICase1_32.key2(byteArray89, (-1));
        staticSaltsABICase1_0.key2(byteArray89, (int) (byte) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_67.key2(byteArray84, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_89.key2(byteArray92, 10);
        staticSaltsABICase1_67.key2(byteArray92, (int) (short) 100);
        staticSaltsABICase1_0.key2(byteArray92, (int) ' ');
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_6.key2(byteArray16, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_6.key2(byteArray23, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray36, 10);
        staticSaltsABICase1_28.key2(byteArray36, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_41.key2(byteArray59, 100);
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_41.key2(byteArray72, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_75.key2(byteArray82, (int) (byte) 10);
        staticSaltsABICase1_41.key2(byteArray82, (int) (short) -1);
        staticSaltsABICase1_28.key2(byteArray82, (int) (byte) 1);
        staticSaltsABICase1_6.key2(byteArray82, 0);
        staticSaltsABICase1_0.key2(byteArray82, 100);
        java.lang.Class<?> wildcardClass95 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_26.key2(byteArray36, 0);
        staticSaltsABICase1_18.key2(byteArray36, 100);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_18.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_52.key2(byteArray63, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABICase1_52.key2(byteArray77, (int) (short) -1);
        staticSaltsABICase1_18.key2(byteArray77, (int) '4');
        staticSaltsABICase1_17.key2(byteArray77, (int) '4');
        staticSaltsABICase1_0.key2(byteArray77, (int) (byte) -1);
        java.lang.Class<?> wildcardClass88 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray73, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray73, 0);
        byte[] byteArray80 = null;
        staticSaltsABICase1_0.key2(byteArray80, (int) (byte) 0);
        java.lang.Class<?> wildcardClass83 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        staticSaltsABICase1_24.key2(byteArray42, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABICase1_57.key2(byteArray76, (int) 'a');
        staticSaltsABICase1_49.key2(byteArray76, 100);
        staticSaltsABICase1_24.key2(byteArray76, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_85.key2(byteArray88, (int) (short) 0);
        staticSaltsABICase1_24.key2(byteArray88, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray88, 100);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABICase1_0.key2(byteArray25, (int) (byte) 100);
        java.lang.Class<?> wildcardClass28 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_56.key2(byteArray67, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_75.key2(byteArray85, 0);
        staticSaltsABICase1_74.key2(byteArray85, (int) (byte) 1);
        staticSaltsABICase1_56.key2(byteArray85, (int) (byte) 0);
        staticSaltsABICase1_35.key2(byteArray85, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray85, 100);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        byte[] byteArray32 = null;
        staticSaltsABICase1_17.key2(byteArray32, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray67, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray67, 1);
        staticSaltsABICase1_17.key2(byteArray67, 0);
        staticSaltsABICase1_0.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray81, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_78.key2(byteArray86, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray86, (-1));
        java.lang.Class<?> wildcardClass93 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_67.key2(byteArray73, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 1);
        byte[] byteArray78 = null;
        staticSaltsABICase1_0.key2(byteArray78, 100);
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        staticSaltsABICase1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray65, 1);
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, 10);
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABICase1_45.key2(byteArray56, 1);
        staticSaltsABICase1_0.key2(byteArray56, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray68, 10);
        staticSaltsABICase1_0.key2(byteArray68, (int) '#');
        java.lang.Class<?> wildcardClass73 = byteArray68.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        staticSaltsABICase1_0.key2(byteArray47, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABICase1_54.key2(byteArray73, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_79.key2(byteArray89, 0);
        staticSaltsABICase1_78.key2(byteArray89, (int) (byte) 1);
        staticSaltsABICase1_54.key2(byteArray89, 1);
        staticSaltsABICase1_0.key2(byteArray89, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_34.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        staticSaltsABICase1_34.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray79, 10);
        staticSaltsABICase1_34.key2(byteArray79, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray79, (int) (short) -1);
        java.lang.Class<?> wildcardClass86 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABICase1_19.key2(byteArray38, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_11.key2(byteArray61, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray84, 10);
        staticSaltsABICase1_76.key2(byteArray84, 10);
        staticSaltsABICase1_68.key2(byteArray84, (int) (short) 1);
        staticSaltsABICase1_11.key2(byteArray84, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray84, (int) '#');
        java.lang.Class<?> wildcardClass95 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_42.key2(byteArray67, (int) 'a');
        byte[] byteArray74 = null;
        staticSaltsABICase1_42.key2(byteArray74, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_77.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_77.key2(byteArray87, 0);
        staticSaltsABICase1_42.key2(byteArray87, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) 10);
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_5.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_67.key2(byteArray73, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray89, 100);
        java.lang.Class<?> wildcardClass94 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_78.key2(byteArray88, 0);
        staticSaltsABICase1_70.key2(byteArray88, 100);
        staticSaltsABICase1_0.key2(byteArray88, 0);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        staticSaltsABICase1_32.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_32.key2(byteArray67, (int) (short) 0);
        staticSaltsABICase1_17.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray67, (int) ' ');
        byte[] byteArray78 = null;
        staticSaltsABICase1_0.key2(byteArray78, (int) (short) 10);
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABICase1_55.key2(byteArray74, (int) 'a');
        staticSaltsABICase1_47.key2(byteArray74, 100);
        staticSaltsABICase1_0.key2(byteArray74, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_0.key2(byteArray85, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_91 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticSaltsABICase1_91.key2(byteArray93, (int) '#');
        staticSaltsABICase1_90.key2(byteArray93, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray93, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABICase1_68.key2(byteArray87, (int) 'a');
        staticSaltsABICase1_60.key2(byteArray87, 100);
        staticSaltsABICase1_45.key2(byteArray87, (int) (byte) 10);
        staticSaltsABICase1_30.key2(byteArray87, 100);
        staticSaltsABICase1_0.key2(byteArray87, (int) (byte) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABICase1_19.key2(byteArray38, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_11.key2(byteArray61, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray84, 10);
        staticSaltsABICase1_76.key2(byteArray84, 10);
        staticSaltsABICase1_68.key2(byteArray84, (int) (short) 1);
        staticSaltsABICase1_11.key2(byteArray84, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray84, (int) '#');
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_40.key2(byteArray50, 0);
        staticSaltsABICase1_39.key2(byteArray50, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_57.key2(byteArray68, (int) (byte) 1);
        staticSaltsABICase1_39.key2(byteArray68, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray68, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 0);
        byte[] byteArray81 = null;
        staticSaltsABICase1_0.key2(byteArray81, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) 1);
        java.lang.Class<?> wildcardClass94 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray38, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_43.key2(byteArray53, 0);
        staticSaltsABICase1_13.key2(byteArray53, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_60.key2(byteArray70, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_60.key2(byteArray77, (-1));
        staticSaltsABICase1_13.key2(byteArray77, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass86 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        staticSaltsABICase1_32.key2(byteArray43, 1);
        staticSaltsABICase1_0.key2(byteArray43, (int) (byte) 0);
        java.lang.Class<?> wildcardClass52 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray52, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABICase1_33.key2(byteArray68, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_73.key2(byteArray89, (int) (byte) 0);
        staticSaltsABICase1_33.key2(byteArray89, 0);
        staticSaltsABICase1_28.key2(byteArray89, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray89, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray53, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray66, 10);
        staticSaltsABICase1_58.key2(byteArray66, 10);
        staticSaltsABICase1_37.key2(byteArray66, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray66, (int) 'a');
        java.lang.Class<?> wildcardClass75 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray22, 10);
        staticSaltsABICase1_14.key2(byteArray22, 10);
        staticSaltsABICase1_0.key2(byteArray22, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        byte[] byteArray44 = null;
        staticSaltsABICase1_29.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray55, 10);
        staticSaltsABICase1_47.key2(byteArray55, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_68.key2(byteArray79, (int) (short) 10);
        staticSaltsABICase1_60.key2(byteArray79, (int) 'a');
        staticSaltsABICase1_47.key2(byteArray79, 1);
        staticSaltsABICase1_29.key2(byteArray79, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray91 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_88.key2(byteArray91, 10);
        staticSaltsABICase1_29.key2(byteArray91, (int) '4');
        staticSaltsABICase1_0.key2(byteArray91, (int) '4');
        java.lang.Class<?> wildcardClass98 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_11.key2(byteArray22, (int) (short) 10);
        staticSaltsABICase1_6.key2(byteArray22, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_27.key2(byteArray45, 100);
        staticSaltsABICase1_6.key2(byteArray45, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABICase1_64.key2(byteArray83, (int) 'a');
        staticSaltsABICase1_56.key2(byteArray83, 100);
        staticSaltsABICase1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass92 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray37, (int) ' ');
        java.lang.Class<?> wildcardClass44 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray73, 10);
        staticSaltsABICase1_65.key2(byteArray73, 10);
        staticSaltsABICase1_57.key2(byteArray73, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray90, 10);
        staticSaltsABICase1_82.key2(byteArray90, 10);
        staticSaltsABICase1_0.key2(byteArray90, (int) (byte) 1);
        byte[] byteArray97 = null;
        staticSaltsABICase1_0.key2(byteArray97, (int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray38, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_43.key2(byteArray53, 0);
        staticSaltsABICase1_13.key2(byteArray53, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_60.key2(byteArray70, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_60.key2(byteArray77, (-1));
        staticSaltsABICase1_13.key2(byteArray77, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass86 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABICase1_29.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_50.key2(byteArray68, 100);
        staticSaltsABICase1_29.key2(byteArray68, (int) (short) 0);
        staticSaltsABICase1_5.key2(byteArray68, (-1));
        staticSaltsABICase1_0.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_82.key2(byteArray85, (int) (short) 0);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_82.key2(byteArray93, (int) (short) 10);
        staticSaltsABICase1_81.key2(byteArray93, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray93, (int) ' ');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray24, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_21.key2(byteArray29, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (short) 10);
        java.lang.Class<?> wildcardClass36 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABICase1_0.key2(byteArray30, (int) (short) 10);
        java.lang.Class<?> wildcardClass33 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray56, (int) (short) -1);
        byte[] byteArray63 = null;
        staticSaltsABICase1_0.key2(byteArray63, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_74.key2(byteArray84, 0);
        staticSaltsABICase1_66.key2(byteArray84, 100);
        byte[] byteArray91 = new byte[] {};
        staticSaltsABICase1_66.key2(byteArray91, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray91, (int) (byte) 10);
        java.lang.Class<?> wildcardClass96 = byteArray91.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray48, 1);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_57.key2(byteArray64, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        java.lang.Class<?> wildcardClass71 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_64.key2(byteArray74, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_64.key2(byteArray81, (-1));
        staticSaltsABICase1_0.key2(byteArray81, (int) '4');
        java.lang.Class<?> wildcardClass88 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        staticSaltsABICase1_14.key2(byteArray54, 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_14.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_64.key2(byteArray74, 0);
        staticSaltsABICase1_14.key2(byteArray74, 1);
        staticSaltsABICase1_0.key2(byteArray74, 0);
        byte[] byteArray83 = null;
        staticSaltsABICase1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass86 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_13.key2(byteArray30, (-1));
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_13.key2(byteArray40, 10);
        byte[] byteArray43 = null;
        staticSaltsABICase1_13.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        staticSaltsABICase1_46.key2(byteArray57, 1);
        staticSaltsABICase1_13.key2(byteArray57, (-1));
        staticSaltsABICase1_0.key2(byteArray57, (int) (byte) -1);
        java.lang.Class<?> wildcardClass68 = byteArray57.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, (int) '4');
        byte[] byteArray73 = null;
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 1);
        java.lang.Class<?> wildcardClass76 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABICase1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        staticSaltsABICase1_9.key2(byteArray20, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_32.key2(byteArray43, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_51.key2(byteArray61, 0);
        staticSaltsABICase1_50.key2(byteArray61, (int) (byte) 1);
        staticSaltsABICase1_32.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_27.key2(byteArray61, (-1));
        staticSaltsABICase1_9.key2(byteArray61, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABICase1_9.key2(byteArray77, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray77, (int) (byte) 1);
        java.lang.Class<?> wildcardClass86 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_14.key2(byteArray24, 0);
        staticSaltsABICase1_6.key2(byteArray24, 100);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_6.key2(byteArray37, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABICase1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABICase1_6.key2(byteArray65, (int) '4');
        staticSaltsABICase1_5.key2(byteArray65, (int) '4');
        staticSaltsABICase1_0.key2(byteArray65, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_76.key2(byteArray87, 1);
        staticSaltsABICase1_0.key2(byteArray87, (int) 'a');
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, 1);
        java.lang.Class<?> wildcardClass37 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABICase1_86.key2(byteArray88, (int) '#');
        staticSaltsABICase1_78.key2(byteArray88, 0);
        staticSaltsABICase1_70.key2(byteArray88, 100);
        staticSaltsABICase1_0.key2(byteArray88, 0);
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_13.key2(byteArray30, (-1));
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_13.key2(byteArray40, 10);
        byte[] byteArray43 = null;
        staticSaltsABICase1_13.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        staticSaltsABICase1_46.key2(byteArray57, 1);
        staticSaltsABICase1_13.key2(byteArray57, (-1));
        staticSaltsABICase1_0.key2(byteArray57, (int) (byte) -1);
        java.lang.Class<?> wildcardClass68 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_42.key2(byteArray52, 0);
        staticSaltsABICase1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray65, 1);
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, (int) (short) 1);
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABICase1_11.key2(byteArray13, (int) '#');
        staticSaltsABICase1_6.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray30, (int) (short) 0);
        staticSaltsABICase1_6.key2(byteArray30, 0);
        byte[] byteArray37 = null;
        staticSaltsABICase1_6.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        staticSaltsABICase1_40.key2(byteArray58, 100);
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_40.key2(byteArray71, (int) (byte) 1);
        staticSaltsABICase1_6.key2(byteArray71, 1);
        staticSaltsABICase1_0.key2(byteArray71, 0);
        java.lang.Class<?> wildcardClass78 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        byte[] byteArray53 = null;
        staticSaltsABICase1_0.key2(byteArray53, (int) (short) 1);
        byte[] byteArray56 = null;
        staticSaltsABICase1_0.key2(byteArray56, (int) (short) -1);
        java.lang.Class<?> wildcardClass59 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, (int) '4');
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABICase1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray57 = null;
        staticSaltsABICase1_0.key2(byteArray57, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_69.key2(byteArray79, 0);
        staticSaltsABICase1_68.key2(byteArray79, (int) (byte) 1);
        staticSaltsABICase1_60.key2(byteArray79, 0);
        staticSaltsABICase1_0.key2(byteArray79, (int) '4');
        java.lang.Class<?> wildcardClass90 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABICase1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABICase1_16.key2(byteArray35, (int) 'a');
        staticSaltsABICase1_8.key2(byteArray35, 100);
        byte[] byteArray42 = null;
        staticSaltsABICase1_8.key2(byteArray42, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_45.key2(byteArray52, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABICase1_57.key2(byteArray69, (int) (short) 0);
        staticSaltsABICase1_45.key2(byteArray69, 0);
        staticSaltsABICase1_8.key2(byteArray69, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray69, (int) (short) 100);
        java.lang.Class<?> wildcardClass80 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABICase1_0.key2(byteArray37, (int) ' ');
        java.lang.Class<?> wildcardClass40 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABICase1_11.key2(byteArray13, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray19, 10);
        staticSaltsABICase1_11.key2(byteArray19, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray43, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray43, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_11.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_11.key2(byteArray59, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray59, 0);
        java.lang.Class<?> wildcardClass66 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray29, 10);
        staticSaltsABICase1_21.key2(byteArray29, 10);
        staticSaltsABICase1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABICase1_36.key2(byteArray52, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_57.key2(byteArray74, (-1));
        staticSaltsABICase1_36.key2(byteArray74, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABICase1_36.key2(byteArray84, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray84, (int) 'a');
        byte[] byteArray93 = null;
        staticSaltsABICase1_0.key2(byteArray93, 100);
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABICase1_11.key2(byteArray13, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray19, 10);
        staticSaltsABICase1_11.key2(byteArray19, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABICase1_24.key2(byteArray43, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray43, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_11.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_11.key2(byteArray59, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray59, 0);
        java.lang.Class<?> wildcardClass66 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        staticSaltsABICase1_21.key2(byteArray39, 100);
        staticSaltsABICase1_0.key2(byteArray39, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 10 };
        staticSaltsABICase1_0.key2(byteArray49, (int) 'a');
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (byte) 100);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        byte[] byteArray67 = null;
        staticSaltsABICase1_0.key2(byteArray67, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_16.key2(byteArray26, 0);
        staticSaltsABICase1_1.key2(byteArray26, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        staticSaltsABICase1_1.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray46, 10);
        staticSaltsABICase1_1.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray51 = new byte[] {};
        staticSaltsABICase1_1.key2(byteArray51, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_62.key2(byteArray72, 0);
        staticSaltsABICase1_54.key2(byteArray72, 100);
        staticSaltsABICase1_1.key2(byteArray72, 0);
        staticSaltsABICase1_0.key2(byteArray72, (-1));
        java.lang.Class<?> wildcardClass83 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 0);
        java.lang.Class<?> wildcardClass53 = byteArray48.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_9.key2(byteArray19, 0);
        staticSaltsABICase1_1.key2(byteArray19, 100);
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_1.key2(byteArray32, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABICase1_35.key2(byteArray60, (int) (short) -1);
        staticSaltsABICase1_1.key2(byteArray60, (int) '4');
        staticSaltsABICase1_0.key2(byteArray60, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_70.key2(byteArray80, 0);
        staticSaltsABICase1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray80, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABICase1_90.key2(byteArray92, (int) '#');
        staticSaltsABICase1_89.key2(byteArray92, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray92, 100);
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        byte[] byteArray32 = null;
        staticSaltsABICase1_17.key2(byteArray32, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray67, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray67, 1);
        staticSaltsABICase1_17.key2(byteArray67, 0);
        staticSaltsABICase1_0.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray81, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_78.key2(byteArray86, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray86, (-1));
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABICase1_30.key2(byteArray49, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_17.key2(byteArray58, 0);
        byte[] byteArray63 = null;
        staticSaltsABICase1_17.key2(byteArray63, (int) (byte) -1);
        byte[] byteArray66 = null;
        staticSaltsABICase1_17.key2(byteArray66, (int) (byte) 1);
        byte[] byteArray69 = null;
        staticSaltsABICase1_17.key2(byteArray69, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_72.key2(byteArray79, (int) (byte) 10);
        staticSaltsABICase1_17.key2(byteArray79, (int) ' ');
        staticSaltsABICase1_0.key2(byteArray79, 100);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABICase1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray59, (int) '#');
        java.lang.Class<?> wildcardClass70 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray30, 10);
        staticSaltsABICase1_22.key2(byteArray30, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_43.key2(byteArray53, 0);
        staticSaltsABICase1_35.key2(byteArray53, 100);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_35.key2(byteArray66, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_69.key2(byteArray76, (int) (byte) 10);
        staticSaltsABICase1_35.key2(byteArray76, (int) (short) -1);
        staticSaltsABICase1_22.key2(byteArray76, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray76, 0);
        java.lang.Class<?> wildcardClass87 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABICase1_25.key2(byteArray44, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray44, 100);
        staticSaltsABICase1_0.key2(byteArray44, 0);
        byte[] byteArray53 = null;
        staticSaltsABICase1_0.key2(byteArray53, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_56.key2(byteArray63, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray63, 0);
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, (int) (short) 10);
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray47 = null;
        staticSaltsABICase1_39.key2(byteArray47, (int) (short) 100);
        byte[] byteArray50 = null;
        staticSaltsABICase1_39.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray69, 10);
        staticSaltsABICase1_61.key2(byteArray69, 10);
        staticSaltsABICase1_53.key2(byteArray69, (int) (short) 1);
        staticSaltsABICase1_39.key2(byteArray69, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray69, 1);
        java.lang.Class<?> wildcardClass80 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_13.key2(byteArray16, 10);
        staticSaltsABICase1_8.key2(byteArray16, 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        staticSaltsABICase1_44.key2(byteArray62, 100);
        staticSaltsABICase1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_73.key2(byteArray83, 0);
        staticSaltsABICase1_0.key2(byteArray83, (int) (byte) 0);
        java.lang.Class<?> wildcardClass90 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_55.key2(byteArray62, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray62, 100);
        java.lang.Class<?> wildcardClass69 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABICase1_29.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_50.key2(byteArray68, 100);
        staticSaltsABICase1_29.key2(byteArray68, (int) (short) 0);
        staticSaltsABICase1_5.key2(byteArray68, (-1));
        staticSaltsABICase1_0.key2(byteArray68, 0);
        byte[] byteArray81 = null;
        staticSaltsABICase1_0.key2(byteArray81, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray87, 10);
        staticSaltsABICase1_0.key2(byteArray87, (int) '#');
        java.lang.Class<?> wildcardClass92 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        staticSaltsABICase1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_17.key2(byteArray27, 0);
        byte[] byteArray32 = null;
        staticSaltsABICase1_17.key2(byteArray32, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray43, 10);
        staticSaltsABICase1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_48.key2(byteArray67, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray67, 1);
        staticSaltsABICase1_17.key2(byteArray67, 0);
        staticSaltsABICase1_0.key2(byteArray67, (int) 'a');
        java.lang.Class<?> wildcardClass78 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_47.key2(byteArray57, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_47.key2(byteArray64, (-1));
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABICase1_71.key2(byteArray73, (int) '#');
        staticSaltsABICase1_0.key2(byteArray73, (int) (short) 100);
        java.lang.Class<?> wildcardClass78 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, 0);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_21.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_74.key2(byteArray84, 0);
        staticSaltsABICase1_66.key2(byteArray84, 100);
        staticSaltsABICase1_45.key2(byteArray84, (int) (short) 0);
        staticSaltsABICase1_21.key2(byteArray84, 100);
        staticSaltsABICase1_0.key2(byteArray84, (int) (byte) 10);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray30, 10);
        staticSaltsABICase1_22.key2(byteArray30, 10);
        staticSaltsABICase1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_54.key2(byteArray64, 0);
        staticSaltsABICase1_46.key2(byteArray64, 100);
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 10);
        java.lang.Class<?> wildcardClass73 = byteArray64.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, 1);
        java.lang.Class<?> wildcardClass55 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABICase1_11.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_35.key2(byteArray46, (int) (short) 10);
        staticSaltsABICase1_11.key2(byteArray46, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABICase1_51.key2(byteArray67, (int) (byte) 0);
        staticSaltsABICase1_11.key2(byteArray67, 0);
        staticSaltsABICase1_0.key2(byteArray67, 0);
        java.lang.Class<?> wildcardClass76 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABICase1_43.key2(byteArray62, (int) 'a');
        staticSaltsABICase1_35.key2(byteArray62, 100);
        byte[] byteArray69 = null;
        staticSaltsABICase1_35.key2(byteArray69, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_72.key2(byteArray82, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_72.key2(byteArray89, (-1));
        staticSaltsABICase1_35.key2(byteArray89, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray89, (int) (byte) 10);
        java.lang.Class<?> wildcardClass98 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray72, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray72, (int) '#');
        java.lang.Class<?> wildcardClass79 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABICase1_7.key2(byteArray9, (int) '#');
        staticSaltsABICase1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_6.key2(byteArray16, 0);
        staticSaltsABICase1_5.key2(byteArray16, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        staticSaltsABICase1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_24.key2(byteArray34, 0);
        staticSaltsABICase1_23.key2(byteArray34, (int) (byte) 1);
        staticSaltsABICase1_5.key2(byteArray34, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_45.key2(byteArray62, (-1));
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_45.key2(byteArray72, 10);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) 100);
        byte[] byteArray77 = null;
        staticSaltsABICase1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass80 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_26.key2(byteArray36, 0);
        staticSaltsABICase1_18.key2(byteArray36, 100);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_18.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_52.key2(byteArray63, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABICase1_52.key2(byteArray77, (int) (short) -1);
        staticSaltsABICase1_18.key2(byteArray77, (int) '4');
        staticSaltsABICase1_17.key2(byteArray77, (int) '4');
        staticSaltsABICase1_0.key2(byteArray77, (int) (byte) -1);
        java.lang.Class<?> wildcardClass88 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABICase1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_35.key2(byteArray62, 10);
        staticSaltsABICase1_0.key2(byteArray62, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABICase1_82.key2(byteArray84, (int) '#');
        staticSaltsABICase1_67.key2(byteArray84, (-1));
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_67.key2(byteArray94, 10);
        staticSaltsABICase1_0.key2(byteArray94, (int) (short) 0);
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABICase1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABICase1_30.key2(byteArray49, (int) 'a');
        staticSaltsABICase1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_17.key2(byteArray58, 0);
        byte[] byteArray63 = null;
        staticSaltsABICase1_17.key2(byteArray63, (int) (byte) -1);
        byte[] byteArray66 = null;
        staticSaltsABICase1_17.key2(byteArray66, (int) (byte) 1);
        byte[] byteArray69 = null;
        staticSaltsABICase1_17.key2(byteArray69, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_72.key2(byteArray79, (int) (byte) 10);
        staticSaltsABICase1_17.key2(byteArray79, (int) ' ');
        staticSaltsABICase1_0.key2(byteArray79, 100);
        java.lang.Class<?> wildcardClass88 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABICase1_0.key2(byteArray13, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABICase1_16.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_16.key2(byteArray48, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_53.key2(byteArray70, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray78, 10);
        staticSaltsABICase1_53.key2(byteArray78, (int) (short) 100);
        staticSaltsABICase1_16.key2(byteArray78, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray78, 1);
        byte[] byteArray87 = null;
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) 100);
        java.lang.Class<?> wildcardClass90 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_13.key2(byteArray30, (-1));
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_13.key2(byteArray40, 10);
        byte[] byteArray43 = null;
        staticSaltsABICase1_13.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        staticSaltsABICase1_46.key2(byteArray57, 1);
        staticSaltsABICase1_13.key2(byteArray57, (-1));
        staticSaltsABICase1_0.key2(byteArray57, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_68.key2(byteArray79, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABICase1_83.key2(byteArray85, (int) '#');
        staticSaltsABICase1_82.key2(byteArray85, (int) (short) 0);
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_82.key2(byteArray93, (int) (short) 10);
        staticSaltsABICase1_68.key2(byteArray93, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray93, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray72, 10);
        staticSaltsABICase1_64.key2(byteArray72, 10);
        staticSaltsABICase1_50.key2(byteArray72, (int) (short) 10);
        byte[] byteArray83 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_50.key2(byteArray83, (int) (short) 0);
        staticSaltsABICase1_42.key2(byteArray83, 0);
        staticSaltsABICase1_34.key2(byteArray83, 0);
        staticSaltsABICase1_0.key2(byteArray83, 1);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABICase1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray59, (int) '#');
        java.lang.Class<?> wildcardClass70 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABICase1_0.key2(byteArray38, 100);
        byte[] byteArray41 = null;
        staticSaltsABICase1_0.key2(byteArray41, (int) (byte) 1);
        java.lang.Class<?> wildcardClass44 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABICase1_21.key2(byteArray23, (int) '#');
        staticSaltsABICase1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_13.key2(byteArray30, (-1));
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_13.key2(byteArray40, 10);
        byte[] byteArray43 = null;
        staticSaltsABICase1_13.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        staticSaltsABICase1_46.key2(byteArray57, 1);
        staticSaltsABICase1_13.key2(byteArray57, (-1));
        staticSaltsABICase1_0.key2(byteArray57, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        staticSaltsABICase1_68.key2(byteArray79, 1);
        staticSaltsABICase1_0.key2(byteArray79, (int) (byte) 1);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABICase1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABICase1_5.key2(byteArray61, 0);
        staticSaltsABICase1_0.key2(byteArray61, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABICase1_70.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) 0);
        java.lang.Class<?> wildcardClass89 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_40.key2(byteArray50, 0);
        staticSaltsABICase1_39.key2(byteArray50, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_57.key2(byteArray68, (int) (byte) 1);
        staticSaltsABICase1_39.key2(byteArray68, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray68, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray84, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_81.key2(byteArray89, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray89, (int) (short) -1);
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABICase1_53.key2(byteArray55, (int) '#');
        staticSaltsABICase1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_52.key2(byteArray62, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_52.key2(byteArray77, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray87, (int) '#');
        staticSaltsABICase1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_52.key2(byteArray87, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray87, (int) (short) -1);
        java.lang.Class<?> wildcardClass96 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray25, 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABICase1_32.key2(byteArray34, (int) '#');
        staticSaltsABICase1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_31.key2(byteArray41, 0);
        staticSaltsABICase1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABICase1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray59, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, (int) '4');
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABICase1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        staticSaltsABICase1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABICase1_18.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_40.key2(byteArray50, 0);
        staticSaltsABICase1_39.key2(byteArray50, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_57.key2(byteArray68, (int) (byte) 1);
        staticSaltsABICase1_39.key2(byteArray68, (int) (byte) 0);
        staticSaltsABICase1_18.key2(byteArray68, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray68, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray84, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABICase1_87.key2(byteArray89, (int) '#');
        staticSaltsABICase1_81.key2(byteArray89, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray89, (int) (short) -1);
        java.lang.Class<?> wildcardClass96 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        staticSaltsABICase1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABICase1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray69, (int) '#');
        staticSaltsABICase1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_66.key2(byteArray76, 0);
        staticSaltsABICase1_58.key2(byteArray76, 100);
        byte[] byteArray83 = new byte[] {};
        staticSaltsABICase1_58.key2(byteArray83, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray83, (int) (short) 10);
        java.lang.Class<?> wildcardClass88 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABICase1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABICase1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray44, (int) '#');
        staticSaltsABICase1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABICase1_33.key2(byteArray44, 1);
        staticSaltsABICase1_0.key2(byteArray44, (-1));
        java.lang.Class<?> wildcardClass53 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray58, (int) (byte) 100);
        byte[] byteArray65 = null;
        staticSaltsABICase1_0.key2(byteArray65, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_68.key2(byteArray71, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray71, (int) ' ');
        java.lang.Class<?> wildcardClass78 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray30, 10);
        staticSaltsABICase1_22.key2(byteArray30, 10);
        staticSaltsABICase1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_47.key2(byteArray58, (int) (short) 10);
        staticSaltsABICase1_46.key2(byteArray58, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray58, 0);
        java.lang.Class<?> wildcardClass65 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABICase1_34.key2(byteArray59, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray59, (int) '4');
        byte[] byteArray66 = null;
        staticSaltsABICase1_0.key2(byteArray66, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        staticSaltsABICase1_69.key2(byteArray72, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray72, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray82, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray92 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_89.key2(byteArray92, 10);
        staticSaltsABICase1_0.key2(byteArray92, (int) 'a');
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray50, 10);
        staticSaltsABICase1_0.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        staticSaltsABICase1_63.key2(byteArray66, (int) (short) 0);
        staticSaltsABICase1_55.key2(byteArray66, 1);
        staticSaltsABICase1_0.key2(byteArray66, (int) '4');
        java.lang.Class<?> wildcardClass75 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        staticSaltsABICase1_0.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray76, (int) '#');
        staticSaltsABICase1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABICase1_81.key2(byteArray83, (int) '#');
        staticSaltsABICase1_73.key2(byteArray83, 0);
        staticSaltsABICase1_65.key2(byteArray83, 100);
        byte[] byteArray90 = new byte[] {};
        staticSaltsABICase1_65.key2(byteArray90, (int) (byte) 100);
        staticSaltsABICase1_0.key2(byteArray90, (int) (short) 100);
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_48.key2(byteArray65, (-1));
        staticSaltsABICase1_0.key2(byteArray65, (int) (short) -1);
        byte[] byteArray72 = null;
        staticSaltsABICase1_0.key2(byteArray72, (int) ' ');
        byte[] byteArray75 = null;
        staticSaltsABICase1_0.key2(byteArray75, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray89, (-1));
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABICase1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        staticSaltsABICase1_14.key2(byteArray54, 0);
        staticSaltsABICase1_0.key2(byteArray54, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABICase1_63.key2(byteArray75, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray75, 1);
        byte[] byteArray82 = null;
        staticSaltsABICase1_0.key2(byteArray82, (int) (byte) 0);
        java.lang.Class<?> wildcardClass85 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_50.key2(byteArray61, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray72, 10);
        staticSaltsABICase1_64.key2(byteArray72, 10);
        staticSaltsABICase1_50.key2(byteArray72, (int) (short) 10);
        byte[] byteArray83 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_50.key2(byteArray83, (int) (short) 0);
        staticSaltsABICase1_42.key2(byteArray83, 0);
        staticSaltsABICase1_34.key2(byteArray83, 0);
        staticSaltsABICase1_0.key2(byteArray83, 1);
        java.lang.Class<?> wildcardClass92 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABICase1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray32, 10);
        staticSaltsABICase1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        staticSaltsABICase1_24.key2(byteArray56, 1);
        staticSaltsABICase1_0.key2(byteArray56, (int) (byte) 10);
        java.lang.Class<?> wildcardClass65 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        staticSaltsABICase1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABICase1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray61, 10);
        staticSaltsABICase1_0.key2(byteArray61, 1);
        java.lang.Class<?> wildcardClass66 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray56, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABICase1_37.key2(byteArray72, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray72, (int) '#');
        java.lang.Class<?> wildcardClass79 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray7, (int) '#');
        staticSaltsABICase1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABICase1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        staticSaltsABICase1_35.key2(byteArray45, 0);
        staticSaltsABICase1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABICase1_61.key2(byteArray63, (int) '#');
        staticSaltsABICase1_53.key2(byteArray63, 0);
        staticSaltsABICase1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABICase1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABICase1_0.key2(byteArray63, (int) (byte) 1);
        java.lang.Class<?> wildcardClass74 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABICase1_15.key2(byteArray17, (int) '#');
        staticSaltsABICase1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABICase1_0.key2(byteArray47, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_50.key2(byteArray60, 0);
        staticSaltsABICase1_0.key2(byteArray60, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABICase1_67.key2(byteArray86, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass93 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABICase1_31.key2(byteArray33, (int) '#');
        staticSaltsABICase1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_30.key2(byteArray40, 0);
        staticSaltsABICase1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABICase1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray60, 10);
        staticSaltsABICase1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABICase1_0.key2(byteArray60, 100);
        byte[] byteArray67 = null;
        staticSaltsABICase1_0.key2(byteArray67, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABICase1_0.key2(byteArray70, 100);
        java.lang.Class<?> wildcardClass73 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_11.key2(byteArray22, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABICase1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray33, 10);
        staticSaltsABICase1_25.key2(byteArray33, 10);
        staticSaltsABICase1_11.key2(byteArray33, (int) (short) 10);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_11.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABICase1_48.key2(byteArray50, (int) '#');
        staticSaltsABICase1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray55 = null;
        staticSaltsABICase1_47.key2(byteArray55, (int) (short) 100);
        byte[] byteArray58 = null;
        staticSaltsABICase1_47.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_74.key2(byteArray77, 10);
        staticSaltsABICase1_69.key2(byteArray77, 10);
        staticSaltsABICase1_61.key2(byteArray77, (int) (short) 1);
        staticSaltsABICase1_47.key2(byteArray77, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray77, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray77, (int) (short) 10);
        java.lang.Class<?> wildcardClass90 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABICase1_54.key2(byteArray56, (int) '#');
        staticSaltsABICase1_46.key2(byteArray56, 0);
        staticSaltsABICase1_38.key2(byteArray56, 100);
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_38.key2(byteArray69, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_72.key2(byteArray79, (int) (byte) 10);
        staticSaltsABICase1_38.key2(byteArray79, (int) (short) -1);
        staticSaltsABICase1_0.key2(byteArray79, (int) (byte) 0);
        java.lang.Class<?> wildcardClass88 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABICase1_10.key2(byteArray12, (int) '#');
        staticSaltsABICase1_9.key2(byteArray12, (int) (short) 0);
        staticSaltsABICase1_1.key2(byteArray12, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_25.key2(byteArray35, 0);
        staticSaltsABICase1_24.key2(byteArray35, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_43.key2(byteArray53, 0);
        staticSaltsABICase1_42.key2(byteArray53, (int) (byte) 1);
        staticSaltsABICase1_24.key2(byteArray53, (int) (byte) 0);
        staticSaltsABICase1_19.key2(byteArray53, (-1));
        staticSaltsABICase1_1.key2(byteArray53, (int) '4');
        staticSaltsABICase1_0.key2(byteArray53, (int) 'a');
        byte[] byteArray68 = null;
        staticSaltsABICase1_0.key2(byteArray68, (int) (short) 0);
        java.lang.Class<?> wildcardClass71 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABICase1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray37, (int) '#');
        staticSaltsABICase1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABICase1_29.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABICase1_51.key2(byteArray53, (int) '#');
        staticSaltsABICase1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABICase1_59.key2(byteArray61, (int) '#');
        staticSaltsABICase1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_58.key2(byteArray68, 0);
        staticSaltsABICase1_50.key2(byteArray68, 100);
        staticSaltsABICase1_29.key2(byteArray68, (int) (short) 0);
        staticSaltsABICase1_5.key2(byteArray68, (-1));
        staticSaltsABICase1_0.key2(byteArray68, 0);
        byte[] byteArray81 = null;
        staticSaltsABICase1_0.key2(byteArray81, (int) (byte) -1);
        java.lang.Class<?> wildcardClass84 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_37.key2(byteArray54, (-1));
        staticSaltsABICase1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABICase1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_67.key2(byteArray70, 10);
        staticSaltsABICase1_0.key2(byteArray70, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABICase1_77.key2(byteArray79, (int) '#');
        staticSaltsABICase1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABICase1_84.key2(byteArray86, (int) '#');
        staticSaltsABICase1_76.key2(byteArray86, 0);
        staticSaltsABICase1_75.key2(byteArray86, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass95 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray27 = null;
        staticSaltsABICase1_19.key2(byteArray27, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        staticSaltsABICase1_30.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABICase1_43.key2(byteArray62, (int) 'a');
        staticSaltsABICase1_30.key2(byteArray62, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_30.key2(byteArray71, 0);
        staticSaltsABICase1_19.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        staticSaltsABICase1_19.key2(byteArray81, (int) (byte) 0);
        staticSaltsABICase1_11.key2(byteArray81, (-1));
        staticSaltsABICase1_0.key2(byteArray81, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_92 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray95 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_92.key2(byteArray95, 10);
        staticSaltsABICase1_0.key2(byteArray95, (int) (short) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABICase1_19.key2(byteArray38, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray38, 100);
        byte[] byteArray45 = null;
        staticSaltsABICase1_11.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_48.key2(byteArray65, (-1));
        staticSaltsABICase1_11.key2(byteArray65, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray88, 10);
        staticSaltsABICase1_80.key2(byteArray88, 10);
        staticSaltsABICase1_72.key2(byteArray88, (int) (short) 1);
        staticSaltsABICase1_11.key2(byteArray88, (int) '#');
        staticSaltsABICase1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABICase1_28.key2(byteArray30, (int) '#');
        staticSaltsABICase1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABICase1_19.key2(byteArray38, (int) 'a');
        staticSaltsABICase1_11.key2(byteArray38, 100);
        byte[] byteArray45 = null;
        staticSaltsABICase1_11.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABICase1_63.key2(byteArray65, (int) '#');
        staticSaltsABICase1_48.key2(byteArray65, (-1));
        staticSaltsABICase1_11.key2(byteArray65, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABICase1_73.key2(byteArray75, (int) '#');
        staticSaltsABICase1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_85.key2(byteArray88, 10);
        staticSaltsABICase1_80.key2(byteArray88, 10);
        staticSaltsABICase1_72.key2(byteArray88, (int) (short) 1);
        staticSaltsABICase1_11.key2(byteArray88, (int) '#');
        staticSaltsABICase1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABICase1_8.key2(byteArray10, (int) '#');
        staticSaltsABICase1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABICase1_23.key2(byteArray25, (int) '#');
        staticSaltsABICase1_15.key2(byteArray25, 0);
        staticSaltsABICase1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABICase1_33.key2(byteArray35, (int) '#');
        staticSaltsABICase1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_42.key2(byteArray45, 10);
        staticSaltsABICase1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABICase1_0.key2(byteArray50, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABICase1_55.key2(byteArray57, (int) '#');
        staticSaltsABICase1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABICase1_53.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABICase1_70.key2(byteArray72, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray78, 10);
        staticSaltsABICase1_70.key2(byteArray78, 10);
        staticSaltsABICase1_53.key2(byteArray78, (int) '4');
        staticSaltsABICase1_0.key2(byteArray78, (-1));
        java.lang.Class<?> wildcardClass87 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray22, 10);
        staticSaltsABICase1_14.key2(byteArray22, 10);
        staticSaltsABICase1_0.key2(byteArray22, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        staticSaltsABICase1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABICase1_37.key2(byteArray39, (int) '#');
        staticSaltsABICase1_29.key2(byteArray39, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABICase1_45.key2(byteArray47, (int) '#');
        staticSaltsABICase1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_44.key2(byteArray54, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABICase1_60.key2(byteArray62, (int) '#');
        staticSaltsABICase1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABICase1_76.key2(byteArray78, (int) '#');
        staticSaltsABICase1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABICase1_67.key2(byteArray86, (int) 'a');
        staticSaltsABICase1_59.key2(byteArray86, 100);
        staticSaltsABICase1_44.key2(byteArray86, (int) (byte) 10);
        staticSaltsABICase1_29.key2(byteArray86, 100);
        staticSaltsABICase1_0.key2(byteArray86, (int) (byte) 0);
        java.lang.Class<?> wildcardClass99 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        staticSaltsABICase1_30.key2(byteArray38, 10);
        staticSaltsABICase1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABICase1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABICase1_8.key2(byteArray49, 0);
        staticSaltsABICase1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABICase1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray72, 10);
        staticSaltsABICase1_64.key2(byteArray72, 10);
        staticSaltsABICase1_56.key2(byteArray72, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray72, (int) (byte) -1);
        java.lang.Class<?> wildcardClass81 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_5.key2(byteArray8, 10);
        staticSaltsABICase1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABICase1_14.key2(byteArray16, (int) '#');
        staticSaltsABICase1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABICase1_13.key2(byteArray32, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABICase1_39.key2(byteArray41, (int) '#');
        staticSaltsABICase1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABICase1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABICase1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABICase1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray58, (int) (byte) 100);
        byte[] byteArray65 = null;
        staticSaltsABICase1_0.key2(byteArray65, (int) (byte) 0);
        java.lang.Class<?> wildcardClass68 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABICase1_22.key2(byteArray24, (int) '#');
        staticSaltsABICase1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABICase1_29.key2(byteArray31, (int) '#');
        staticSaltsABICase1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABICase1_36.key2(byteArray38, (int) '#');
        staticSaltsABICase1_21.key2(byteArray38, (-1));
        staticSaltsABICase1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) 1);
        byte[] byteArray55 = null;
        staticSaltsABICase1_0.key2(byteArray55, (int) (byte) 1);
        byte[] byteArray58 = null;
        staticSaltsABICase1_0.key2(byteArray58, (int) (byte) 10);
        java.lang.Class<?> wildcardClass61 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABICase1_0.key2(byteArray25, (int) (short) -1);
        java.lang.Class<?> wildcardClass28 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABICase1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABICase1_12.key2(byteArray14, (int) '#');
        staticSaltsABICase1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray27 = null;
        staticSaltsABICase1_19.key2(byteArray27, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABICase1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_35.key2(byteArray38, 10);
        staticSaltsABICase1_30.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABICase1_44.key2(byteArray46, (int) '#');
        staticSaltsABICase1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABICase1_52.key2(byteArray54, (int) '#');
        staticSaltsABICase1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABICase1_43.key2(byteArray62, (int) 'a');
        staticSaltsABICase1_30.key2(byteArray62, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABICase1_69.key2(byteArray71, (int) '#');
        staticSaltsABICase1_30.key2(byteArray71, 0);
        staticSaltsABICase1_19.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABICase1_79.key2(byteArray81, (int) '#');
        staticSaltsABICase1_78.key2(byteArray81, (int) (short) 0);
        staticSaltsABICase1_19.key2(byteArray81, (int) (byte) 0);
        staticSaltsABICase1_11.key2(byteArray81, (-1));
        staticSaltsABICase1_0.key2(byteArray81, 100);
        java.lang.Class<?> wildcardClass92 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABICase1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABICase1_6.key2(byteArray8, (int) '#');
        staticSaltsABICase1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABICase1_0.key2(byteArray16, (int) (byte) 0);
        byte[] byteArray21 = null;
        staticSaltsABICase1_0.key2(byteArray21, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        staticSaltsABICase1_25.key2(byteArray36, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABICase1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABICase1_50.key2(byteArray52, (int) '#');
        staticSaltsABICase1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        staticSaltsABICase1_49.key2(byteArray59, 0);
        staticSaltsABICase1_48.key2(byteArray59, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABICase1_68.key2(byteArray70, (int) '#');
        staticSaltsABICase1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray77, (int) '#');
        staticSaltsABICase1_67.key2(byteArray77, 0);
        staticSaltsABICase1_66.key2(byteArray77, (int) (byte) 1);
        staticSaltsABICase1_48.key2(byteArray77, (int) (byte) 0);
        staticSaltsABICase1_43.key2(byteArray77, (-1));
        staticSaltsABICase1_25.key2(byteArray77, (int) '4');
        staticSaltsABICase1_24.key2(byteArray77, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray77, 0);
        java.lang.Class<?> wildcardClass94 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABICase1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABICase1_19.key2(byteArray21, (int) '#');
        staticSaltsABICase1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_18.key2(byteArray28, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABICase1_49.key2(byteArray51, (int) '#');
        staticSaltsABICase1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABICase1_56.key2(byteArray58, (int) '#');
        staticSaltsABICase1_48.key2(byteArray58, 0);
        staticSaltsABICase1_33.key2(byteArray58, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABICase1_66.key2(byteArray68, (int) '#');
        staticSaltsABICase1_65.key2(byteArray68, (int) (short) 0);
        staticSaltsABICase1_33.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABICase1_75.key2(byteArray78, 10);
        staticSaltsABICase1_33.key2(byteArray78, (int) (byte) -1);
        staticSaltsABICase1_18.key2(byteArray78, 100);
        staticSaltsABICase1_0.key2(byteArray78, 0);
        java.lang.Class<?> wildcardClass87 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABICase1_2.key2(byteArray4, (int) '#');
        staticSaltsABICase1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_1.key2(byteArray11, 0);
        staticSaltsABICase1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABICase1_20.key2(byteArray22, (int) '#');
        staticSaltsABICase1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABICase1_27.key2(byteArray29, (int) '#');
        staticSaltsABICase1_19.key2(byteArray29, 0);
        staticSaltsABICase1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABICase1_40.key2(byteArray42, (int) '#');
        staticSaltsABICase1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABICase1_47.key2(byteArray49, (int) '#');
        staticSaltsABICase1_39.key2(byteArray49, 0);
        staticSaltsABICase1_38.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABICase1_58.key2(byteArray60, (int) '#');
        staticSaltsABICase1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABICase1_65.key2(byteArray67, (int) '#');
        staticSaltsABICase1_57.key2(byteArray67, 0);
        staticSaltsABICase1_56.key2(byteArray67, (int) (byte) 1);
        staticSaltsABICase1_38.key2(byteArray67, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABICase1_78.key2(byteArray80, (int) '#');
        staticSaltsABICase1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABICase1_76.key2(byteArray88, (int) (short) 0);
        staticSaltsABICase1_38.key2(byteArray88, (int) (short) 1);
        staticSaltsABICase1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABICase1_16.key2(byteArray18, (int) '#');
        staticSaltsABICase1_8.key2(byteArray18, 0);
        staticSaltsABICase1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABICase1_26.key2(byteArray28, (int) '#');
        staticSaltsABICase1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABICase1_34.key2(byteArray36, (int) '#');
        staticSaltsABICase1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABICase1_41.key2(byteArray43, (int) '#');
        staticSaltsABICase1_33.key2(byteArray43, 0);
        staticSaltsABICase1_25.key2(byteArray43, 100);
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABICase1_25.key2(byteArray56, (int) (byte) 1);
        staticSaltsABICase1_0.key2(byteArray56, (int) (byte) 10);
        java.lang.Class<?> wildcardClass61 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABICase1_1.key2(byteArray3, (int) '#');
        staticSaltsABICase1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABICase1_9.key2(byteArray11, (int) '#');
        staticSaltsABICase1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABICase1_17.key2(byteArray19, (int) '#');
        staticSaltsABICase1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABICase1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABICase1_8.key2(byteArray27, (int) 'a');
        staticSaltsABICase1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABICase1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABICase1_38.key2(byteArray40, (int) '#');
        staticSaltsABICase1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABICase1_46.key2(byteArray48, (int) '#');
        staticSaltsABICase1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABICase1_37.key2(byteArray48, 1);
        staticSaltsABICase1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABICase1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABICase1_62.key2(byteArray64, (int) '#');
        staticSaltsABICase1_57.key2(byteArray64, (int) (byte) 10);
        staticSaltsABICase1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABICase1_72.key2(byteArray74, (int) '#');
        staticSaltsABICase1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABICase1 staticSaltsABICase1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABICase1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABICase1_80.key2(byteArray82, (int) '#');
        staticSaltsABICase1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABICase1_71.key2(byteArray82, 1);
        staticSaltsABICase1_0.key2(byteArray82, 0);
        java.lang.Class<?> wildcardClass91 = staticSaltsABICase1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }
}

