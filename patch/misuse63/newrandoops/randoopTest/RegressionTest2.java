package randoopTest;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_21.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_66.key2(byteArray84, 100);
        staticSaltsABMC1_45.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_21.key2(byteArray84, 100);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 10);
        java.lang.Class<?> wildcardClass97 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) -1);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, 10);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray56, 1);
        staticSaltsABMC1_0.key2(byteArray56, (int) 'a');
        java.lang.Class<?> wildcardClass65 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_28.key2(byteArray35, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        staticSaltsABMC1_40.key2(byteArray65, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_28.key2(byteArray75, 10);
        staticSaltsABMC1_0.key2(byteArray75, (int) '4');
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray55, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray55, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_70.key2(byteArray89, (int) 'a');
        staticSaltsABMC1_62.key2(byteArray89, 100);
        staticSaltsABMC1_0.key2(byteArray89, 1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray50, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABMC1_53.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray78, 10);
        staticSaltsABMC1_70.key2(byteArray78, 10);
        staticSaltsABMC1_53.key2(byteArray78, (int) '4');
        staticSaltsABMC1_0.key2(byteArray78, (-1));
        java.lang.Class<?> wildcardClass87 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_0.key2(byteArray55, (int) (byte) 10);
        java.lang.Class<?> wildcardClass60 = byteArray55.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_21.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_66.key2(byteArray84, 100);
        staticSaltsABMC1_45.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_21.key2(byteArray84, 100);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 10);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray30, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_35.key2(byteArray53, 100);
        staticSaltsABMC1_14.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_62.key2(byteArray80, 100);
        staticSaltsABMC1_14.key2(byteArray80, (-1));
        staticSaltsABMC1_0.key2(byteArray80, 10);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, 0);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, 10);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray52, 10);
        staticSaltsABMC1_44.key2(byteArray52, 10);
        staticSaltsABMC1_30.key2(byteArray52, (int) (short) 10);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_30.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_22.key2(byteArray63, 0);
        staticSaltsABMC1_14.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray86, 10);
        staticSaltsABMC1_78.key2(byteArray86, 10);
        staticSaltsABMC1_70.key2(byteArray86, (int) (short) 1);
        staticSaltsABMC1_14.key2(byteArray86, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) 100);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray44 = null;
        staticSaltsABMC1_36.key2(byteArray44, (int) (short) 100);
        byte[] byteArray47 = null;
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_50.key2(byteArray66, (int) (short) 1);
        staticSaltsABMC1_36.key2(byteArray66, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) -1);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray70, 10);
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_75.key2(byteArray86, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray57, 1);
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_66.key2(byteArray73, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 100);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) (byte) 100);
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) '#');
        java.lang.Class<?> wildcardClass68 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_68.key2(byteArray79, (int) (byte) 1);
        staticSaltsABMC1_60.key2(byteArray79, 0);
        staticSaltsABMC1_0.key2(byteArray79, (int) '4');
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray41, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_46.key2(byteArray64, 100);
        staticSaltsABMC1_25.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_75.key2(byteArray82, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray82, 1);
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) -1, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray92, (int) (byte) 10);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_55.key2(byteArray62, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray62, 100);
        java.lang.Class<?> wildcardClass69 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 10);
        byte[] byteArray62 = null;
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        java.lang.Class<?> wildcardClass65 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray26 = null;
        staticSaltsABMC1_18.key2(byteArray26, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray37, 10);
        staticSaltsABMC1_29.key2(byteArray37, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_29.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_29.key2(byteArray70, 0);
        staticSaltsABMC1_18.key2(byteArray70, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray80, (int) ' ');
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        staticSaltsABMC1_35.key2(byteArray60, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        staticSaltsABMC1_35.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_35.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray88, (int) '#');
        java.lang.Class<?> wildcardClass95 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray17, 10);
        staticSaltsABMC1_9.key2(byteArray17, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        staticSaltsABMC1_9.key2(byteArray41, 1);
        staticSaltsABMC1_0.key2(byteArray41, (-1));
        java.lang.Class<?> wildcardClass50 = byteArray41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        byte[] byteArray44 = null;
        staticSaltsABMC1_29.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray55, 10);
        staticSaltsABMC1_47.key2(byteArray55, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_68.key2(byteArray79, (int) (short) 10);
        staticSaltsABMC1_60.key2(byteArray79, (int) 'a');
        staticSaltsABMC1_47.key2(byteArray79, 1);
        staticSaltsABMC1_29.key2(byteArray79, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray91, 10);
        staticSaltsABMC1_29.key2(byteArray91, (int) '4');
        staticSaltsABMC1_0.key2(byteArray91, (int) '4');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        byte[] byteArray25 = null;
        staticSaltsABMC1_11.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray44, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_49.key2(byteArray67, 100);
        staticSaltsABMC1_28.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_28.key2(byteArray86, (int) '#');
        staticSaltsABMC1_11.key2(byteArray86, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 100);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        staticSaltsABMC1_6.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray30, (int) (short) 0);
        staticSaltsABMC1_6.key2(byteArray30, 0);
        byte[] byteArray37 = null;
        staticSaltsABMC1_6.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        staticSaltsABMC1_40.key2(byteArray51, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_59.key2(byteArray69, 0);
        staticSaltsABMC1_58.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray69, (int) (byte) 0);
        staticSaltsABMC1_6.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray69, 0);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_13.key2(byteArray30, (-1));
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_13.key2(byteArray40, 10);
        byte[] byteArray43 = null;
        staticSaltsABMC1_13.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        staticSaltsABMC1_46.key2(byteArray57, 1);
        staticSaltsABMC1_13.key2(byteArray57, (-1));
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        staticSaltsABMC1_68.key2(byteArray79, 1);
        staticSaltsABMC1_0.key2(byteArray79, (int) (byte) 1);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (short) -1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray24, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_21.key2(byteArray29, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 10);
        java.lang.Class<?> wildcardClass36 = byteArray29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray56, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_72.key2(byteArray82, 0);
        staticSaltsABMC1_71.key2(byteArray82, (int) (byte) 1);
        staticSaltsABMC1_63.key2(byteArray82, 0);
        staticSaltsABMC1_0.key2(byteArray82, 0);
        java.lang.Class<?> wildcardClass93 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_44.key2(byteArray54, 0);
        staticSaltsABMC1_14.key2(byteArray54, 0);
        staticSaltsABMC1_0.key2(byteArray54, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABMC1_63.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray75, 1);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) 1);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_55.key2(byteArray62, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        java.lang.Class<?> wildcardClass69 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_56.key2(byteArray63, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray63, 0);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray55, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray55, (int) '4');
        byte[] byteArray62 = null;
        staticSaltsABMC1_0.key2(byteArray62, 1);
        java.lang.Class<?> wildcardClass65 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray24, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_29.key2(byteArray46, (-1));
        staticSaltsABMC1_8.key2(byteArray46, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray56, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_63.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_8.key2(byteArray88, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray63, 10);
        staticSaltsABMC1_55.key2(byteArray63, 10);
        staticSaltsABMC1_34.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_70.key2(byteArray89, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray89, (int) '4');
        staticSaltsABMC1_0.key2(byteArray89, 100);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) (byte) 1);
        java.lang.Class<?> wildcardClass74 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        byte[] byteArray55 = new byte[] {};
        staticSaltsABMC1_30.key2(byteArray55, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray55, (int) (short) 10);
        java.lang.Class<?> wildcardClass60 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray28, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        java.lang.Class<?> wildcardClass51 = byteArray44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray37, 10);
        staticSaltsABMC1_29.key2(byteArray37, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_29.key2(byteArray61, 1);
        staticSaltsABMC1_28.key2(byteArray61, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_73.key2(byteArray83, 0);
        staticSaltsABMC1_72.key2(byteArray83, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray17, 10);
        staticSaltsABMC1_9.key2(byteArray17, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        staticSaltsABMC1_9.key2(byteArray41, 1);
        staticSaltsABMC1_0.key2(byteArray41, (-1));
        byte[] byteArray50 = null;
        staticSaltsABMC1_0.key2(byteArray50, (int) '#');
        java.lang.Class<?> wildcardClass53 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_39.key2(byteArray49, 0);
        staticSaltsABMC1_38.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_56.key2(byteArray67, (int) (byte) 1);
        staticSaltsABMC1_38.key2(byteArray67, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_76.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_38.key2(byteArray88, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABMC1_42.key2(byteArray53, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_60.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray85, 10);
        staticSaltsABMC1_77.key2(byteArray85, 10);
        staticSaltsABMC1_60.key2(byteArray85, (int) '4');
        staticSaltsABMC1_42.key2(byteArray85, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) 'a');
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_39.key2(byteArray57, 100);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_39.key2(byteArray70, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_39.key2(byteArray80, (int) (short) -1);
        staticSaltsABMC1_22.key2(byteArray80, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) -1);
        java.lang.Class<?> wildcardClass91 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_25.key2(byteArray43, 100);
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_25.key2(byteArray56, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray56, (int) (byte) 10);
        java.lang.Class<?> wildcardClass61 = byteArray56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        byte[] byteArray25 = null;
        staticSaltsABMC1_11.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_28.key2(byteArray44, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_49.key2(byteArray67, 100);
        staticSaltsABMC1_28.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_28.key2(byteArray86, (int) '#');
        staticSaltsABMC1_11.key2(byteArray86, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 100);
        java.lang.Class<?> wildcardClass97 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        staticSaltsABMC1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABMC1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray61, 10);
        staticSaltsABMC1_0.key2(byteArray61, 1);
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, (-1));
        java.lang.Class<?> wildcardClass69 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_74.key2(byteArray85, 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 10);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) (byte) 0);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) (byte) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_43.key2(byteArray61, 100);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_43.key2(byteArray74, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_77.key2(byteArray84, (int) (byte) 10);
        staticSaltsABMC1_43.key2(byteArray84, (int) (short) -1);
        staticSaltsABMC1_30.key2(byteArray84, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray84, 100);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABMC1_42.key2(byteArray53, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_60.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray85, 10);
        staticSaltsABMC1_77.key2(byteArray85, 10);
        staticSaltsABMC1_60.key2(byteArray85, (int) '4');
        staticSaltsABMC1_42.key2(byteArray85, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) 'a');
        java.lang.Class<?> wildcardClass96 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_24.key2(byteArray59, 1);
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) 10);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, 0);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray59, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray59, (int) '4');
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) 0);
        java.lang.Class<?> wildcardClass89 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        staticSaltsABMC1_0.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) '4');
        java.lang.Class<?> wildcardClass67 = byteArray62.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_50.key2(byteArray57, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray74, 0);
        byte[] byteArray81 = null;
        staticSaltsABMC1_50.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray87, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray87, (-1));
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) '4');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_43.key2(byteArray54, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray67, 10);
        staticSaltsABMC1_59.key2(byteArray67, 10);
        staticSaltsABMC1_42.key2(byteArray67, (int) '4');
        staticSaltsABMC1_0.key2(byteArray67, (int) (short) 0);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_30.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray36, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_41.key2(byteArray49, (int) (short) 100);
        byte[] byteArray52 = null;
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 0);
        byte[] byteArray55 = null;
        staticSaltsABMC1_41.key2(byteArray55, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_58.key2(byteArray83, (int) (short) 100);
        staticSaltsABMC1_41.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) -1);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_55.key2(byteArray66, 1);
        staticSaltsABMC1_0.key2(byteArray66, (int) '4');
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_18.key2(byteArray28, 0);
        staticSaltsABMC1_17.key2(byteArray28, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        staticSaltsABMC1_35.key2(byteArray46, (int) (byte) 1);
        staticSaltsABMC1_17.key2(byteArray46, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray67, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray67, (int) ' ');
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_35.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, 100);
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        java.lang.Class<?> wildcardClass78 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray22 = null;
        staticSaltsABMC1_14.key2(byteArray22, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray57, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_25.key2(byteArray66, 0);
        staticSaltsABMC1_14.key2(byteArray66, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_14.key2(byteArray76, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 10);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        staticSaltsABMC1_48.key2(byteArray73, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_82.key2(byteArray89, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray89, (-1));
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, 0);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        staticSaltsABMC1_6.key2(byteArray22, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_27.key2(byteArray45, 100);
        staticSaltsABMC1_6.key2(byteArray45, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_56.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, 0);
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_49.key2(byteArray67, 100);
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_49.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 100);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 10);
        java.lang.Class<?> wildcardClass59 = byteArray52.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        staticSaltsABMC1_32.key2(byteArray43, 1);
        staticSaltsABMC1_0.key2(byteArray43, (int) (byte) 0);
        java.lang.Class<?> wildcardClass52 = byteArray43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_17.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        java.lang.Class<?> wildcardClass68 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) 'a');
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_32.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_32.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray79, (int) '#');
        staticSaltsABMC1_0.key2(byteArray79, (int) (byte) -1);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, (int) (short) 0);
        byte[] byteArray41 = null;
        staticSaltsABMC1_0.key2(byteArray41, (int) (byte) -1);
        java.lang.Class<?> wildcardClass44 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray57, 1);
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_66.key2(byteArray73, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 100);
        java.lang.Class<?> wildcardClass80 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_23.key2(byteArray50, 100);
        byte[] byteArray57 = null;
        staticSaltsABMC1_23.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_60.key2(byteArray77, (-1));
        staticSaltsABMC1_23.key2(byteArray77, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray77, 10);
        java.lang.Class<?> wildcardClass86 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_34.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_34.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) 10);
        byte[] byteArray78 = null;
        staticSaltsABMC1_0.key2(byteArray78, (int) (byte) 1);
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_22.key2(byteArray49, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray72, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray72, (-1));
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray34, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray47, 10);
        staticSaltsABMC1_39.key2(byteArray47, 10);
        staticSaltsABMC1_18.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray76, 10);
        staticSaltsABMC1_68.key2(byteArray76, 10);
        staticSaltsABMC1_54.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray76, (int) (short) 1);
        java.lang.Class<?> wildcardClass87 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_30.key2(byteArray57, 100);
        staticSaltsABMC1_15.key2(byteArray57, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray57, 100);
        byte[] byteArray68 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray68, (-1));
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, 0);
        java.lang.Class<?> wildcardClass74 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) -1, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray34, 10);
        java.lang.Class<?> wildcardClass37 = byteArray34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        staticSaltsABMC1_1.key2(byteArray26, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_1.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray51 = new byte[] {};
        staticSaltsABMC1_1.key2(byteArray51, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_1.key2(byteArray72, 0);
        staticSaltsABMC1_0.key2(byteArray72, (-1));
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray87, (-1));
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, 100);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray56, (int) (short) -1);
        byte[] byteArray63 = null;
        staticSaltsABMC1_0.key2(byteArray63, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_0.key2(byteArray76, (int) ' ');
        java.lang.Class<?> wildcardClass83 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) '#');
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, 100);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, 10);
        java.lang.Class<?> wildcardClass75 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_50.key2(byteArray66, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) 0);
        java.lang.Class<?> wildcardClass75 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, 100);
        byte[] byteArray41 = null;
        staticSaltsABMC1_0.key2(byteArray41, (int) (byte) 1);
        byte[] byteArray44 = null;
        staticSaltsABMC1_0.key2(byteArray44, (int) '4');
        java.lang.Class<?> wildcardClass47 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_32.key2(byteArray49, (-1));
        staticSaltsABMC1_0.key2(byteArray49, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        java.lang.Class<?> wildcardClass18 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_14.key2(byteArray32, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_39.key2(byteArray57, 100);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_39.key2(byteArray70, (int) (byte) 1);
        staticSaltsABMC1_14.key2(byteArray70, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray70, (int) 'a');
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray56, 1);
        staticSaltsABMC1_0.key2(byteArray56, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray68, 10);
        staticSaltsABMC1_0.key2(byteArray68, (int) '#');
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        staticSaltsABMC1_44.key2(byteArray55, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_79.key2(byteArray87, 10);
        staticSaltsABMC1_62.key2(byteArray87, (int) '4');
        staticSaltsABMC1_44.key2(byteArray87, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray17, 10);
        staticSaltsABMC1_9.key2(byteArray17, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        staticSaltsABMC1_9.key2(byteArray41, 1);
        staticSaltsABMC1_8.key2(byteArray41, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_50.key2(byteArray61, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_68.key2(byteArray79, (int) (byte) 1);
        staticSaltsABMC1_50.key2(byteArray79, (int) (byte) 0);
        staticSaltsABMC1_8.key2(byteArray79, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray79, (int) ' ');
        java.lang.Class<?> wildcardClass92 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_32.key2(byteArray42, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_32.key2(byteArray49, (-1));
        staticSaltsABMC1_0.key2(byteArray49, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = byteArray49.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        staticSaltsABMC1_32.key2(byteArray50, 100);
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_32.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray63, (int) (short) 1);
        byte[] byteArray68 = null;
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) -1);
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_39.key2(byteArray47, (int) (short) 100);
        byte[] byteArray50 = null;
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray69, 10);
        staticSaltsABMC1_61.key2(byteArray69, 10);
        staticSaltsABMC1_53.key2(byteArray69, (int) (short) 1);
        staticSaltsABMC1_39.key2(byteArray69, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray69, 1);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray28, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        java.lang.Class<?> wildcardClass51 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_35.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, 100);
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, (int) 'a');
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_67.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray89, 100);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_73.key2(byteArray83, 0);
        staticSaltsABMC1_65.key2(byteArray83, 100);
        byte[] byteArray90 = new byte[] {};
        staticSaltsABMC1_65.key2(byteArray90, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray90, (int) (short) 100);
        java.lang.Class<?> wildcardClass95 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_36.key2(byteArray61, (int) 'a');
        byte[] byteArray68 = null;
        staticSaltsABMC1_36.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_36.key2(byteArray81, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray81, 10);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) '#');
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) (short) 1);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray52, 10);
        staticSaltsABMC1_44.key2(byteArray52, 10);
        staticSaltsABMC1_30.key2(byteArray52, (int) (short) 10);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_30.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_22.key2(byteArray63, 0);
        staticSaltsABMC1_14.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray86, 10);
        staticSaltsABMC1_78.key2(byteArray86, 10);
        staticSaltsABMC1_70.key2(byteArray86, (int) (short) 1);
        staticSaltsABMC1_14.key2(byteArray86, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) 100);
        java.lang.Class<?> wildcardClass97 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_9.key2(byteArray34, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray68, (int) 'a');
        staticSaltsABMC1_41.key2(byteArray68, 100);
        staticSaltsABMC1_9.key2(byteArray68, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 0);
        java.lang.Class<?> wildcardClass79 = byteArray68.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) -1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_58.key2(byteArray76, 100);
        byte[] byteArray83 = new byte[] {};
        staticSaltsABMC1_58.key2(byteArray83, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray83, (-1));
        java.lang.Class<?> wildcardClass88 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_0.key2(byteArray54, (-1));
        java.lang.Class<?> wildcardClass59 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray57, (int) 'a');
        staticSaltsABMC1_30.key2(byteArray57, 100);
        staticSaltsABMC1_15.key2(byteArray57, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray57, 100);
        byte[] byteArray68 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray68, (-1));
        java.lang.Class<?> wildcardClass71 = byteArray68.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray56, (int) (short) -1);
        byte[] byteArray63 = null;
        staticSaltsABMC1_0.key2(byteArray63, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_0.key2(byteArray76, (int) ' ');
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_48.key2(byteArray65, (-1));
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, (int) ' ');
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, 10);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray28, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        java.lang.Class<?> wildcardClass54 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_38.key2(byteArray46, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        staticSaltsABMC1_51.key2(byteArray70, (int) 'a');
        staticSaltsABMC1_38.key2(byteArray70, 1);
        staticSaltsABMC1_37.key2(byteArray70, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray70, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray84, (int) (byte) 1);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (byte) -1);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_47.key2(byteArray64, (-1));
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 100);
        java.lang.Class<?> wildcardClass78 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray66 = new byte[] { (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) 1);
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) 0);
        java.lang.Class<?> wildcardClass72 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, 10);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, 1);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_44.key2(byteArray54, 0);
        staticSaltsABMC1_14.key2(byteArray54, 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_14.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_64.key2(byteArray74, 0);
        staticSaltsABMC1_14.key2(byteArray74, 1);
        staticSaltsABMC1_0.key2(byteArray74, 0);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, 0);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 100);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABMC1_52.key2(byteArray71, (int) 'a');
        staticSaltsABMC1_44.key2(byteArray71, 100);
        staticSaltsABMC1_12.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray71, (int) '#');
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) 100);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_57.key2(byteArray64, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        staticSaltsABMC1_71.key2(byteArray82, 1);
        staticSaltsABMC1_0.key2(byteArray82, 0);
        java.lang.Class<?> wildcardClass91 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, 10);
        java.lang.Class<?> wildcardClass62 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_50.key2(byteArray68, 100);
        staticSaltsABMC1_29.key2(byteArray68, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray68, (-1));
        staticSaltsABMC1_0.key2(byteArray68, 0);
        byte[] byteArray81 = null;
        staticSaltsABMC1_0.key2(byteArray81, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_0.key2(byteArray87, (int) '#');
        java.lang.Class<?> wildcardClass92 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) 0);
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_37.key2(byteArray44, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray61, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) 0);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 0);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray30, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_35.key2(byteArray52, (-1));
        staticSaltsABMC1_14.key2(byteArray52, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_59.key2(byteArray78, (int) 'a');
        staticSaltsABMC1_14.key2(byteArray78, (int) ' ');
        byte[] byteArray85 = new byte[] {};
        staticSaltsABMC1_14.key2(byteArray85, (int) '#');
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 1);
        java.lang.Class<?> wildcardClass90 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_16.key2(byteArray41, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        staticSaltsABMC1_16.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray61, 10);
        staticSaltsABMC1_16.key2(byteArray61, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_66.key2(byteArray83, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_88 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_88.key2(byteArray91, 10);
        staticSaltsABMC1_66.key2(byteArray91, (int) (short) 100);
        staticSaltsABMC1_16.key2(byteArray91, (int) '#');
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, 1);
        java.lang.Class<?> wildcardClass64 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_17.key2(byteArray35, 100);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_17.key2(byteArray48, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_51.key2(byteArray58, (int) (byte) 10);
        staticSaltsABMC1_17.key2(byteArray58, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray58, (int) (short) 100);
        java.lang.Class<?> wildcardClass67 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABMC1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_18.key2(byteArray52, (-1));
        staticSaltsABMC1_0.key2(byteArray52, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_75.key2(byteArray83, 10);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) -1);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) ' ');
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_0.key2(byteArray21, 10);
        java.lang.Class<?> wildcardClass24 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray29 = null;
        staticSaltsABMC1_21.key2(byteArray29, (int) (short) 100);
        byte[] byteArray32 = null;
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray51, 10);
        staticSaltsABMC1_43.key2(byteArray51, 10);
        staticSaltsABMC1_35.key2(byteArray51, (int) (short) 1);
        staticSaltsABMC1_21.key2(byteArray51, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray51, 0);
        java.lang.Class<?> wildcardClass62 = byteArray51.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        java.lang.Class<?> wildcardClass23 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray19, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_53.key2(byteArray71, 100);
        staticSaltsABMC1_32.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_26.key2(byteArray71, (int) (byte) 0);
        staticSaltsABMC1_8.key2(byteArray71, (int) '#');
        staticSaltsABMC1_0.key2(byteArray71, (int) (byte) 10);
        java.lang.Class<?> wildcardClass86 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_36.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray61, (-1));
        java.lang.Class<?> wildcardClass70 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_46.key2(byteArray56, 0);
        staticSaltsABMC1_38.key2(byteArray56, 100);
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_38.key2(byteArray69, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_72.key2(byteArray79, (int) (byte) 10);
        staticSaltsABMC1_38.key2(byteArray79, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray79, (int) (byte) 0);
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_34.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 1);
        java.lang.Class<?> wildcardClass45 = byteArray40.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        staticSaltsABMC1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABMC1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray61, 10);
        staticSaltsABMC1_0.key2(byteArray61, 1);
        java.lang.Class<?> wildcardClass66 = byteArray61.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_22.key2(byteArray49, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray72, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray72, (-1));
        java.lang.Class<?> wildcardClass81 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_52.key2(byteArray60, 10);
        staticSaltsABMC1_38.key2(byteArray60, (int) (short) 10);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_38.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_76.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray88, 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) '4');
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_57.key2(byteArray74, (-1));
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 0);
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_13.key2(byteArray31, 100);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_13.key2(byteArray44, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_47.key2(byteArray54, (int) (byte) 10);
        staticSaltsABMC1_13.key2(byteArray54, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_44.key2(byteArray66, (int) (short) 10);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_44.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_36.key2(byteArray77, 0);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass84 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_28.key2(byteArray35, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        staticSaltsABMC1_40.key2(byteArray65, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_28.key2(byteArray75, 10);
        staticSaltsABMC1_0.key2(byteArray75, (int) '4');
        java.lang.Class<?> wildcardClass86 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_34.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 1);
        java.lang.Class<?> wildcardClass45 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) -1);
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray78, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray78, 0);
        staticSaltsABMC1_17.key2(byteArray78, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray78, 1);
        java.lang.Class<?> wildcardClass89 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_14.key2(byteArray25, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray43, 10);
        staticSaltsABMC1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray67, (int) 'a');
        staticSaltsABMC1_35.key2(byteArray67, 1);
        staticSaltsABMC1_34.key2(byteArray67, (int) (byte) 100);
        staticSaltsABMC1_6.key2(byteArray67, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_79.key2(byteArray89, 0);
        staticSaltsABMC1_78.key2(byteArray89, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray89, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray89, (int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        byte[] byteArray48 = null;
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 100);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, (int) (byte) 0);
        java.lang.Class<?> wildcardClass54 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_26.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABMC1_26.key2(byteArray45, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray45, 100);
        byte[] byteArray52 = null;
        staticSaltsABMC1_18.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_55.key2(byteArray66, 1);
        staticSaltsABMC1_18.key2(byteArray66, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_75.key2(byteArray82, (int) (byte) 10);
        staticSaltsABMC1_18.key2(byteArray82, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) -1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_47.key2(byteArray64, (-1));
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, 0);
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, 0);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray69, 10);
        staticSaltsABMC1_61.key2(byteArray69, 10);
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) 10);
        java.lang.Class<?> wildcardClass76 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        staticSaltsABMC1_44.key2(byteArray55, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray87, 10);
        staticSaltsABMC1_79.key2(byteArray87, 10);
        staticSaltsABMC1_62.key2(byteArray87, (int) '4');
        staticSaltsABMC1_44.key2(byteArray87, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) (short) 1);
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        staticSaltsABMC1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray49, 0);
        staticSaltsABMC1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray80, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_77.key2(byteArray85, (int) (short) 1);
        staticSaltsABMC1_56.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) -1);
        java.lang.Class<?> wildcardClass94 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_60.key2(byteArray71, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_79.key2(byteArray89, 0);
        staticSaltsABMC1_78.key2(byteArray89, (int) (byte) 1);
        staticSaltsABMC1_60.key2(byteArray89, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_35.key2(byteArray43, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray43, (int) (short) -1);
        java.lang.Class<?> wildcardClass50 = byteArray43.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_18.key2(byteArray25, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray42, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray42, 0);
        staticSaltsABMC1_0.key2(byteArray42, (int) '4');
        java.lang.Class<?> wildcardClass51 = byteArray42.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        staticSaltsABMC1_0.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) '4');
        java.lang.Class<?> wildcardClass67 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) -1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_58.key2(byteArray76, 100);
        byte[] byteArray83 = new byte[] {};
        staticSaltsABMC1_58.key2(byteArray83, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray83, (-1));
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, 0);
        java.lang.Class<?> wildcardClass14 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_14.key2(byteArray25, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) -1);
        java.lang.Class<?> wildcardClass36 = byteArray25.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_8.key2(byteArray15, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray15, (int) '4');
        java.lang.Class<?> wildcardClass22 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_50.key2(byteArray57, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray74, 0);
        byte[] byteArray81 = null;
        staticSaltsABMC1_50.key2(byteArray81, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray87, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray87, (-1));
        java.lang.Class<?> wildcardClass96 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (-1));
        java.lang.Class<?> wildcardClass52 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        staticSaltsABMC1_0.key2(byteArray59, (-1));
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, 1);
        java.lang.Class<?> wildcardClass69 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_8.key2(byteArray15, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray15, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray63, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray63, (int) ' ');
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray20 = null;
        staticSaltsABMC1_12.key2(byteArray20, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray31, 10);
        staticSaltsABMC1_23.key2(byteArray31, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray55, (int) 'a');
        staticSaltsABMC1_23.key2(byteArray55, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_23.key2(byteArray64, 0);
        staticSaltsABMC1_12.key2(byteArray64, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray74, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray74, 0);
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray23, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABMC1_12.key2(byteArray59, (int) '#');
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) -1);
        java.lang.Class<?> wildcardClass72 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_57.key2(byteArray64, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, (-1));
        java.lang.Class<?> wildcardClass74 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        staticSaltsABMC1_6.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray30, (int) (short) 0);
        staticSaltsABMC1_6.key2(byteArray30, 0);
        byte[] byteArray37 = null;
        staticSaltsABMC1_6.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        staticSaltsABMC1_40.key2(byteArray51, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_59.key2(byteArray69, 0);
        staticSaltsABMC1_58.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray69, (int) (byte) 0);
        staticSaltsABMC1_6.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray69, 0);
        java.lang.Class<?> wildcardClass82 = byteArray69.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray11, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_8.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray29 = null;
        staticSaltsABMC1_21.key2(byteArray29, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray40, 10);
        staticSaltsABMC1_32.key2(byteArray40, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray64, (int) 'a');
        staticSaltsABMC1_32.key2(byteArray64, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_32.key2(byteArray73, 0);
        staticSaltsABMC1_21.key2(byteArray73, 0);
        staticSaltsABMC1_8.key2(byteArray73, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 10);
        java.lang.Class<?> wildcardClass84 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_77.key2(byteArray87, 0);
        staticSaltsABMC1_69.key2(byteArray87, 100);
        staticSaltsABMC1_48.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray87, (int) '#');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        staticSaltsABMC1_25.key2(byteArray33, 10);
        staticSaltsABMC1_11.key2(byteArray33, (int) (short) 10);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_11.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray55 = null;
        staticSaltsABMC1_47.key2(byteArray55, (int) (short) 100);
        byte[] byteArray58 = null;
        staticSaltsABMC1_47.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray77, 10);
        staticSaltsABMC1_69.key2(byteArray77, 10);
        staticSaltsABMC1_61.key2(byteArray77, (int) (short) 1);
        staticSaltsABMC1_47.key2(byteArray77, (int) 'a');
        staticSaltsABMC1_11.key2(byteArray77, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) 10);
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_36.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray61, (-1));
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) -1, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray34, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray64, (int) 'a');
        staticSaltsABMC1_37.key2(byteArray64, 100);
        byte[] byteArray71 = null;
        staticSaltsABMC1_37.key2(byteArray71, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray91 = new byte[] { (byte) 100 };
        staticSaltsABMC1_89.key2(byteArray91, (int) '#');
        staticSaltsABMC1_74.key2(byteArray91, (-1));
        staticSaltsABMC1_37.key2(byteArray91, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray91, (int) (byte) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABMC1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_18.key2(byteArray52, (-1));
        staticSaltsABMC1_0.key2(byteArray52, (int) '4');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_68.key2(byteArray79, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray79, 0);
        java.lang.Class<?> wildcardClass84 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray90, 10);
        staticSaltsABMC1_82.key2(byteArray90, 10);
        staticSaltsABMC1_74.key2(byteArray90, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray90, (int) ' ');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        staticSaltsABMC1_48.key2(byteArray73, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray89, (int) '#');
        staticSaltsABMC1_82.key2(byteArray89, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray89, (-1));
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) (short) 10);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        staticSaltsABMC1_6.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray30, (int) (short) 0);
        staticSaltsABMC1_6.key2(byteArray30, 0);
        byte[] byteArray37 = null;
        staticSaltsABMC1_6.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_40.key2(byteArray58, 100);
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_40.key2(byteArray71, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray71, 1);
        staticSaltsABMC1_0.key2(byteArray71, 0);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray53, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_37.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray66, (int) 'a');
        java.lang.Class<?> wildcardClass75 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        staticSaltsABMC1_0.key2(byteArray59, (-1));
        java.lang.Class<?> wildcardClass66 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray17, 10);
        staticSaltsABMC1_9.key2(byteArray17, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        staticSaltsABMC1_9.key2(byteArray41, 1);
        staticSaltsABMC1_0.key2(byteArray41, (-1));
        java.lang.Class<?> wildcardClass50 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray9, 10);
        staticSaltsABMC1_1.key2(byteArray9, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_22.key2(byteArray33, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray33, (int) 'a');
        staticSaltsABMC1_1.key2(byteArray33, 1);
        staticSaltsABMC1_0.key2(byteArray33, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_42.key2(byteArray59, (-1));
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_42.key2(byteArray69, 10);
        byte[] byteArray72 = null;
        staticSaltsABMC1_42.key2(byteArray72, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_83.key2(byteArray86, (int) (short) 0);
        staticSaltsABMC1_75.key2(byteArray86, 1);
        staticSaltsABMC1_42.key2(byteArray86, (-1));
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) -1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_1.key2(byteArray19, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_26.key2(byteArray42, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        staticSaltsABMC1_47.key2(byteArray65, 100);
        staticSaltsABMC1_26.key2(byteArray65, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray65, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) 100);
        byte[] byteArray78 = null;
        staticSaltsABMC1_0.key2(byteArray78, (int) '4');
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_89 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_89.key2(byteArray92, 10);
        staticSaltsABMC1_84.key2(byteArray92, 10);
        staticSaltsABMC1_0.key2(byteArray92, 100);
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_14.key2(byteArray25, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) -1);
        java.lang.Class<?> wildcardClass36 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_13.key2(byteArray30, (-1));
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_13.key2(byteArray40, 10);
        byte[] byteArray43 = null;
        staticSaltsABMC1_13.key2(byteArray43, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        staticSaltsABMC1_46.key2(byteArray57, 1);
        staticSaltsABMC1_13.key2(byteArray57, (-1));
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        staticSaltsABMC1_68.key2(byteArray79, 1);
        staticSaltsABMC1_0.key2(byteArray79, (int) (byte) 1);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, (int) (short) 0);
        byte[] byteArray41 = null;
        staticSaltsABMC1_0.key2(byteArray41, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray52, 10);
        staticSaltsABMC1_44.key2(byteArray52, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray76, (int) 'a');
        staticSaltsABMC1_44.key2(byteArray76, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_44.key2(byteArray85, 0);
        staticSaltsABMC1_0.key2(byteArray85, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_70.key2(byteArray78, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray78, (int) (byte) 0);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        byte[] byteArray60 = null;
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_63.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray88, (-1));
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray63, 10);
        staticSaltsABMC1_55.key2(byteArray63, 10);
        staticSaltsABMC1_47.key2(byteArray63, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray63, (int) 'a');
        java.lang.Class<?> wildcardClass72 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_6.key2(byteArray16, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_6.key2(byteArray31, (int) 'a');
        byte[] byteArray38 = null;
        staticSaltsABMC1_6.key2(byteArray38, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_41.key2(byteArray58, (-1));
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_41.key2(byteArray68, 10);
        staticSaltsABMC1_6.key2(byteArray68, 100);
        byte[] byteArray73 = null;
        staticSaltsABMC1_6.key2(byteArray73, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        staticSaltsABMC1_6.key2(byteArray79, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) -1);
        java.lang.Class<?> wildcardClass86 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        byte[] byteArray36 = null;
        staticSaltsABMC1_0.key2(byteArray36, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray48, 10);
        staticSaltsABMC1_40.key2(byteArray48, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_53.key2(byteArray72, (int) 'a');
        staticSaltsABMC1_40.key2(byteArray72, 1);
        staticSaltsABMC1_39.key2(byteArray72, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) 1);
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 0, (byte) -1, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray34, 10);
        java.lang.Class<?> wildcardClass37 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        staticSaltsABMC1_13.key2(byteArray52, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 10 };
        staticSaltsABMC1_13.key2(byteArray62, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_65.key2(byteArray76, 1);
        staticSaltsABMC1_13.key2(byteArray76, 0);
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 100);
        java.lang.Class<?> wildcardClass87 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray50, (int) ' ');
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray81, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_86.key2(byteArray92, (int) (short) 0);
        staticSaltsABMC1_56.key2(byteArray92, 0);
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) -1);
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_14.key2(byteArray32, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_39.key2(byteArray57, 100);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_39.key2(byteArray70, (int) (byte) 1);
        staticSaltsABMC1_14.key2(byteArray70, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray70, (int) 'a');
        java.lang.Class<?> wildcardClass77 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_55.key2(byteArray66, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray80, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_44.key2(byteArray66, (int) (short) 10);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_44.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_36.key2(byteArray77, 0);
        staticSaltsABMC1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass84 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray19, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_53.key2(byteArray71, 100);
        staticSaltsABMC1_32.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_26.key2(byteArray71, (int) (byte) 0);
        staticSaltsABMC1_8.key2(byteArray71, (int) '#');
        staticSaltsABMC1_0.key2(byteArray71, (int) (byte) 10);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 100);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray41, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_46.key2(byteArray57, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray57, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_62.key2(byteArray78, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray78, 0);
        staticSaltsABMC1_17.key2(byteArray78, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray78, 1);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray50, (int) ' ');
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray85, 10);
        staticSaltsABMC1_77.key2(byteArray85, 10);
        staticSaltsABMC1_56.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray85, 100);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_57.key2(byteArray74, (-1));
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 0);
        java.lang.Class<?> wildcardClass81 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        staticSaltsABMC1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray49, 0);
        staticSaltsABMC1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray67, (int) 'a');
        java.lang.Class<?> wildcardClass72 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_52.key2(byteArray70, 100);
        staticSaltsABMC1_0.key2(byteArray70, (int) 'a');
        java.lang.Class<?> wildcardClass79 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_13.key2(byteArray31, 100);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_13.key2(byteArray44, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_47.key2(byteArray54, (int) (byte) 10);
        staticSaltsABMC1_13.key2(byteArray54, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) 1);
        java.lang.Class<?> wildcardClass70 = byteArray65.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray65, 1);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_50.key2(byteArray75, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_50.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) -1);
        java.lang.Class<?> wildcardClass94 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) -1);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray77, 10);
        staticSaltsABMC1_69.key2(byteArray77, 10);
        staticSaltsABMC1_61.key2(byteArray77, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray77, (int) '#');
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, (int) (short) 100);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) (byte) 1);
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, 10);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_15.key2(byteArray26, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_15.key2(byteArray40, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        staticSaltsABMC1_15.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_62.key2(byteArray79, (-1));
        staticSaltsABMC1_15.key2(byteArray79, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_15.key2(byteArray88, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray88, 10);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray65, 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (-1));
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_35.key2(byteArray53, 100);
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_35.key2(byteArray66, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_69.key2(byteArray76, (int) (byte) 10);
        staticSaltsABMC1_35.key2(byteArray76, (int) (short) -1);
        staticSaltsABMC1_22.key2(byteArray76, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray76, 0);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, (int) (short) 0);
        byte[] byteArray41 = null;
        staticSaltsABMC1_0.key2(byteArray41, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray52, 10);
        staticSaltsABMC1_44.key2(byteArray52, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray76, (int) 'a');
        staticSaltsABMC1_44.key2(byteArray76, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_44.key2(byteArray85, 0);
        staticSaltsABMC1_0.key2(byteArray85, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        staticSaltsABMC1_27.key2(byteArray38, (int) (byte) 1);
        staticSaltsABMC1_19.key2(byteArray38, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray56, 10);
        staticSaltsABMC1_48.key2(byteArray56, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_61.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_48.key2(byteArray80, 1);
        staticSaltsABMC1_47.key2(byteArray80, (int) (byte) 100);
        staticSaltsABMC1_19.key2(byteArray80, 1);
        staticSaltsABMC1_0.key2(byteArray80, 1);
        java.lang.Class<?> wildcardClass93 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray19, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_16.key2(byteArray24, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray64, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_74.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_69.key2(byteArray85, (int) (byte) 0);
        staticSaltsABMC1_29.key2(byteArray85, (int) (short) -1);
        staticSaltsABMC1_16.key2(byteArray85, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray85, 1);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        staticSaltsABMC1_6.key2(byteArray22, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_27.key2(byteArray45, 100);
        staticSaltsABMC1_6.key2(byteArray45, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_56.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, 0);
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 1);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) '4');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_70.key2(byteArray82, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) 0);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, 10);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray19, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_53.key2(byteArray71, 100);
        staticSaltsABMC1_32.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_26.key2(byteArray71, (int) (byte) 0);
        staticSaltsABMC1_8.key2(byteArray71, (int) '#');
        staticSaltsABMC1_0.key2(byteArray71, (int) (byte) 10);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, (int) ' ');
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) -1);
        java.lang.Class<?> wildcardClass59 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray41, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_46.key2(byteArray64, 100);
        staticSaltsABMC1_25.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_75.key2(byteArray82, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray82, 1);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, (int) '#');
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray71, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray84, 10);
        staticSaltsABMC1_76.key2(byteArray84, 10);
        staticSaltsABMC1_55.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray84, 0);
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 100);
        java.lang.Class<?> wildcardClass49 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_35.key2(byteArray52, (-1));
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_35.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, 100);
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray44, 1);
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, 10);
        java.lang.Class<?> wildcardClass56 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_67.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 100);
        java.lang.Class<?> wildcardClass92 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        byte[] byteArray67 = null;
        staticSaltsABMC1_0.key2(byteArray67, 100);
        java.lang.Class<?> wildcardClass70 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 0);
        java.lang.Class<?> wildcardClass53 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        staticSaltsABMC1_0.key2(byteArray59, (-1));
        java.lang.Class<?> wildcardClass66 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray18, 10);
        staticSaltsABMC1_10.key2(byteArray18, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_10.key2(byteArray42, 1);
        staticSaltsABMC1_9.key2(byteArray42, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_51.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_51.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_9.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 100);
        java.lang.Class<?> wildcardClass93 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        staticSaltsABMC1_36.key2(byteArray47, (int) (byte) 1);
        staticSaltsABMC1_18.key2(byteArray47, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        staticSaltsABMC1_58.key2(byteArray76, 100);
        byte[] byteArray83 = new byte[] {};
        staticSaltsABMC1_58.key2(byteArray83, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) 10);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABMC1_50.key2(byteArray69, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_75.key2(byteArray85, 0);
        staticSaltsABMC1_74.key2(byteArray85, (int) (byte) 1);
        staticSaltsABMC1_50.key2(byteArray85, 1);
        staticSaltsABMC1_0.key2(byteArray85, 1);
        java.lang.Class<?> wildcardClass96 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_30.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray36, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_41.key2(byteArray49, (int) (short) 100);
        byte[] byteArray52 = null;
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 0);
        byte[] byteArray55 = null;
        staticSaltsABMC1_41.key2(byteArray55, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_58.key2(byteArray83, (int) (short) 100);
        staticSaltsABMC1_41.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) -1);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_19.key2(byteArray30, (int) (short) 10);
        staticSaltsABMC1_18.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray43, 10);
        staticSaltsABMC1_35.key2(byteArray43, 10);
        staticSaltsABMC1_18.key2(byteArray43, (int) '4');
        staticSaltsABMC1_0.key2(byteArray43, (int) (short) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_55.key2(byteArray72, (-1));
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_55.key2(byteArray82, 10);
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 1);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_14.key2(byteArray24, 0);
        staticSaltsABMC1_6.key2(byteArray24, 100);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_6.key2(byteArray37, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABMC1_6.key2(byteArray65, (int) '4');
        staticSaltsABMC1_5.key2(byteArray65, (int) '4');
        staticSaltsABMC1_0.key2(byteArray65, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_76.key2(byteArray87, 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) 'a');
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_44.key2(byteArray54, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_44.key2(byteArray61, (-1));
        staticSaltsABMC1_23.key2(byteArray61, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray87, (int) 'a');
        staticSaltsABMC1_23.key2(byteArray87, (int) ' ');
        staticSaltsABMC1_18.key2(byteArray87, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 100);
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        staticSaltsABMC1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABMC1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray41, (int) ' ');
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) ' ');
        java.lang.Class<?> wildcardClass55 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_5.key2(byteArray15, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        staticSaltsABMC1_5.key2(byteArray30, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) -1);
        java.lang.Class<?> wildcardClass59 = byteArray52.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        staticSaltsABMC1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray49, 0);
        staticSaltsABMC1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray80, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_77.key2(byteArray85, (int) (short) 1);
        staticSaltsABMC1_56.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) -1);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_50.key2(byteArray60, 0);
        staticSaltsABMC1_0.key2(byteArray60, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABMC1_67.key2(byteArray86, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray86, (int) '4');
        java.lang.Class<?> wildcardClass93 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 1);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, (int) (short) -1);
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) 10);
        java.lang.Class<?> wildcardClass62 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) (byte) 100);
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray71, (int) ' ');
        java.lang.Class<?> wildcardClass78 = byteArray71.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_46.key2(byteArray64, 100);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 10);
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray43, 10);
        staticSaltsABMC1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray67, (int) 'a');
        staticSaltsABMC1_35.key2(byteArray67, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_35.key2(byteArray76, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_35.key2(byteArray83, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 1);
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray20, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray62, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        staticSaltsABMC1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABMC1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_52.key2(byteArray63, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray74, 10);
        staticSaltsABMC1_66.key2(byteArray74, 10);
        staticSaltsABMC1_52.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray74, (int) ' ');
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass87 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_55.key2(byteArray66, 1);
        staticSaltsABMC1_0.key2(byteArray66, (int) '4');
        java.lang.Class<?> wildcardClass75 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        staticSaltsABMC1_32.key2(byteArray59, 100);
        staticSaltsABMC1_0.key2(byteArray59, (int) (short) 0);
        byte[] byteArray68 = null;
        staticSaltsABMC1_0.key2(byteArray68, 10);
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray11, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_14.key2(byteArray32, 100);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_14.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_48.key2(byteArray55, (int) (byte) 10);
        staticSaltsABMC1_14.key2(byteArray55, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_77.key2(byteArray87, 0);
        staticSaltsABMC1_62.key2(byteArray87, (int) 'a');
        staticSaltsABMC1_14.key2(byteArray87, (int) (short) -1);
        staticSaltsABMC1_8.key2(byteArray87, 0);
        staticSaltsABMC1_0.key2(byteArray87, (int) (short) -1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABMC1_50.key2(byteArray69, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_75.key2(byteArray85, 0);
        staticSaltsABMC1_74.key2(byteArray85, (int) (byte) 1);
        staticSaltsABMC1_50.key2(byteArray85, 1);
        staticSaltsABMC1_0.key2(byteArray85, 1);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        byte[] byteArray50 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray50, (int) ' ');
        byte[] byteArray53 = null;
        staticSaltsABMC1_0.key2(byteArray53, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_61.key2(byteArray72, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray85, 10);
        staticSaltsABMC1_77.key2(byteArray85, 10);
        staticSaltsABMC1_56.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray85, 100);
        java.lang.Class<?> wildcardClass94 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_69.key2(byteArray79, 0);
        staticSaltsABMC1_68.key2(byteArray79, (int) (byte) 1);
        staticSaltsABMC1_60.key2(byteArray79, 0);
        staticSaltsABMC1_0.key2(byteArray79, (int) '4');
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (-1));
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_44.key2(byteArray54, 0);
        staticSaltsABMC1_14.key2(byteArray54, 0);
        staticSaltsABMC1_0.key2(byteArray54, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_64.key2(byteArray75, (int) (short) 10);
        staticSaltsABMC1_63.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray75, 1);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 0);
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 0);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_60.key2(byteArray71, (int) (short) 10);
        staticSaltsABMC1_52.key2(byteArray71, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray71, (int) '4');
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray65, (int) (byte) 10);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) 1);
        java.lang.Class<?> wildcardClass75 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        staticSaltsABMC1_27.key2(byteArray38, (int) (byte) 1);
        staticSaltsABMC1_19.key2(byteArray38, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray56, 10);
        staticSaltsABMC1_48.key2(byteArray56, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_61.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_48.key2(byteArray80, 1);
        staticSaltsABMC1_47.key2(byteArray80, (int) (byte) 100);
        staticSaltsABMC1_19.key2(byteArray80, 1);
        staticSaltsABMC1_0.key2(byteArray80, 1);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        staticSaltsABMC1_28.key2(byteArray46, 100);
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_28.key2(byteArray59, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_62.key2(byteArray69, (int) (byte) 10);
        staticSaltsABMC1_28.key2(byteArray69, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_28.key2(byteArray86, 0);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray32, 10);
        staticSaltsABMC1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_24.key2(byteArray56, 1);
        staticSaltsABMC1_0.key2(byteArray56, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_65.key2(byteArray80, (int) '4');
        staticSaltsABMC1_0.key2(byteArray80, (int) 'a');
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_18.key2(byteArray28, 0);
        staticSaltsABMC1_17.key2(byteArray28, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        staticSaltsABMC1_35.key2(byteArray46, (int) (byte) 1);
        staticSaltsABMC1_17.key2(byteArray46, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray67, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray67, (int) ' ');
        java.lang.Class<?> wildcardClass76 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        byte[] byteArray62 = null;
        staticSaltsABMC1_0.key2(byteArray62, (int) (short) 10);
        java.lang.Class<?> wildcardClass65 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        staticSaltsABMC1_25.key2(byteArray50, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        staticSaltsABMC1_25.key2(byteArray60, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray60, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_74.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_69.key2(byteArray85, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray85, (int) (short) 0);
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, 100);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) (short) 0);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_51.key2(byteArray67, (int) (byte) 0);
        staticSaltsABMC1_17.key2(byteArray67, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray67, (int) (byte) 100);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_41.key2(byteArray66, (int) 'a');
        byte[] byteArray73 = null;
        staticSaltsABMC1_41.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_76.key2(byteArray84, (int) (short) 1);
        staticSaltsABMC1_41.key2(byteArray84, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray84, (int) '4');
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_64.key2(byteArray75, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray75, 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 1);
        java.lang.Class<?> wildcardClass86 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray23, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABMC1_12.key2(byteArray59, (int) '#');
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) -1);
        java.lang.Class<?> wildcardClass72 = byteArray59.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        byte[] byteArray55 = new byte[] {};
        staticSaltsABMC1_30.key2(byteArray55, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray55, (int) (short) 10);
        java.lang.Class<?> wildcardClass60 = byteArray55.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, 10);
        java.lang.Class<?> wildcardClass43 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_6.key2(byteArray16, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_6.key2(byteArray23, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray36, 10);
        staticSaltsABMC1_28.key2(byteArray36, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_41.key2(byteArray59, 100);
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_41.key2(byteArray72, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_75.key2(byteArray82, (int) (byte) 10);
        staticSaltsABMC1_41.key2(byteArray82, (int) (short) -1);
        staticSaltsABMC1_28.key2(byteArray82, (int) (byte) 1);
        staticSaltsABMC1_6.key2(byteArray82, 0);
        staticSaltsABMC1_0.key2(byteArray82, 100);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        staticSaltsABMC1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray49, 0);
        staticSaltsABMC1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray67, (int) 'a');
        java.lang.Class<?> wildcardClass72 = byteArray67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_29.key2(byteArray40, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABMC1_47.key2(byteArray81, (-1));
        staticSaltsABMC1_29.key2(byteArray81, (int) '4');
        staticSaltsABMC1_28.key2(byteArray81, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray81, (int) '#');
        java.lang.Class<?> wildcardClass98 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_48.key2(byteArray66, 100);
        staticSaltsABMC1_0.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray78, (int) '4');
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 100);
        byte[] byteArray88 = null;
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 0);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 1);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_13.key2(byteArray21, (int) (short) 100);
        byte[] byteArray24 = null;
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 0);
        byte[] byteArray27 = null;
        staticSaltsABMC1_13.key2(byteArray27, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_30.key2(byteArray59, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray80, (int) (short) 1);
        staticSaltsABMC1_13.key2(byteArray80, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_48.key2(byteArray65, (-1));
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, (int) ' ');
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray89, (-1));
        java.lang.Class<?> wildcardClass94 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray44, 1);
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_61.key2(byteArray72, (int) (byte) 1);
        staticSaltsABMC1_53.key2(byteArray72, 0);
        staticSaltsABMC1_0.key2(byteArray72, (int) (byte) 100);
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_13.key2(byteArray31, 100);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_13.key2(byteArray44, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray55, 10);
        staticSaltsABMC1_47.key2(byteArray55, 10);
        staticSaltsABMC1_13.key2(byteArray55, (int) '4');
        staticSaltsABMC1_0.key2(byteArray55, 0);
        java.lang.Class<?> wildcardClass64 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_23.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        staticSaltsABMC1_23.key2(byteArray52, (int) (byte) 0);
        staticSaltsABMC1_18.key2(byteArray52, (-1));
        staticSaltsABMC1_0.key2(byteArray52, (int) '4');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_68.key2(byteArray86, 100);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 0);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) '4');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        staticSaltsABMC1_48.key2(byteArray73, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) -1);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) ' ');
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray20, (int) (short) 0);
        java.lang.Class<?> wildcardClass23 = byteArray20.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_8.key2(byteArray30, (int) (short) 10);
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_8.key2(byteArray41, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_47.key2(byteArray58, (int) (short) 10);
        staticSaltsABMC1_46.key2(byteArray58, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray58, 0);
        java.lang.Class<?> wildcardClass65 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        byte[] byteArray64 = null;
        staticSaltsABMC1_18.key2(byteArray64, (int) (byte) -1);
        byte[] byteArray67 = null;
        staticSaltsABMC1_18.key2(byteArray67, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_70.key2(byteArray88, 100);
        staticSaltsABMC1_18.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray88, 0);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 10);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 1);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) -1);
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, (int) (byte) 1);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = null;
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_29.key2(byteArray40, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_70.key2(byteArray81, (int) (byte) 1);
        staticSaltsABMC1_52.key2(byteArray81, (int) (byte) 0);
        staticSaltsABMC1_47.key2(byteArray81, (-1));
        staticSaltsABMC1_29.key2(byteArray81, (int) '4');
        staticSaltsABMC1_28.key2(byteArray81, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray81, (int) '#');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 1);
        byte[] byteArray57 = null;
        staticSaltsABMC1_0.key2(byteArray57, (int) (short) -1);
        byte[] byteArray60 = null;
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) 1);
        java.lang.Class<?> wildcardClass63 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray51 = null;
        staticSaltsABMC1_0.key2(byteArray51, 100);
        java.lang.Class<?> wildcardClass54 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_50.key2(byteArray68, 100);
        staticSaltsABMC1_29.key2(byteArray68, (int) (short) 0);
        staticSaltsABMC1_5.key2(byteArray68, (-1));
        staticSaltsABMC1_0.key2(byteArray68, 0);
        byte[] byteArray81 = null;
        staticSaltsABMC1_0.key2(byteArray81, (int) (short) 0);
        java.lang.Class<?> wildcardClass84 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        byte[] byteArray42 = null;
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 0);
        java.lang.Class<?> wildcardClass45 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_13.key2(byteArray21, (int) (short) 100);
        byte[] byteArray24 = null;
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 0);
        byte[] byteArray27 = null;
        staticSaltsABMC1_13.key2(byteArray27, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_30.key2(byteArray59, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray80, (int) (short) 1);
        staticSaltsABMC1_13.key2(byteArray80, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 1);
        java.lang.Class<?> wildcardClass91 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_52.key2(byteArray60, 10);
        staticSaltsABMC1_38.key2(byteArray60, (int) (short) 10);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_38.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_76.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray88, 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) '4');
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_8.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray28, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        staticSaltsABMC1_40.key2(byteArray51, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_59.key2(byteArray69, 0);
        staticSaltsABMC1_58.key2(byteArray69, (int) (byte) 1);
        staticSaltsABMC1_40.key2(byteArray69, (int) (byte) 0);
        staticSaltsABMC1_35.key2(byteArray69, (-1));
        staticSaltsABMC1_17.key2(byteArray69, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_82.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray85, (int) (byte) 10);
        staticSaltsABMC1_8.key2(byteArray85, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray85, 10);
        java.lang.Class<?> wildcardClass96 = byteArray85.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_13.key2(byteArray31, 100);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_13.key2(byteArray44, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray55, 10);
        staticSaltsABMC1_47.key2(byteArray55, 10);
        staticSaltsABMC1_13.key2(byteArray55, (int) '4');
        staticSaltsABMC1_0.key2(byteArray55, 0);
        java.lang.Class<?> wildcardClass64 = byteArray55.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        byte[] byteArray48 = null;
        staticSaltsABMC1_0.key2(byteArray48, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_56.key2(byteArray67, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_75.key2(byteArray85, 0);
        staticSaltsABMC1_74.key2(byteArray85, (int) (byte) 1);
        staticSaltsABMC1_56.key2(byteArray85, (int) (byte) 0);
        staticSaltsABMC1_51.key2(byteArray85, (-1));
        staticSaltsABMC1_0.key2(byteArray85, (int) (byte) 10);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_36.key2(byteArray43, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_67.key2(byteArray77, 0);
        staticSaltsABMC1_66.key2(byteArray77, (int) (byte) 1);
        staticSaltsABMC1_48.key2(byteArray77, (int) (byte) 0);
        staticSaltsABMC1_36.key2(byteArray77, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray77, (int) (byte) 0);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) (short) -1);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 10);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 100);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) '#');
        java.lang.Class<?> wildcardClass52 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray44, 1);
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_61.key2(byteArray72, (int) (byte) 1);
        staticSaltsABMC1_53.key2(byteArray72, 0);
        staticSaltsABMC1_0.key2(byteArray72, (int) (byte) 100);
        java.lang.Class<?> wildcardClass83 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_34.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_34.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        staticSaltsABMC1_34.key2(byteArray79, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) -1);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray62, 10);
        staticSaltsABMC1_0.key2(byteArray62, (int) ' ');
        java.lang.Class<?> wildcardClass67 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray34, 10);
        staticSaltsABMC1_26.key2(byteArray34, 10);
        staticSaltsABMC1_12.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray34, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_43.key2(byteArray61, 100);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_43.key2(byteArray74, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray74, (-1));
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        byte[] byteArray47 = null;
        staticSaltsABMC1_0.key2(byteArray47, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 10);
        staticSaltsABMC1_50.key2(byteArray69, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray69, 0);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) (short) 100);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray24, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_21.key2(byteArray29, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray47, (int) (byte) 100);
        java.lang.Class<?> wildcardClass52 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_24.key2(byteArray34, 0);
        staticSaltsABMC1_9.key2(byteArray34, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray68, (int) 'a');
        staticSaltsABMC1_41.key2(byteArray68, 100);
        staticSaltsABMC1_9.key2(byteArray68, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 0);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        byte[] byteArray12 = null;
        staticSaltsABMC1_0.key2(byteArray12, 0);
        java.lang.Class<?> wildcardClass15 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_34.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_45.key2(byteArray70, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_85.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_77.key2(byteArray88, 1);
        staticSaltsABMC1_45.key2(byteArray88, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray88, 10);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_23.key2(byteArray50, 100);
        byte[] byteArray57 = null;
        staticSaltsABMC1_23.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_60.key2(byteArray77, (-1));
        staticSaltsABMC1_23.key2(byteArray77, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray77, 10);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_53.key2(byteArray78, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray78, (-1));
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 100);
        java.lang.Class<?> wildcardClass81 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray25, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_9.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_9.key2(byteArray67, (int) '#');
        byte[] byteArray75 = new byte[] { (byte) 10 };
        staticSaltsABMC1_9.key2(byteArray75, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 10);
        java.lang.Class<?> wildcardClass80 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        java.lang.Class<?> wildcardClass19 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_52.key2(byteArray60, 10);
        staticSaltsABMC1_38.key2(byteArray60, (int) (short) 10);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_38.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_76.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray88, 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        staticSaltsABMC1_28.key2(byteArray46, 100);
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_28.key2(byteArray59, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_62.key2(byteArray69, (int) (byte) 10);
        staticSaltsABMC1_28.key2(byteArray69, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_28.key2(byteArray86, 0);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) -1);
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray59, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray59, (int) '4');
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_69.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray88, (int) '#');
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) (byte) 1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_52.key2(byteArray70, 100);
        staticSaltsABMC1_0.key2(byteArray70, (int) 'a');
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) 10);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_23.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_22.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_39.key2(byteArray57, 100);
        byte[] byteArray70 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_39.key2(byteArray70, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_39.key2(byteArray80, (int) (short) -1);
        staticSaltsABMC1_22.key2(byteArray80, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) -1);
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, 100);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray74, (int) (byte) 100);
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_18.key2(byteArray28, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        staticSaltsABMC1_18.key2(byteArray43, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        staticSaltsABMC1_18.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray63, 10);
        staticSaltsABMC1_18.key2(byteArray63, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray63, (int) (short) 10);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (byte) -1);
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_0.key2(byteArray31, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_34.key2(byteArray41, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray41, (int) (short) -1);
        byte[] byteArray48 = null;
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 100);
        java.lang.Class<?> wildcardClass51 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray19, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray48, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_61.key2(byteArray71, 0);
        staticSaltsABMC1_53.key2(byteArray71, 100);
        staticSaltsABMC1_32.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_26.key2(byteArray71, (int) (byte) 0);
        staticSaltsABMC1_8.key2(byteArray71, (int) '#');
        staticSaltsABMC1_0.key2(byteArray71, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray92 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_86.key2(byteArray92, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray92, (int) ' ');
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        byte[] byteArray15 = null;
        staticSaltsABMC1_0.key2(byteArray15, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray26, 10);
        staticSaltsABMC1_18.key2(byteArray26, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_31.key2(byteArray50, (int) 'a');
        staticSaltsABMC1_18.key2(byteArray50, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_18.key2(byteArray59, 0);
        byte[] byteArray64 = null;
        staticSaltsABMC1_18.key2(byteArray64, (int) (byte) -1);
        byte[] byteArray67 = null;
        staticSaltsABMC1_18.key2(byteArray67, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_70.key2(byteArray88, 100);
        staticSaltsABMC1_18.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray88, 0);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray34, 10);
        staticSaltsABMC1_26.key2(byteArray34, 10);
        staticSaltsABMC1_12.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray34, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_43.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_43.key2(byteArray67, 0);
        byte[] byteArray74 = null;
        staticSaltsABMC1_43.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_43.key2(byteArray80, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 0);
        java.lang.Class<?> wildcardClass89 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray9, 10);
        staticSaltsABMC1_1.key2(byteArray9, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_22.key2(byteArray33, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray33, (int) 'a');
        staticSaltsABMC1_1.key2(byteArray33, 1);
        staticSaltsABMC1_0.key2(byteArray33, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_0.key2(byteArray44, (int) (byte) 1);
        java.lang.Class<?> wildcardClass49 = byteArray44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_40.key2(byteArray57, (-1));
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_40.key2(byteArray67, 10);
        byte[] byteArray70 = null;
        staticSaltsABMC1_40.key2(byteArray70, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_73.key2(byteArray84, 1);
        staticSaltsABMC1_40.key2(byteArray84, (-1));
        staticSaltsABMC1_0.key2(byteArray84, 0);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_48.key2(byteArray66, 100);
        staticSaltsABMC1_0.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray78, (int) '4');
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 100);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray55, 10);
        staticSaltsABMC1_47.key2(byteArray55, 10);
        staticSaltsABMC1_33.key2(byteArray55, (int) (short) 10);
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_33.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_25.key2(byteArray66, 0);
        staticSaltsABMC1_17.key2(byteArray66, 0);
        staticSaltsABMC1_0.key2(byteArray66, (int) ' ');
        java.lang.Class<?> wildcardClass75 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_9.key2(byteArray25, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_30.key2(byteArray48, 100);
        staticSaltsABMC1_9.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_9.key2(byteArray67, (int) '#');
        byte[] byteArray75 = new byte[] { (byte) 10 };
        staticSaltsABMC1_9.key2(byteArray75, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 10);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray65, 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) (short) 1);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, 100);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        staticSaltsABMC1_12.key2(byteArray23, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        staticSaltsABMC1_12.key2(byteArray41, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray41, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_52.key2(byteArray63, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray74, 10);
        staticSaltsABMC1_66.key2(byteArray74, 10);
        staticSaltsABMC1_52.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray74, (int) ' ');
        java.lang.Class<?> wildcardClass83 = byteArray74.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) -1 };
        staticSaltsABMC1_67.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray87, (int) (byte) 100);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABMC1_58.key2(byteArray77, (int) 'a');
        staticSaltsABMC1_50.key2(byteArray77, 100);
        staticSaltsABMC1_35.key2(byteArray77, (int) (byte) 10);
        staticSaltsABMC1_20.key2(byteArray77, 100);
        byte[] byteArray88 = new byte[] {};
        staticSaltsABMC1_20.key2(byteArray88, (-1));
        staticSaltsABMC1_0.key2(byteArray88, (int) (short) -1);
        java.lang.Class<?> wildcardClass93 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray56, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_72.key2(byteArray82, 0);
        staticSaltsABMC1_71.key2(byteArray82, (int) (byte) 1);
        staticSaltsABMC1_63.key2(byteArray82, 0);
        staticSaltsABMC1_0.key2(byteArray82, 0);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray43, 10);
        staticSaltsABMC1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray67, (int) 'a');
        staticSaltsABMC1_35.key2(byteArray67, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_35.key2(byteArray76, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_35.key2(byteArray83, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 1);
        java.lang.Class<?> wildcardClass90 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        byte[] byteArray42 = null;
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 100);
        byte[] byteArray45 = null;
        staticSaltsABMC1_0.key2(byteArray45, (int) 'a');
        java.lang.Class<?> wildcardClass48 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, (int) (byte) -1);
        java.lang.Class<?> wildcardClass68 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray59, (int) 'a');
        staticSaltsABMC1_32.key2(byteArray59, 100);
        byte[] byteArray66 = null;
        staticSaltsABMC1_32.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_69.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_32.key2(byteArray88, (int) '4');
        staticSaltsABMC1_0.key2(byteArray88, 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        staticSaltsABMC1_65.key2(byteArray73, 10);
        staticSaltsABMC1_57.key2(byteArray73, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_87 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray90 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_87.key2(byteArray90, 10);
        staticSaltsABMC1_82.key2(byteArray90, 10);
        staticSaltsABMC1_0.key2(byteArray90, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray64, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray64, (int) ' ');
        byte[] byteArray71 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray71, (int) '#');
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, 0);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        staticSaltsABMC1_13.key2(byteArray38, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_13.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray58, 10);
        staticSaltsABMC1_13.key2(byteArray58, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray58, (-1));
        java.lang.Class<?> wildcardClass65 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray70, 0);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_55.key2(byteArray66, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray80, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass87 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (short) 10);
        java.lang.Class<?> wildcardClass20 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_16.key2(byteArray27, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray27, (int) (byte) 0);
        java.lang.Class<?> wildcardClass36 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_15.key2(byteArray60, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray60, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_67.key2(byteArray77, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_67.key2(byteArray84, (-1));
        byte[] byteArray94 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_67.key2(byteArray94, 10);
        staticSaltsABMC1_0.key2(byteArray94, (int) '#');
        java.lang.Class<?> wildcardClass99 = byteArray94.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray14, 10);
        staticSaltsABMC1_6.key2(byteArray14, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray38, (int) 'a');
        staticSaltsABMC1_6.key2(byteArray38, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_6.key2(byteArray47, 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) -1);
        java.lang.Class<?> wildcardClass81 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        byte[] byteArray21 = null;
        staticSaltsABMC1_16.key2(byteArray21, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray51, (int) 'a');
        staticSaltsABMC1_24.key2(byteArray51, 100);
        byte[] byteArray58 = null;
        staticSaltsABMC1_24.key2(byteArray58, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_61.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_74.key2(byteArray85, (int) (short) 10);
        staticSaltsABMC1_73.key2(byteArray85, (int) (short) 0);
        staticSaltsABMC1_61.key2(byteArray85, 0);
        staticSaltsABMC1_24.key2(byteArray85, (int) (byte) 1);
        staticSaltsABMC1_16.key2(byteArray85, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray85, (int) '#');
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) 1);
        java.lang.Class<?> wildcardClass67 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray24, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_21.key2(byteArray29, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray47, (int) (byte) 100);
        java.lang.Class<?> wildcardClass52 = byteArray47.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABMC1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_56.key2(byteArray83, 100);
        staticSaltsABMC1_35.key2(byteArray83, 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 1);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, (int) (byte) 100);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_43.key2(byteArray54, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray67, 10);
        staticSaltsABMC1_59.key2(byteArray67, 10);
        staticSaltsABMC1_42.key2(byteArray67, (int) '4');
        staticSaltsABMC1_0.key2(byteArray67, (int) (short) 0);
        byte[] byteArray76 = null;
        staticSaltsABMC1_0.key2(byteArray76, (int) '4');
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_52.key2(byteArray60, 10);
        staticSaltsABMC1_38.key2(byteArray60, (int) (short) 10);
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_38.key2(byteArray71, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_77.key2(byteArray88, (int) (short) 10);
        staticSaltsABMC1_76.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_30.key2(byteArray88, 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        staticSaltsABMC1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray49, 0);
        staticSaltsABMC1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray72, 10);
        staticSaltsABMC1_64.key2(byteArray72, 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray72, (int) (byte) -1);
        java.lang.Class<?> wildcardClass81 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_0.key2(byteArray55, (int) (byte) 10);
        java.lang.Class<?> wildcardClass60 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_0.key2(byteArray54, (-1));
        java.lang.Class<?> wildcardClass59 = byteArray54.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_15.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_15.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) '#');
        byte[] byteArray69 = null;
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) -1);
        java.lang.Class<?> wildcardClass72 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, (int) 'a');
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_44.key2(byteArray54, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_75.key2(byteArray78, (int) (short) 0);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_75.key2(byteArray86, (int) (short) 10);
        staticSaltsABMC1_67.key2(byteArray86, (int) 'a');
        staticSaltsABMC1_59.key2(byteArray86, 100);
        staticSaltsABMC1_44.key2(byteArray86, (int) (byte) 10);
        staticSaltsABMC1_29.key2(byteArray86, 100);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 0);
        java.lang.Class<?> wildcardClass99 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_41.key2(byteArray66, (int) 'a');
        byte[] byteArray73 = null;
        staticSaltsABMC1_41.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_76.key2(byteArray84, (int) (short) 1);
        staticSaltsABMC1_41.key2(byteArray84, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray84, (int) '4');
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_48.key2(byteArray66, 100);
        staticSaltsABMC1_0.key2(byteArray66, (-1));
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (short) 10);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray35 = null;
        staticSaltsABMC1_0.key2(byteArray35, (-1));
        java.lang.Class<?> wildcardClass38 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        staticSaltsABMC1_13.key2(byteArray52, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 10 };
        staticSaltsABMC1_13.key2(byteArray62, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_65.key2(byteArray76, 1);
        staticSaltsABMC1_13.key2(byteArray76, 0);
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 100);
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, 1);
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        byte[] byteArray18 = null;
        staticSaltsABMC1_0.key2(byteArray18, 0);
        java.lang.Class<?> wildcardClass21 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray73, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_48.key2(byteArray80, (int) ' ');
        staticSaltsABMC1_34.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass89 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_55.key2(byteArray66, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray66, 100);
        java.lang.Class<?> wildcardClass71 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray21 = null;
        staticSaltsABMC1_13.key2(byteArray21, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray32, 10);
        staticSaltsABMC1_24.key2(byteArray32, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_24.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_24.key2(byteArray65, 0);
        staticSaltsABMC1_13.key2(byteArray65, 0);
        staticSaltsABMC1_0.key2(byteArray65, (int) (short) -1);
        byte[] byteArray74 = null;
        staticSaltsABMC1_0.key2(byteArray74, 100);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) -1);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_37.key2(byteArray62, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray90, (int) 'a');
        java.lang.Class<?> wildcardClass97 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_15.key2(byteArray26, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_15.key2(byteArray40, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        staticSaltsABMC1_15.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_62.key2(byteArray79, (-1));
        staticSaltsABMC1_15.key2(byteArray79, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_15.key2(byteArray88, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray88, 10);
        java.lang.Class<?> wildcardClass95 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        staticSaltsABMC1_55.key2(byteArray73, 100);
        staticSaltsABMC1_34.key2(byteArray73, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 10 };
        staticSaltsABMC1_34.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_13.key2(byteArray83, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) 10);
        java.lang.Class<?> wildcardClass90 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_8.key2(byteArray15, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray15, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_22.key2(byteArray29, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_22.key2(byteArray63, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray63, (int) ' ');
        java.lang.Class<?> wildcardClass76 = byteArray63.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray66 = new byte[] { (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_77.key2(byteArray88, (int) (byte) 1);
        staticSaltsABMC1_69.key2(byteArray88, 0);
        staticSaltsABMC1_0.key2(byteArray88, (int) (byte) -1);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_0.key2(byteArray51, (int) '#');
        java.lang.Class<?> wildcardClass56 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_70.key2(byteArray78, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray78, (int) (byte) 0);
        java.lang.Class<?> wildcardClass85 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray9, 10);
        staticSaltsABMC1_1.key2(byteArray9, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_22.key2(byteArray33, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray33, (int) 'a');
        staticSaltsABMC1_1.key2(byteArray33, 1);
        staticSaltsABMC1_0.key2(byteArray33, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_0.key2(byteArray44, (int) (byte) 1);
        java.lang.Class<?> wildcardClass49 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray44 = null;
        staticSaltsABMC1_36.key2(byteArray44, (int) (short) 100);
        byte[] byteArray47 = null;
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_50.key2(byteArray66, (int) (short) 1);
        staticSaltsABMC1_36.key2(byteArray66, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) -1);
        java.lang.Class<?> wildcardClass77 = byteArray66.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) 1);
        java.lang.Class<?> wildcardClass67 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray64, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_40.key2(byteArray80, 1);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 1);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray69, 10);
        staticSaltsABMC1_61.key2(byteArray69, 10);
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) 10);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray25, 10);
        staticSaltsABMC1_17.key2(byteArray25, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        staticSaltsABMC1_30.key2(byteArray49, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_17.key2(byteArray58, 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) '#');
        byte[] byteArray65 = null;
        staticSaltsABMC1_0.key2(byteArray65, 0);
        java.lang.Class<?> wildcardClass68 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray76, (int) ' ');
        java.lang.Class<?> wildcardClass79 = byteArray76.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray23, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_31.key2(byteArray41, 0);
        staticSaltsABMC1_30.key2(byteArray41, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_48.key2(byteArray59, (int) (byte) 1);
        staticSaltsABMC1_30.key2(byteArray59, (int) (byte) 0);
        staticSaltsABMC1_12.key2(byteArray59, (int) '#');
        staticSaltsABMC1_0.key2(byteArray59, (int) (byte) -1);
        byte[] byteArray72 = null;
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) 0);
        java.lang.Class<?> wildcardClass75 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_24.key2(byteArray40, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_45.key2(byteArray63, 100);
        staticSaltsABMC1_24.key2(byteArray63, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray63, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray77, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_74.key2(byteArray82, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 100);
        java.lang.Class<?> wildcardClass89 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        byte[] byteArray27 = null;
        staticSaltsABMC1_19.key2(byteArray27, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_51.key2(byteArray62, (int) (short) 10);
        staticSaltsABMC1_43.key2(byteArray62, (int) 'a');
        staticSaltsABMC1_30.key2(byteArray62, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_30.key2(byteArray71, 0);
        staticSaltsABMC1_19.key2(byteArray71, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        staticSaltsABMC1_19.key2(byteArray81, (int) (byte) 0);
        staticSaltsABMC1_11.key2(byteArray81, (-1));
        staticSaltsABMC1_0.key2(byteArray81, 100);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABMC1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_56.key2(byteArray83, 100);
        staticSaltsABMC1_35.key2(byteArray83, 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 1);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, 100);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_0.key2(byteArray55, (int) (byte) 10);
        byte[] byteArray60 = null;
        staticSaltsABMC1_0.key2(byteArray60, (int) '#');
        java.lang.Class<?> wildcardClass63 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_6.key2(byteArray16, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        staticSaltsABMC1_6.key2(byteArray31, (int) 'a');
        byte[] byteArray38 = null;
        staticSaltsABMC1_6.key2(byteArray38, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_41.key2(byteArray51, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_41.key2(byteArray58, (-1));
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_41.key2(byteArray68, 10);
        staticSaltsABMC1_6.key2(byteArray68, 100);
        byte[] byteArray73 = null;
        staticSaltsABMC1_6.key2(byteArray73, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        staticSaltsABMC1_6.key2(byteArray79, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) -1);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (-1));
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray64, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_69.key2(byteArray72, (int) (short) 0);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_69.key2(byteArray80, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_40.key2(byteArray80, 1);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 1);
        java.lang.Class<?> wildcardClass89 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_8.key2(byteArray15, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray15, (int) '4');
        java.lang.Class<?> wildcardClass22 = byteArray15.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_34.key2(byteArray50, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_57.key2(byteArray74, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray82, 10);
        staticSaltsABMC1_57.key2(byteArray82, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray82, (-1));
        java.lang.Class<?> wildcardClass89 = byteArray82.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_34.key2(byteArray45, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray73, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_48.key2(byteArray80, (int) ' ');
        staticSaltsABMC1_34.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray41, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        staticSaltsABMC1_46.key2(byteArray49, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_54.key2(byteArray64, 0);
        staticSaltsABMC1_46.key2(byteArray64, 100);
        staticSaltsABMC1_25.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) 100);
        byte[] byteArray75 = null;
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) -1);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, 1);
        java.lang.Class<?> wildcardClass43 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        staticSaltsABMC1_17.key2(byteArray44, 100);
        staticSaltsABMC1_0.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_0.key2(byteArray63, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray73, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray78, (int) '#');
        staticSaltsABMC1_70.key2(byteArray78, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray78, (int) (byte) 0);
        byte[] byteArray85 = null;
        staticSaltsABMC1_0.key2(byteArray85, 10);
        java.lang.Class<?> wildcardClass88 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_0.key2(byteArray54, (-1));
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (short) 0);
        java.lang.Class<?> wildcardClass62 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray18, 10);
        staticSaltsABMC1_10.key2(byteArray18, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_10.key2(byteArray42, 1);
        staticSaltsABMC1_9.key2(byteArray42, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_51.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_51.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_9.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 100);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray56, (int) (short) -1);
        byte[] byteArray63 = null;
        staticSaltsABMC1_0.key2(byteArray63, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_66.key2(byteArray84, 100);
        byte[] byteArray91 = new byte[] {};
        staticSaltsABMC1_66.key2(byteArray91, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray91, (int) (byte) 10);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_0.key2(byteArray51, (int) '#');
        java.lang.Class<?> wildcardClass56 = byteArray51.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_48.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray65, 10);
        staticSaltsABMC1_57.key2(byteArray65, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_70.key2(byteArray89, (int) 'a');
        staticSaltsABMC1_57.key2(byteArray89, 1);
        staticSaltsABMC1_48.key2(byteArray89, (-1));
        staticSaltsABMC1_0.key2(byteArray89, 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_16.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray44, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_49.key2(byteArray60, (int) (short) 10);
        staticSaltsABMC1_25.key2(byteArray60, (int) 'a');
        staticSaltsABMC1_16.key2(byteArray60, (-1));
        staticSaltsABMC1_0.key2(byteArray60, (int) (byte) -1);
        java.lang.Class<?> wildcardClass69 = byteArray60.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_22.key2(byteArray32, 0);
        staticSaltsABMC1_14.key2(byteArray32, 100);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_14.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_48.key2(byteArray59, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray73, (int) (short) -1);
        staticSaltsABMC1_14.key2(byteArray73, (int) '4');
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) -1);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) '4');
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABMC1_35.key2(byteArray51, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_56.key2(byteArray83, 100);
        staticSaltsABMC1_35.key2(byteArray83, 0);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 1);
        byte[] byteArray94 = null;
        staticSaltsABMC1_0.key2(byteArray94, 100);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) '#');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray49, 10);
        staticSaltsABMC1_41.key2(byteArray49, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_54.key2(byteArray73, (int) 'a');
        staticSaltsABMC1_41.key2(byteArray73, 1);
        staticSaltsABMC1_0.key2(byteArray73, (int) 'a');
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_12.key2(byteArray22, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_27.key2(byteArray37, 0);
        staticSaltsABMC1_12.key2(byteArray37, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray47, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        byte[] byteArray56 = null;
        staticSaltsABMC1_0.key2(byteArray56, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_59.key2(byteArray70, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray81, 10);
        staticSaltsABMC1_73.key2(byteArray81, 10);
        staticSaltsABMC1_59.key2(byteArray81, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray81, (-1));
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray58, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_65.key2(byteArray72, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray72, 100);
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 0);
        java.lang.Class<?> wildcardClass27 = byteArray22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_11.key2(byteArray21, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_11.key2(byteArray28, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray36, 10);
        staticSaltsABMC1_11.key2(byteArray36, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_59.key2(byteArray70, (int) (byte) 1);
        staticSaltsABMC1_41.key2(byteArray70, (int) (byte) 0);
        staticSaltsABMC1_11.key2(byteArray70, (int) '#');
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        java.lang.Class<?> wildcardClass83 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray45, 10);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        staticSaltsABMC1_50.key2(byteArray68, 100);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray80, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_77.key2(byteArray85, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray85, (int) (byte) 10);
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, 0);
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_37.key2(byteArray47, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_37.key2(byteArray54, (-1));
        staticSaltsABMC1_0.key2(byteArray54, (int) (byte) 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_0.key2(byteArray61, (int) (byte) 100);
        byte[] byteArray64 = null;
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray70, 0);
        java.lang.Class<?> wildcardClass77 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray37 = null;
        staticSaltsABMC1_0.key2(byteArray37, (int) (byte) 100);
        byte[] byteArray40 = null;
        staticSaltsABMC1_0.key2(byteArray40, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        staticSaltsABMC1_51.key2(byteArray59, 10);
        staticSaltsABMC1_43.key2(byteArray59, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_66.key2(byteArray76, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_66.key2(byteArray83, (-1));
        byte[] byteArray93 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_66.key2(byteArray93, 10);
        staticSaltsABMC1_43.key2(byteArray93, 10);
        staticSaltsABMC1_0.key2(byteArray93, 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        staticSaltsABMC1_11.key2(byteArray22, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_34.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        staticSaltsABMC1_52.key2(byteArray63, (int) (byte) 1);
        staticSaltsABMC1_34.key2(byteArray63, (int) (byte) 0);
        staticSaltsABMC1_29.key2(byteArray63, (-1));
        staticSaltsABMC1_11.key2(byteArray63, (int) '4');
        byte[] byteArray76 = null;
        staticSaltsABMC1_11.key2(byteArray76, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_11.key2(byteArray90, 0);
        staticSaltsABMC1_0.key2(byteArray90, (int) (short) -1);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_29.key2(byteArray39, 0);
        staticSaltsABMC1_21.key2(byteArray39, 100);
        staticSaltsABMC1_0.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_56.key2(byteArray66, 0);
        staticSaltsABMC1_48.key2(byteArray66, 100);
        staticSaltsABMC1_0.key2(byteArray66, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_75.key2(byteArray86, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 100);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) (short) -1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray9, 10);
        staticSaltsABMC1_1.key2(byteArray9, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_22.key2(byteArray33, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray33, (int) 'a');
        staticSaltsABMC1_1.key2(byteArray33, 1);
        staticSaltsABMC1_0.key2(byteArray33, (int) (byte) 100);
        byte[] byteArray42 = null;
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        byte[] byteArray45 = null;
        staticSaltsABMC1_0.key2(byteArray45, (int) (short) 100);
        java.lang.Class<?> wildcardClass48 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_36.key2(byteArray61, (int) 'a');
        byte[] byteArray68 = null;
        staticSaltsABMC1_36.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        staticSaltsABMC1_36.key2(byteArray81, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray81, 10);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) (byte) 0);
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) (byte) 10);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_11.key2(byteArray22, (int) (short) 10);
        staticSaltsABMC1_6.key2(byteArray22, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        staticSaltsABMC1_27.key2(byteArray45, 100);
        staticSaltsABMC1_6.key2(byteArray45, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray45, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_56.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, 0);
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 1);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) (byte) 1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_17.key2(byteArray34, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray42, 10);
        staticSaltsABMC1_17.key2(byteArray42, (int) (short) 100);
        staticSaltsABMC1_0.key2(byteArray42, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray68, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray84, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray84, 1);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_44.key2(byteArray55, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray55, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray55, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_70.key2(byteArray89, (int) 'a');
        staticSaltsABMC1_62.key2(byteArray89, 100);
        staticSaltsABMC1_0.key2(byteArray89, 1);
        java.lang.Class<?> wildcardClass98 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray82, (int) (short) 100);
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, 1);
        java.lang.Class<?> wildcardClass90 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        byte[] byteArray43 = null;
        staticSaltsABMC1_28.key2(byteArray43, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray54, 10);
        staticSaltsABMC1_46.key2(byteArray54, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_67.key2(byteArray78, (int) (short) 10);
        staticSaltsABMC1_59.key2(byteArray78, (int) 'a');
        staticSaltsABMC1_46.key2(byteArray78, 1);
        staticSaltsABMC1_28.key2(byteArray78, 0);
        staticSaltsABMC1_0.key2(byteArray78, (int) ' ');
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        byte[] byteArray36 = null;
        staticSaltsABMC1_0.key2(byteArray36, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray42, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_74.key2(byteArray84, 0);
        staticSaltsABMC1_66.key2(byteArray84, 100);
        staticSaltsABMC1_45.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_39.key2(byteArray84, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray84, (int) '4');
        java.lang.Class<?> wildcardClass97 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_5.key2(byteArray12, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_17.key2(byteArray35, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        staticSaltsABMC1_42.key2(byteArray67, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_42.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_17.key2(byteArray77, (int) '4');
        staticSaltsABMC1_5.key2(byteArray77, (int) '#');
        staticSaltsABMC1_0.key2(byteArray77, (int) (byte) 100);
        java.lang.Class<?> wildcardClass90 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray16 = null;
        staticSaltsABMC1_8.key2(byteArray16, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray27, 10);
        staticSaltsABMC1_19.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        staticSaltsABMC1_32.key2(byteArray51, (int) 'a');
        staticSaltsABMC1_19.key2(byteArray51, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_19.key2(byteArray60, 0);
        staticSaltsABMC1_8.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray70, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray70, (int) '#');
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        byte[] byteArray34 = null;
        staticSaltsABMC1_0.key2(byteArray34, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_37.key2(byteArray48, 1);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_57.key2(byteArray64, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) 0);
        byte[] byteArray71 = null;
        staticSaltsABMC1_0.key2(byteArray71, (int) (byte) 1);
        java.lang.Class<?> wildcardClass74 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_13.key2(byteArray23, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_28.key2(byteArray38, 0);
        staticSaltsABMC1_13.key2(byteArray38, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_13.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray58, 10);
        staticSaltsABMC1_13.key2(byteArray58, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray58, (-1));
        java.lang.Class<?> wildcardClass65 = byteArray58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_73.key2(byteArray80, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray80, 0);
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, (int) 'a');
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, 1);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray56, (int) (short) -1);
        byte[] byteArray63 = null;
        staticSaltsABMC1_0.key2(byteArray63, (int) (byte) -1);
        byte[] byteArray66 = null;
        staticSaltsABMC1_0.key2(byteArray66, (int) 'a');
        java.lang.Class<?> wildcardClass69 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_0.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_65.key2(byteArray72, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_78.key2(byteArray89, (int) (short) 10);
        staticSaltsABMC1_77.key2(byteArray89, (int) (short) 0);
        staticSaltsABMC1_65.key2(byteArray89, 0);
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) 0);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        staticSaltsABMC1_1.key2(byteArray26, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray46, 10);
        staticSaltsABMC1_1.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray51 = new byte[] {};
        staticSaltsABMC1_1.key2(byteArray51, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_1.key2(byteArray72, 0);
        staticSaltsABMC1_0.key2(byteArray72, (-1));
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_24.key2(byteArray35, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray35, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray52, 10);
        staticSaltsABMC1_44.key2(byteArray52, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray76, (int) 'a');
        staticSaltsABMC1_44.key2(byteArray76, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_44.key2(byteArray85, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABMC1_90.key2(byteArray92, (int) '#');
        staticSaltsABMC1_44.key2(byteArray92, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass99 = byteArray92.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_47.key2(byteArray58, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray58, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_63.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray69, 0);
        staticSaltsABMC1_0.key2(byteArray69, (int) (byte) 1);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        byte[] byteArray32 = null;
        staticSaltsABMC1_17.key2(byteArray32, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray43, 10);
        staticSaltsABMC1_35.key2(byteArray43, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_48.key2(byteArray67, (int) 'a');
        staticSaltsABMC1_35.key2(byteArray67, 1);
        staticSaltsABMC1_17.key2(byteArray67, 0);
        staticSaltsABMC1_0.key2(byteArray67, (int) (byte) 10);
        java.lang.Class<?> wildcardClass78 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray37, 10);
        staticSaltsABMC1_29.key2(byteArray37, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_29.key2(byteArray61, 1);
        staticSaltsABMC1_28.key2(byteArray61, (int) (byte) 100);
        staticSaltsABMC1_0.key2(byteArray61, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_73.key2(byteArray83, 0);
        staticSaltsABMC1_72.key2(byteArray83, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray83, (int) (byte) 10);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_17.key2(byteArray28, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_17.key2(byteArray42, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_47.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_47.key2(byteArray57, 0);
        staticSaltsABMC1_17.key2(byteArray57, 0);
        staticSaltsABMC1_0.key2(byteArray57, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_74.key2(byteArray77, (int) (short) 0);
        staticSaltsABMC1_66.key2(byteArray77, 1);
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) -1);
        java.lang.Class<?> wildcardClass86 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray44, 1);
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_53.key2(byteArray70, (-1));
        staticSaltsABMC1_0.key2(byteArray70, (int) (byte) 0);
        java.lang.Class<?> wildcardClass77 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray39, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_44.key2(byteArray54, 0);
        staticSaltsABMC1_14.key2(byteArray54, 0);
        byte[] byteArray61 = null;
        staticSaltsABMC1_14.key2(byteArray61, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_64.key2(byteArray74, 0);
        staticSaltsABMC1_14.key2(byteArray74, 1);
        staticSaltsABMC1_0.key2(byteArray74, 0);
        byte[] byteArray83 = null;
        staticSaltsABMC1_0.key2(byteArray83, 0);
        byte[] byteArray86 = null;
        staticSaltsABMC1_0.key2(byteArray86, 0);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray29 = null;
        staticSaltsABMC1_21.key2(byteArray29, (int) (short) 100);
        byte[] byteArray32 = null;
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray51, 10);
        staticSaltsABMC1_43.key2(byteArray51, 10);
        staticSaltsABMC1_35.key2(byteArray51, (int) (short) 1);
        staticSaltsABMC1_21.key2(byteArray51, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray51, 0);
        java.lang.Class<?> wildcardClass62 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_12.key2(byteArray23, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray34, 10);
        staticSaltsABMC1_26.key2(byteArray34, 10);
        staticSaltsABMC1_12.key2(byteArray34, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray34, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_43.key2(byteArray50, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray67, (int) (short) 0);
        staticSaltsABMC1_43.key2(byteArray67, 0);
        byte[] byteArray74 = null;
        staticSaltsABMC1_43.key2(byteArray74, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_43.key2(byteArray80, (int) ' ');
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) 0);
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray38, (int) 'a');
        staticSaltsABMC1_11.key2(byteArray38, 100);
        byte[] byteArray45 = null;
        staticSaltsABMC1_11.key2(byteArray45, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_48.key2(byteArray65, (-1));
        staticSaltsABMC1_11.key2(byteArray65, (int) (byte) 0);
        byte[] byteArray72 = null;
        staticSaltsABMC1_11.key2(byteArray72, (int) (byte) 100);
        byte[] byteArray75 = null;
        staticSaltsABMC1_11.key2(byteArray75, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_11.key2(byteArray80, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray80, (int) '4');
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray65, 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 10);
        byte[] byteArray73 = null;
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 10);
        java.lang.Class<?> wildcardClass76 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_30.key2(byteArray36, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray36, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_41.key2(byteArray49, (int) (short) 100);
        byte[] byteArray52 = null;
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 0);
        byte[] byteArray55 = null;
        staticSaltsABMC1_41.key2(byteArray55, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_58.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_58.key2(byteArray75, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray83, 10);
        staticSaltsABMC1_58.key2(byteArray83, (int) (short) 100);
        staticSaltsABMC1_41.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_92 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray95 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_92.key2(byteArray95, 10);
        staticSaltsABMC1_0.key2(byteArray95, (int) '4');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_52.key2(byteArray70, 100);
        staticSaltsABMC1_0.key2(byteArray70, (int) 'a');
        byte[] byteArray79 = null;
        staticSaltsABMC1_0.key2(byteArray79, (int) (short) 10);
        byte[] byteArray82 = null;
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 10);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        staticSaltsABMC1_51.key2(byteArray59, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_51.key2(byteArray83, 1);
        staticSaltsABMC1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_52.key2(byteArray70, 100);
        staticSaltsABMC1_0.key2(byteArray70, (int) 'a');
        java.lang.Class<?> wildcardClass79 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        staticSaltsABMC1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray49, 0);
        staticSaltsABMC1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray72, 10);
        staticSaltsABMC1_64.key2(byteArray72, 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray72, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray84, 10);
        staticSaltsABMC1_0.key2(byteArray84, (int) '#');
        java.lang.Class<?> wildcardClass89 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray22, 10);
        staticSaltsABMC1_14.key2(byteArray22, 10);
        staticSaltsABMC1_0.key2(byteArray22, (int) (short) 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        byte[] byteArray44 = null;
        staticSaltsABMC1_36.key2(byteArray44, (int) (short) 100);
        byte[] byteArray47 = null;
        staticSaltsABMC1_36.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray66, 10);
        staticSaltsABMC1_58.key2(byteArray66, 10);
        staticSaltsABMC1_50.key2(byteArray66, (int) (short) 1);
        staticSaltsABMC1_36.key2(byteArray66, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray66, (int) (short) -1);
        byte[] byteArray77 = null;
        staticSaltsABMC1_0.key2(byteArray77, (int) (short) 100);
        java.lang.Class<?> wildcardClass80 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_16.key2(byteArray26, 0);
        staticSaltsABMC1_8.key2(byteArray26, 100);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_8.key2(byteArray39, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_42.key2(byteArray53, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray67, (int) (short) -1);
        staticSaltsABMC1_8.key2(byteArray67, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray82, 10);
        staticSaltsABMC1_74.key2(byteArray82, 10);
        staticSaltsABMC1_8.key2(byteArray82, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray82, (int) (byte) 0);
        java.lang.Class<?> wildcardClass91 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        staticSaltsABMC1_40.key2(byteArray65, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_40.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray75, 10);
        java.lang.Class<?> wildcardClass84 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_51.key2(byteArray68, (-1));
        staticSaltsABMC1_0.key2(byteArray68, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_0.key2(byteArray77, 100);
        java.lang.Class<?> wildcardClass82 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray33, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_30.key2(byteArray38, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 100);
        java.lang.Class<?> wildcardClass45 = byteArray38.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_6.key2(byteArray17, (int) (short) 10);
        staticSaltsABMC1_1.key2(byteArray17, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray30, 10);
        staticSaltsABMC1_22.key2(byteArray30, 10);
        staticSaltsABMC1_1.key2(byteArray30, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_37.key2(byteArray56, (int) 'a');
        staticSaltsABMC1_1.key2(byteArray56, (int) '4');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        staticSaltsABMC1_1.key2(byteArray73, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray73, 100);
        java.lang.Class<?> wildcardClass82 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_9.key2(byteArray27, 100);
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_9.key2(byteArray40, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_43.key2(byteArray50, (int) (byte) 10);
        staticSaltsABMC1_9.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_57.key2(byteArray68, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_71.key2(byteArray82, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray82, (int) (short) -1);
        staticSaltsABMC1_9.key2(byteArray82, 0);
        staticSaltsABMC1_0.key2(byteArray82, (int) '#');
        byte[] byteArray91 = null;
        staticSaltsABMC1_0.key2(byteArray91, (int) (short) 100);
        java.lang.Class<?> wildcardClass94 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_25.key2(byteArray52, 100);
        staticSaltsABMC1_0.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray64 = new byte[] { (byte) 100 };
        staticSaltsABMC1_62.key2(byteArray64, (int) '#');
        staticSaltsABMC1_61.key2(byteArray64, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray64, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_71.key2(byteArray81, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_71.key2(byteArray88, (-1));
        staticSaltsABMC1_0.key2(byteArray88, (int) ' ');
        java.lang.Class<?> wildcardClass95 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_0.key2(byteArray40, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray90, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray90, (int) (byte) 0);
        byte[] byteArray97 = null;
        staticSaltsABMC1_0.key2(byteArray97, (int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_20.key2(byteArray30, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_35.key2(byteArray45, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_66.key2(byteArray77, (int) (short) 10);
        staticSaltsABMC1_58.key2(byteArray77, (int) 'a');
        staticSaltsABMC1_50.key2(byteArray77, 100);
        staticSaltsABMC1_35.key2(byteArray77, (int) (byte) 10);
        staticSaltsABMC1_20.key2(byteArray77, 100);
        byte[] byteArray88 = new byte[] {};
        staticSaltsABMC1_20.key2(byteArray88, (-1));
        staticSaltsABMC1_0.key2(byteArray88, (int) (short) -1);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_9.key2(byteArray19, 0);
        staticSaltsABMC1_8.key2(byteArray19, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray19, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_28.key2(byteArray35, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray52, (int) (short) 0);
        staticSaltsABMC1_28.key2(byteArray52, 0);
        staticSaltsABMC1_0.key2(byteArray52, (int) ' ');
        java.lang.Class<?> wildcardClass61 = byteArray52.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, (int) (byte) 10);
        byte[] byteArray16 = null;
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_34.key2(byteArray59, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray69 = new byte[] { (byte) 100 };
        staticSaltsABMC1_67.key2(byteArray69, (int) '#');
        staticSaltsABMC1_66.key2(byteArray69, (int) (short) 0);
        staticSaltsABMC1_34.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_76.key2(byteArray79, 10);
        staticSaltsABMC1_34.key2(byteArray79, (int) (byte) -1);
        staticSaltsABMC1_19.key2(byteArray79, 100);
        staticSaltsABMC1_0.key2(byteArray79, (int) 'a');
        java.lang.Class<?> wildcardClass88 = byteArray79.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        byte[] byteArray52 = null;
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) (short) -1);
        java.lang.Class<?> wildcardClass58 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_33.key2(byteArray40, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_45.key2(byteArray70, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_45.key2(byteArray80, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray80, 10);
        staticSaltsABMC1_0.key2(byteArray80, (int) (short) -1);
        java.lang.Class<?> wildcardClass91 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_22.key2(byteArray40, 100);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_22.key2(byteArray53, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray81, (int) (short) -1);
        staticSaltsABMC1_22.key2(byteArray81, (int) '4');
        staticSaltsABMC1_21.key2(byteArray81, (int) '4');
        staticSaltsABMC1_0.key2(byteArray81, (int) '#');
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray14, 10);
        staticSaltsABMC1_6.key2(byteArray14, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray30 = new byte[] { (byte) 100 };
        staticSaltsABMC1_28.key2(byteArray30, (int) '#');
        staticSaltsABMC1_27.key2(byteArray30, (int) (short) 0);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_27.key2(byteArray38, (int) (short) 10);
        staticSaltsABMC1_19.key2(byteArray38, (int) 'a');
        staticSaltsABMC1_6.key2(byteArray38, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_6.key2(byteArray47, 0);
        staticSaltsABMC1_0.key2(byteArray47, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100 };
        staticSaltsABMC1_70.key2(byteArray72, (int) '#');
        staticSaltsABMC1_62.key2(byteArray72, 0);
        staticSaltsABMC1_54.key2(byteArray72, 100);
        staticSaltsABMC1_0.key2(byteArray72, (int) (short) -1);
        java.lang.Class<?> wildcardClass81 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_33.key2(byteArray52, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray52, (int) (byte) 10);
        java.lang.Class<?> wildcardClass59 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray3, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 1);
        byte[] byteArray13 = null;
        staticSaltsABMC1_0.key2(byteArray13, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_30.key2(byteArray41, (int) (short) 10);
        staticSaltsABMC1_16.key2(byteArray41, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_16.key2(byteArray48, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_53.key2(byteArray70, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray78, 10);
        staticSaltsABMC1_53.key2(byteArray78, (int) (short) 100);
        staticSaltsABMC1_16.key2(byteArray78, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray78, 1);
        byte[] byteArray87 = null;
        staticSaltsABMC1_0.key2(byteArray87, (int) (short) 100);
        byte[] byteArray90 = null;
        staticSaltsABMC1_0.key2(byteArray90, (int) (short) 100);
        java.lang.Class<?> wildcardClass93 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_8.key2(byteArray18, 0);
        staticSaltsABMC1_0.key2(byteArray18, 100);
        byte[] byteArray25 = new byte[] {};
        staticSaltsABMC1_0.key2(byteArray25, (int) (byte) 100);
        byte[] byteArray28 = null;
        staticSaltsABMC1_0.key2(byteArray28, (int) (short) 100);
        java.lang.Class<?> wildcardClass31 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray89, 10);
        staticSaltsABMC1_81.key2(byteArray89, 10);
        staticSaltsABMC1_73.key2(byteArray89, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = byteArray89.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_22.key2(byteArray40, 100);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_22.key2(byteArray53, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray81, (int) (short) -1);
        staticSaltsABMC1_22.key2(byteArray81, (int) '4');
        staticSaltsABMC1_8.key2(byteArray81, (int) (byte) -1);
        staticSaltsABMC1_0.key2(byteArray81, (int) '#');
        byte[] byteArray92 = null;
        staticSaltsABMC1_0.key2(byteArray92, (int) ' ');
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, (int) (short) 0);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, (int) (short) 100);
        byte[] byteArray11 = null;
        staticSaltsABMC1_0.key2(byteArray11, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_22.key2(byteArray33, (int) (short) 10);
        staticSaltsABMC1_14.key2(byteArray33, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_38.key2(byteArray49, (int) (short) 10);
        byte[] byteArray52 = null;
        staticSaltsABMC1_38.key2(byteArray52, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_55.key2(byteArray65, 0);
        staticSaltsABMC1_38.key2(byteArray65, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_72.key2(byteArray78, (int) (short) 0);
        staticSaltsABMC1_38.key2(byteArray78, (int) (short) 1);
        staticSaltsABMC1_14.key2(byteArray78, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray78, 1);
        java.lang.Class<?> wildcardClass87 = byteArray78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        staticSaltsABMC1_9.key2(byteArray12, (int) (short) 0);
        staticSaltsABMC1_1.key2(byteArray12, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_24.key2(byteArray35, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_42.key2(byteArray53, (int) (byte) 1);
        staticSaltsABMC1_24.key2(byteArray53, (int) (byte) 0);
        staticSaltsABMC1_19.key2(byteArray53, (-1));
        staticSaltsABMC1_1.key2(byteArray53, (int) '4');
        staticSaltsABMC1_0.key2(byteArray53, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_68.key2(byteArray75, (int) (byte) 10);
        staticSaltsABMC1_0.key2(byteArray75, 0);
        java.lang.Class<?> wildcardClass82 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        staticSaltsABMC1_12.key2(byteArray15, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        staticSaltsABMC1_20.key2(byteArray23, (int) (short) 0);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_20.key2(byteArray31, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray31, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray52, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_57.key2(byteArray75, 100);
        staticSaltsABMC1_36.key2(byteArray75, (int) (short) 0);
        staticSaltsABMC1_12.key2(byteArray75, (-1));
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        java.lang.Class<?> wildcardClass88 = byteArray75.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_24.key2(byteArray35, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray35, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray52, 10);
        staticSaltsABMC1_44.key2(byteArray52, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_65.key2(byteArray76, (int) (short) 10);
        staticSaltsABMC1_57.key2(byteArray76, (int) 'a');
        staticSaltsABMC1_44.key2(byteArray76, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_83 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray85 = new byte[] { (byte) 100 };
        staticSaltsABMC1_83.key2(byteArray85, (int) '#');
        staticSaltsABMC1_44.key2(byteArray85, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_90 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray92 = new byte[] { (byte) 100 };
        staticSaltsABMC1_90.key2(byteArray92, (int) '#');
        staticSaltsABMC1_44.key2(byteArray92, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray92, (int) (short) 10);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_14.key2(byteArray24, 0);
        staticSaltsABMC1_6.key2(byteArray24, 100);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_6.key2(byteArray37, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_40.key2(byteArray51, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_54.key2(byteArray65, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray65, (int) (short) -1);
        staticSaltsABMC1_6.key2(byteArray65, (int) '4');
        staticSaltsABMC1_5.key2(byteArray65, (int) '4');
        staticSaltsABMC1_0.key2(byteArray65, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray87 = new byte[] { (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray87, (int) '#');
        staticSaltsABMC1_84.key2(byteArray87, (int) (short) 0);
        staticSaltsABMC1_76.key2(byteArray87, 1);
        staticSaltsABMC1_0.key2(byteArray87, (int) 'a');
        byte[] byteArray96 = null;
        staticSaltsABMC1_0.key2(byteArray96, (int) ' ');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray11, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_8.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray29 = null;
        staticSaltsABMC1_21.key2(byteArray29, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray40, 10);
        staticSaltsABMC1_32.key2(byteArray40, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_53.key2(byteArray64, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray64, (int) 'a');
        staticSaltsABMC1_32.key2(byteArray64, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_32.key2(byteArray73, 0);
        staticSaltsABMC1_21.key2(byteArray73, 0);
        staticSaltsABMC1_8.key2(byteArray73, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray73, (int) (short) 10);
        java.lang.Class<?> wildcardClass84 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_0.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_73.key2(byteArray83, 0);
        staticSaltsABMC1_65.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, 100);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray14 = new byte[] { (byte) 100 };
        staticSaltsABMC1_12.key2(byteArray14, (int) '#');
        staticSaltsABMC1_11.key2(byteArray14, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_11.key2(byteArray21, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_11.key2(byteArray28, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray36, 10);
        staticSaltsABMC1_11.key2(byteArray36, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_41.key2(byteArray52, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_59.key2(byteArray70, (int) (byte) 1);
        staticSaltsABMC1_41.key2(byteArray70, (int) (byte) 0);
        staticSaltsABMC1_11.key2(byteArray70, (int) '#');
        staticSaltsABMC1_0.key2(byteArray70, (int) '4');
        java.lang.Class<?> wildcardClass83 = byteArray70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_0.key2(byteArray6, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_10 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray12 = new byte[] { (byte) 100 };
        staticSaltsABMC1_10.key2(byteArray12, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray18, 10);
        staticSaltsABMC1_10.key2(byteArray18, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_10.key2(byteArray42, 1);
        staticSaltsABMC1_9.key2(byteArray42, (int) (byte) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_51.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_70.key2(byteArray80, 0);
        staticSaltsABMC1_69.key2(byteArray80, (int) (byte) 1);
        staticSaltsABMC1_51.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_9.key2(byteArray80, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 100);
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, (int) '#');
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_43.key2(byteArray61, 100);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_43.key2(byteArray74, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_77.key2(byteArray84, (int) (byte) 10);
        staticSaltsABMC1_43.key2(byteArray84, (int) (short) -1);
        staticSaltsABMC1_30.key2(byteArray84, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray84, 100);
        byte[] byteArray95 = null;
        staticSaltsABMC1_0.key2(byteArray95, 0);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray24, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_29.key2(byteArray40, (int) (short) 10);
        staticSaltsABMC1_5.key2(byteArray40, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_45.key2(byteArray61, (int) (byte) 0);
        staticSaltsABMC1_5.key2(byteArray61, 0);
        staticSaltsABMC1_0.key2(byteArray61, (int) (short) 1);
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) -1);
        byte[] byteArray89 = null;
        staticSaltsABMC1_0.key2(byteArray89, 10);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_21.key2(byteArray32, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray32, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray32, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_0.key2(byteArray41, 0);
        byte[] byteArray46 = null;
        staticSaltsABMC1_0.key2(byteArray46, (int) (byte) -1);
        byte[] byteArray49 = null;
        staticSaltsABMC1_0.key2(byteArray49, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_0.key2(byteArray54, (-1));
        byte[] byteArray59 = null;
        staticSaltsABMC1_0.key2(byteArray59, (int) (short) 0);
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray64, (int) (byte) -1);
        java.lang.Class<?> wildcardClass67 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray7 = new byte[] { (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray7, (int) '#');
        staticSaltsABMC1_0.key2(byteArray7, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_12 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_13.key2(byteArray16, (int) (short) 0);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_13.key2(byteArray24, (int) (short) 10);
        staticSaltsABMC1_12.key2(byteArray24, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray24, 0);
        byte[] byteArray31 = null;
        staticSaltsABMC1_0.key2(byteArray31, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        byte[] byteArray65 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_34.key2(byteArray65, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray65, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray73, (int) (byte) 10);
        java.lang.Class<?> wildcardClass80 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        staticSaltsABMC1_33.key2(byteArray44, 1);
        staticSaltsABMC1_0.key2(byteArray44, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray56 = new byte[] { (byte) 100 };
        staticSaltsABMC1_54.key2(byteArray56, (int) '#');
        staticSaltsABMC1_53.key2(byteArray56, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_53.key2(byteArray63, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_53.key2(byteArray70, (-1));
        staticSaltsABMC1_0.key2(byteArray70, (int) (byte) 0);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_21.key2(byteArray31, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_21.key2(byteArray38, (-1));
        staticSaltsABMC1_0.key2(byteArray38, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray48, (int) (short) 1);
        byte[] byteArray55 = null;
        staticSaltsABMC1_0.key2(byteArray55, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_58.key2(byteArray61, (int) (short) 0);
        byte[] byteArray66 = null;
        staticSaltsABMC1_58.key2(byteArray66, (int) (short) 100);
        byte[] byteArray69 = null;
        staticSaltsABMC1_58.key2(byteArray69, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_85.key2(byteArray88, 10);
        staticSaltsABMC1_80.key2(byteArray88, 10);
        staticSaltsABMC1_72.key2(byteArray88, (int) (short) 1);
        staticSaltsABMC1_58.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray88, (int) '4');
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray49, 10);
        staticSaltsABMC1_41.key2(byteArray49, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_54 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray57 = new byte[] { (byte) 100 };
        staticSaltsABMC1_55.key2(byteArray57, (int) '#');
        staticSaltsABMC1_54.key2(byteArray57, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_62 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray65 = new byte[] { (byte) 100 };
        staticSaltsABMC1_63.key2(byteArray65, (int) '#');
        staticSaltsABMC1_62.key2(byteArray65, (int) (short) 0);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_62.key2(byteArray73, (int) (short) 10);
        staticSaltsABMC1_54.key2(byteArray73, (int) 'a');
        staticSaltsABMC1_41.key2(byteArray73, 1);
        staticSaltsABMC1_0.key2(byteArray73, (int) 'a');
        java.lang.Class<?> wildcardClass82 = byteArray73.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_22.key2(byteArray25, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_30.key2(byteArray33, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_30.key2(byteArray40, 0);
        staticSaltsABMC1_22.key2(byteArray40, 100);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_22.key2(byteArray53, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_56.key2(byteArray67, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_70 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_70.key2(byteArray73, (int) (short) 0);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_70.key2(byteArray81, (int) (short) 10);
        staticSaltsABMC1_56.key2(byteArray81, (int) (short) -1);
        staticSaltsABMC1_22.key2(byteArray81, (int) '4');
        staticSaltsABMC1_21.key2(byteArray81, (int) '4');
        staticSaltsABMC1_0.key2(byteArray81, (int) '#');
        java.lang.Class<?> wildcardClass92 = byteArray81.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray39 = new byte[] { (byte) 100 };
        staticSaltsABMC1_37.key2(byteArray39, (int) '#');
        staticSaltsABMC1_36.key2(byteArray39, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_36.key2(byteArray46, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_36.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray61, (-1));
        byte[] byteArray70 = null;
        staticSaltsABMC1_0.key2(byteArray70, (int) '#');
        java.lang.Class<?> wildcardClass73 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        staticSaltsABMC1_35.key2(byteArray38, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_43.key2(byteArray53, 0);
        staticSaltsABMC1_35.key2(byteArray53, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_76.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_68.key2(byteArray87, (int) 'a');
        staticSaltsABMC1_60.key2(byteArray87, 100);
        staticSaltsABMC1_35.key2(byteArray87, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray87, 0);
        java.lang.Class<?> wildcardClass98 = byteArray87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_14.key2(byteArray17, (int) (short) 0);
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_14.key2(byteArray25, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray25, (int) (short) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray46 = new byte[] { (byte) 100 };
        staticSaltsABMC1_44.key2(byteArray46, (int) '#');
        staticSaltsABMC1_43.key2(byteArray46, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        staticSaltsABMC1_51.key2(byteArray54, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray61 = new byte[] { (byte) 100 };
        staticSaltsABMC1_59.key2(byteArray61, (int) '#');
        staticSaltsABMC1_51.key2(byteArray61, 0);
        staticSaltsABMC1_43.key2(byteArray61, 100);
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_43.key2(byteArray74, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_77.key2(byteArray84, (int) (byte) 10);
        staticSaltsABMC1_43.key2(byteArray84, (int) (short) -1);
        staticSaltsABMC1_30.key2(byteArray84, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray84, 100);
        java.lang.Class<?> wildcardClass95 = byteArray84.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray16, 10);
        staticSaltsABMC1_8.key2(byteArray16, 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_28 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray31 = new byte[] { (byte) 100 };
        staticSaltsABMC1_29.key2(byteArray31, (int) '#');
        staticSaltsABMC1_28.key2(byteArray31, (int) (short) 0);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_28.key2(byteArray39, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray39, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_44 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray47 = new byte[] { (byte) 100 };
        staticSaltsABMC1_45.key2(byteArray47, (int) '#');
        staticSaltsABMC1_44.key2(byteArray47, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_52.key2(byteArray55, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_52.key2(byteArray62, 0);
        staticSaltsABMC1_44.key2(byteArray62, 100);
        staticSaltsABMC1_23.key2(byteArray62, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray62, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray89 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray89, 10);
        staticSaltsABMC1_81.key2(byteArray89, 10);
        staticSaltsABMC1_73.key2(byteArray89, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray89, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_8.key2(byteArray19, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray19, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_24.key2(byteArray27, (int) (short) 0);
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_24.key2(byteArray35, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray35, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_45.key2(byteArray56, (int) (short) 10);
        staticSaltsABMC1_40.key2(byteArray56, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray56, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray73 = new byte[] { (byte) 100 };
        staticSaltsABMC1_71.key2(byteArray73, (int) '#');
        staticSaltsABMC1_63.key2(byteArray73, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray81 = new byte[] { (byte) 100 };
        staticSaltsABMC1_79.key2(byteArray81, (int) '#');
        staticSaltsABMC1_78.key2(byteArray81, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_78.key2(byteArray88, 0);
        staticSaltsABMC1_63.key2(byteArray88, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray88, (int) (short) 0);
        java.lang.Class<?> wildcardClass97 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray35 = null;
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 100);
        java.lang.Class<?> wildcardClass38 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray61, 100);
        byte[] byteArray68 = null;
        staticSaltsABMC1_34.key2(byteArray68, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_71.key2(byteArray90, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray90, (int) '4');
        staticSaltsABMC1_0.key2(byteArray90, (int) (short) 1);
        java.lang.Class<?> wildcardClass99 = byteArray90.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        byte[] byteArray42 = null;
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 100);
        java.lang.Class<?> wildcardClass45 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_5.key2(byteArray8, 10);
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_13 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray15 = new byte[] { (byte) 100 };
        staticSaltsABMC1_13.key2(byteArray15, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_18.key2(byteArray29, (int) (short) 10);
        staticSaltsABMC1_13.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_42.key2(byteArray52, 0);
        staticSaltsABMC1_34.key2(byteArray52, 100);
        staticSaltsABMC1_13.key2(byteArray52, (int) (short) 0);
        byte[] byteArray62 = new byte[] { (byte) 10 };
        staticSaltsABMC1_13.key2(byteArray62, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        staticSaltsABMC1_65.key2(byteArray76, 1);
        staticSaltsABMC1_13.key2(byteArray76, 0);
        staticSaltsABMC1_0.key2(byteArray76, (int) (byte) 100);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        byte[] byteArray17 = null;
        staticSaltsABMC1_0.key2(byteArray17, (int) (byte) -1);
        byte[] byteArray20 = null;
        staticSaltsABMC1_0.key2(byteArray20, (int) (byte) 1);
        java.lang.Class<?> wildcardClass23 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray17 = new byte[] { (byte) 100 };
        staticSaltsABMC1_15.key2(byteArray17, (int) '#');
        staticSaltsABMC1_0.key2(byteArray17, (-1));
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        staticSaltsABMC1_0.key2(byteArray27, 10);
        byte[] byteArray30 = null;
        staticSaltsABMC1_0.key2(byteArray30, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_33.key2(byteArray43, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray51 = new byte[] { (byte) 100 };
        staticSaltsABMC1_49.key2(byteArray51, (int) '#');
        staticSaltsABMC1_48.key2(byteArray51, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_48.key2(byteArray58, 0);
        staticSaltsABMC1_33.key2(byteArray58, (int) 'a');
        byte[] byteArray65 = null;
        staticSaltsABMC1_33.key2(byteArray65, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray71, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_68.key2(byteArray76, (int) (short) 1);
        staticSaltsABMC1_33.key2(byteArray76, (int) (short) -1);
        staticSaltsABMC1_0.key2(byteArray76, 0);
        java.lang.Class<?> wildcardClass85 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_22 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray24 = new byte[] { (byte) 100 };
        staticSaltsABMC1_22.key2(byteArray24, (int) '#');
        staticSaltsABMC1_21.key2(byteArray24, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_29 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        staticSaltsABMC1_29.key2(byteArray32, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_37 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) 100 };
        staticSaltsABMC1_38.key2(byteArray40, (int) '#');
        staticSaltsABMC1_37.key2(byteArray40, (int) (short) 0);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_37.key2(byteArray48, (int) (short) 10);
        staticSaltsABMC1_29.key2(byteArray48, (int) 'a');
        staticSaltsABMC1_21.key2(byteArray48, 100);
        staticSaltsABMC1_0.key2(byteArray48, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_65.key2(byteArray75, 0);
        staticSaltsABMC1_57.key2(byteArray75, 100);
        staticSaltsABMC1_0.key2(byteArray75, (int) (byte) 0);
        byte[] byteArray84 = null;
        staticSaltsABMC1_0.key2(byteArray84, (int) (short) -1);
        java.lang.Class<?> wildcardClass87 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray8 = new byte[] { (byte) 100 };
        staticSaltsABMC1_6.key2(byteArray8, (int) '#');
        staticSaltsABMC1_5.key2(byteArray8, (int) (short) 0);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_5.key2(byteArray16, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray16, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_21 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray23 = new byte[] { (byte) 100 };
        staticSaltsABMC1_21.key2(byteArray23, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray29, 10);
        staticSaltsABMC1_21.key2(byteArray29, 10);
        staticSaltsABMC1_0.key2(byteArray29, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_41.key2(byteArray44, (int) (short) 0);
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_41.key2(byteArray52, (int) (short) 10);
        staticSaltsABMC1_36.key2(byteArray52, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_57.key2(byteArray67, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_57.key2(byteArray74, (-1));
        staticSaltsABMC1_36.key2(byteArray74, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_82 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100 };
        staticSaltsABMC1_82.key2(byteArray84, (int) '#');
        staticSaltsABMC1_81.key2(byteArray84, (int) (short) 0);
        staticSaltsABMC1_36.key2(byteArray84, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray84, (int) 'a');
        byte[] byteArray93 = null;
        staticSaltsABMC1_0.key2(byteArray93, 10);
        java.lang.Class<?> wildcardClass96 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray11, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray21 = new byte[] { (byte) 100 };
        staticSaltsABMC1_19.key2(byteArray21, (int) '#');
        staticSaltsABMC1_18.key2(byteArray21, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_18.key2(byteArray28, 0);
        byte[] byteArray33 = null;
        staticSaltsABMC1_18.key2(byteArray33, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_36 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100 };
        staticSaltsABMC1_36.key2(byteArray38, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray44, 10);
        staticSaltsABMC1_36.key2(byteArray44, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_58 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100 };
        staticSaltsABMC1_58.key2(byteArray60, (int) '#');
        staticSaltsABMC1_57.key2(byteArray60, (int) (short) 0);
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_57.key2(byteArray68, (int) (short) 10);
        staticSaltsABMC1_49.key2(byteArray68, (int) 'a');
        staticSaltsABMC1_36.key2(byteArray68, 1);
        staticSaltsABMC1_18.key2(byteArray68, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray80, 10);
        staticSaltsABMC1_18.key2(byteArray80, (int) '4');
        staticSaltsABMC1_0.key2(byteArray80, (int) (byte) 1);
        java.lang.Class<?> wildcardClass87 = byteArray80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        byte[] byteArray5 = null;
        staticSaltsABMC1_0.key2(byteArray5, 0);
        byte[] byteArray8 = null;
        staticSaltsABMC1_0.key2(byteArray8, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_11 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray13 = new byte[] { (byte) 100 };
        staticSaltsABMC1_11.key2(byteArray13, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_11.key2(byteArray27, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_41 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray43 = new byte[] { (byte) 100 };
        staticSaltsABMC1_41.key2(byteArray43, (int) '#');
        staticSaltsABMC1_40.key2(byteArray43, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_48 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100 };
        staticSaltsABMC1_48.key2(byteArray50, (int) '#');
        staticSaltsABMC1_40.key2(byteArray50, 0);
        staticSaltsABMC1_32.key2(byteArray50, 100);
        staticSaltsABMC1_11.key2(byteArray50, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_59 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray62 = new byte[] { (byte) 100 };
        staticSaltsABMC1_60.key2(byteArray62, (int) '#');
        staticSaltsABMC1_59.key2(byteArray62, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_67 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_67.key2(byteArray70, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_75 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray77 = new byte[] { (byte) 100 };
        staticSaltsABMC1_75.key2(byteArray77, (int) '#');
        staticSaltsABMC1_67.key2(byteArray77, 0);
        staticSaltsABMC1_59.key2(byteArray77, 100);
        staticSaltsABMC1_11.key2(byteArray77, (-1));
        staticSaltsABMC1_0.key2(byteArray77, 1);
        java.lang.Class<?> wildcardClass88 = byteArray77.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        staticSaltsABMC1_8.key2(byteArray27, (int) 'a');
        staticSaltsABMC1_0.key2(byteArray27, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        staticSaltsABMC1_34.key2(byteArray44, 0);
        byte[] byteArray49 = null;
        staticSaltsABMC1_34.key2(byteArray49, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray54 = new byte[] { (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray54, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_52.key2(byteArray60, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_73.key2(byteArray84, (int) (short) 10);
        staticSaltsABMC1_65.key2(byteArray84, (int) 'a');
        staticSaltsABMC1_52.key2(byteArray84, 1);
        staticSaltsABMC1_34.key2(byteArray84, 0);
        staticSaltsABMC1_0.key2(byteArray84, (int) '4');
        java.lang.Class<?> wildcardClass95 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray35, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray44 = new byte[] { (byte) 100 };
        staticSaltsABMC1_42.key2(byteArray44, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray50, 10);
        staticSaltsABMC1_42.key2(byteArray50, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_63 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        staticSaltsABMC1_63.key2(byteArray66, (int) (short) 0);
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_63.key2(byteArray74, (int) (short) 10);
        staticSaltsABMC1_55.key2(byteArray74, (int) 'a');
        staticSaltsABMC1_42.key2(byteArray74, 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_42.key2(byteArray83, 0);
        byte[] byteArray88 = null;
        staticSaltsABMC1_42.key2(byteArray88, 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_91 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray93 = new byte[] { (byte) 100 };
        staticSaltsABMC1_91.key2(byteArray93, (int) '#');
        staticSaltsABMC1_42.key2(byteArray93, (int) '#');
        staticSaltsABMC1_0.key2(byteArray93, (int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray93);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_34.key2(byteArray40, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray40, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_45 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_45.key2(byteArray48, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_53 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100 };
        staticSaltsABMC1_53.key2(byteArray55, (int) '#');
        staticSaltsABMC1_45.key2(byteArray55, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_60 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_61 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray63 = new byte[] { (byte) 100 };
        staticSaltsABMC1_61.key2(byteArray63, (int) '#');
        staticSaltsABMC1_60.key2(byteArray63, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray70 = new byte[] { (byte) 100 };
        staticSaltsABMC1_68.key2(byteArray70, (int) '#');
        staticSaltsABMC1_60.key2(byteArray70, 0);
        staticSaltsABMC1_45.key2(byteArray70, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_78 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray80 = new byte[] { (byte) 100 };
        staticSaltsABMC1_78.key2(byteArray80, (int) '#');
        staticSaltsABMC1_77.key2(byteArray80, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_85 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_86 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray88 = new byte[] { (byte) 100 };
        staticSaltsABMC1_86.key2(byteArray88, (int) '#');
        staticSaltsABMC1_85.key2(byteArray88, (int) (short) 0);
        staticSaltsABMC1_77.key2(byteArray88, 1);
        staticSaltsABMC1_45.key2(byteArray88, (int) (byte) 0);
        staticSaltsABMC1_0.key2(byteArray88, 10);
        java.lang.Class<?> wildcardClass99 = byteArray88.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_1.key2(byteArray11, 0);
        staticSaltsABMC1_0.key2(byteArray11, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_19 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_20 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray22 = new byte[] { (byte) 100 };
        staticSaltsABMC1_20.key2(byteArray22, (int) '#');
        staticSaltsABMC1_19.key2(byteArray22, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_27 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray29 = new byte[] { (byte) 100 };
        staticSaltsABMC1_27.key2(byteArray29, (int) '#');
        staticSaltsABMC1_19.key2(byteArray29, 0);
        staticSaltsABMC1_18.key2(byteArray29, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray29, (int) (byte) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_40 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray42 = new byte[] { (byte) 100 };
        staticSaltsABMC1_40.key2(byteArray42, (int) '#');
        staticSaltsABMC1_39.key2(byteArray42, (int) (short) 0);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_39.key2(byteArray50, (int) (short) 10);
        staticSaltsABMC1_38.key2(byteArray50, (int) (short) 0);
        staticSaltsABMC1_0.key2(byteArray50, (int) (short) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray60 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray60, 10);
        staticSaltsABMC1_0.key2(byteArray60, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100 };
        staticSaltsABMC1_66.key2(byteArray68, (int) '#');
        staticSaltsABMC1_65.key2(byteArray68, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_74 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray76 = new byte[] { (byte) 100 };
        staticSaltsABMC1_74.key2(byteArray76, (int) '#');
        staticSaltsABMC1_73.key2(byteArray76, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray83 = new byte[] { (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray83, (int) '#');
        staticSaltsABMC1_73.key2(byteArray83, 0);
        staticSaltsABMC1_65.key2(byteArray83, 100);
        staticSaltsABMC1_0.key2(byteArray83, 100);
        java.lang.Class<?> wildcardClass92 = byteArray83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_32.key2(byteArray35, (int) (short) 0);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_32.key2(byteArray43, (int) (short) 10);
        byte[] byteArray46 = null;
        staticSaltsABMC1_32.key2(byteArray46, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_49 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray52 = new byte[] { (byte) 100 };
        staticSaltsABMC1_50.key2(byteArray52, (int) '#');
        staticSaltsABMC1_49.key2(byteArray52, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_49.key2(byteArray59, 0);
        staticSaltsABMC1_32.key2(byteArray59, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_66 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) -1, (byte) -1, (byte) 0, (byte) 0, (byte) 10 };
        staticSaltsABMC1_66.key2(byteArray72, (int) (short) 0);
        staticSaltsABMC1_32.key2(byteArray72, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray72, 100);
        java.lang.Class<?> wildcardClass79 = byteArray72.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray27 = new byte[] { (byte) 100 };
        staticSaltsABMC1_25.key2(byteArray27, (int) '#');
        staticSaltsABMC1_17.key2(byteArray27, 0);
        staticSaltsABMC1_0.key2(byteArray27, (int) ' ');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray37 = new byte[] { (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray37, (int) '#');
        staticSaltsABMC1_34.key2(byteArray37, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_42 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_43 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray45 = new byte[] { (byte) 100 };
        staticSaltsABMC1_43.key2(byteArray45, (int) '#');
        staticSaltsABMC1_42.key2(byteArray45, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_50 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        staticSaltsABMC1_50.key2(byteArray53, (int) (short) 0);
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_50.key2(byteArray61, (int) (short) 10);
        staticSaltsABMC1_42.key2(byteArray61, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray61, 100);
        byte[] byteArray68 = null;
        staticSaltsABMC1_34.key2(byteArray68, (-1));
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_71 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray74 = new byte[] { (byte) 100 };
        staticSaltsABMC1_72.key2(byteArray74, (int) '#');
        staticSaltsABMC1_71.key2(byteArray74, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_79 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_80 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray82 = new byte[] { (byte) 100 };
        staticSaltsABMC1_80.key2(byteArray82, (int) '#');
        staticSaltsABMC1_79.key2(byteArray82, (int) (short) 0);
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_79.key2(byteArray90, (int) (short) 10);
        staticSaltsABMC1_71.key2(byteArray90, (int) 'a');
        staticSaltsABMC1_34.key2(byteArray90, (int) '4');
        staticSaltsABMC1_0.key2(byteArray90, (int) (short) 1);
        java.lang.Class<?> wildcardClass99 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_32 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray34 = new byte[] { (byte) 100 };
        staticSaltsABMC1_32.key2(byteArray34, (int) '#');
        staticSaltsABMC1_31.key2(byteArray34, (int) (short) 0);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_31.key2(byteArray42, (int) (short) 10);
        staticSaltsABMC1_23.key2(byteArray42, (int) 'a');
        staticSaltsABMC1_15.key2(byteArray42, 100);
        staticSaltsABMC1_0.key2(byteArray42, (int) (byte) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray59, 10);
        staticSaltsABMC1_51.key2(byteArray59, 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray67 = new byte[] { (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray67, (int) '#');
        staticSaltsABMC1_64.key2(byteArray67, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_72 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_73 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray75 = new byte[] { (byte) 100 };
        staticSaltsABMC1_73.key2(byteArray75, (int) '#');
        staticSaltsABMC1_72.key2(byteArray75, (int) (short) 0);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_72.key2(byteArray83, (int) (short) 10);
        staticSaltsABMC1_64.key2(byteArray83, (int) 'a');
        staticSaltsABMC1_51.key2(byteArray83, 1);
        staticSaltsABMC1_0.key2(byteArray83, 0);
        java.lang.Class<?> wildcardClass92 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray2 = new byte[] { (byte) 100 };
        staticSaltsABMC1_0.key2(byteArray2, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_5 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_6 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_7 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray9 = new byte[] { (byte) 100 };
        staticSaltsABMC1_7.key2(byteArray9, (int) '#');
        staticSaltsABMC1_6.key2(byteArray9, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_14 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray16 = new byte[] { (byte) 100 };
        staticSaltsABMC1_14.key2(byteArray16, (int) '#');
        staticSaltsABMC1_6.key2(byteArray16, 0);
        staticSaltsABMC1_5.key2(byteArray16, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_24 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray26 = new byte[] { (byte) 100 };
        staticSaltsABMC1_24.key2(byteArray26, (int) '#');
        staticSaltsABMC1_23.key2(byteArray26, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_31 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray33 = new byte[] { (byte) 100 };
        staticSaltsABMC1_31.key2(byteArray33, (int) '#');
        staticSaltsABMC1_23.key2(byteArray33, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_38 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_39 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray41 = new byte[] { (byte) 100 };
        staticSaltsABMC1_39.key2(byteArray41, (int) '#');
        staticSaltsABMC1_38.key2(byteArray41, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_46 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray48 = new byte[] { (byte) 100 };
        staticSaltsABMC1_46.key2(byteArray48, (int) '#');
        staticSaltsABMC1_38.key2(byteArray48, 0);
        staticSaltsABMC1_23.key2(byteArray48, (int) 'a');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_55 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_55.key2(byteArray58, (int) (short) 0);
        staticSaltsABMC1_23.key2(byteArray58, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_65 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray68 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_65.key2(byteArray68, 10);
        staticSaltsABMC1_23.key2(byteArray68, (int) (byte) -1);
        staticSaltsABMC1_5.key2(byteArray68, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray68, (int) (byte) -1);
        java.lang.Class<?> wildcardClass77 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray10 = new byte[] { (byte) 100 };
        staticSaltsABMC1_8.key2(byteArray10, (int) '#');
        staticSaltsABMC1_0.key2(byteArray10, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_15 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray18 = new byte[] { (byte) 100 };
        staticSaltsABMC1_16.key2(byteArray18, (int) '#');
        staticSaltsABMC1_15.key2(byteArray18, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_23 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray25 = new byte[] { (byte) 100 };
        staticSaltsABMC1_23.key2(byteArray25, (int) '#');
        staticSaltsABMC1_15.key2(byteArray25, 0);
        staticSaltsABMC1_0.key2(byteArray25, (int) 'a');
        byte[] byteArray32 = null;
        staticSaltsABMC1_0.key2(byteArray32, (int) ' ');
        byte[] byteArray35 = null;
        staticSaltsABMC1_0.key2(byteArray35, (-1));
        byte[] byteArray38 = null;
        staticSaltsABMC1_0.key2(byteArray38, 0);
        java.lang.Class<?> wildcardClass41 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_0.key2(byteArray11, (int) (short) 10);
        byte[] byteArray14 = null;
        staticSaltsABMC1_0.key2(byteArray14, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_34 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray36 = new byte[] { (byte) 100 };
        staticSaltsABMC1_34.key2(byteArray36, (int) '#');
        staticSaltsABMC1_33.key2(byteArray36, (int) (short) 0);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_33.key2(byteArray44, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_47 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray49 = new byte[] { (byte) 100 };
        staticSaltsABMC1_47.key2(byteArray49, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_52 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray55 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_52.key2(byteArray55, 10);
        staticSaltsABMC1_47.key2(byteArray55, 10);
        staticSaltsABMC1_33.key2(byteArray55, (int) (short) 10);
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_33.key2(byteArray66, (int) (short) 0);
        staticSaltsABMC1_25.key2(byteArray66, 0);
        staticSaltsABMC1_17.key2(byteArray66, 0);
        staticSaltsABMC1_0.key2(byteArray66, (int) ' ');
        java.lang.Class<?> wildcardClass75 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_2 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray4 = new byte[] { (byte) 100 };
        staticSaltsABMC1_2.key2(byteArray4, (int) '#');
        staticSaltsABMC1_1.key2(byteArray4, (int) (short) 0);
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_1.key2(byteArray12, (int) (short) 10);
        staticSaltsABMC1_0.key2(byteArray12, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_18 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray20 = new byte[] { (byte) 100 };
        staticSaltsABMC1_18.key2(byteArray20, (int) '#');
        staticSaltsABMC1_17.key2(byteArray20, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_25 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_26 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray28 = new byte[] { (byte) 100 };
        staticSaltsABMC1_26.key2(byteArray28, (int) '#');
        staticSaltsABMC1_25.key2(byteArray28, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_33 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray35 = new byte[] { (byte) 100 };
        staticSaltsABMC1_33.key2(byteArray35, (int) '#');
        staticSaltsABMC1_25.key2(byteArray35, 0);
        staticSaltsABMC1_17.key2(byteArray35, 100);
        byte[] byteArray48 = new byte[] { (byte) 100, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) -1 };
        staticSaltsABMC1_17.key2(byteArray48, (int) (byte) 1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_51 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray53 = new byte[] { (byte) 100 };
        staticSaltsABMC1_51.key2(byteArray53, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray58 = new byte[] { (byte) 100 };
        staticSaltsABMC1_56.key2(byteArray58, (int) '#');
        staticSaltsABMC1_51.key2(byteArray58, (int) (byte) 10);
        staticSaltsABMC1_17.key2(byteArray58, (int) (short) -1);
        byte[] byteArray65 = null;
        staticSaltsABMC1_17.key2(byteArray65, (int) (short) 100);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_68 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray71 = new byte[] { (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray71, (int) '#');
        staticSaltsABMC1_68.key2(byteArray71, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_76 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_77 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray79 = new byte[] { (byte) 100 };
        staticSaltsABMC1_77.key2(byteArray79, (int) '#');
        staticSaltsABMC1_76.key2(byteArray79, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_84 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray86 = new byte[] { (byte) 100 };
        staticSaltsABMC1_84.key2(byteArray86, (int) '#');
        staticSaltsABMC1_76.key2(byteArray86, 0);
        staticSaltsABMC1_68.key2(byteArray86, 100);
        staticSaltsABMC1_17.key2(byteArray86, (int) (byte) 1);
        staticSaltsABMC1_0.key2(byteArray86, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = byteArray86.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_0 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_1 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray3 = new byte[] { (byte) 100 };
        staticSaltsABMC1_1.key2(byteArray3, (int) '#');
        staticSaltsABMC1_0.key2(byteArray3, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_8 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_9 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray11 = new byte[] { (byte) 100 };
        staticSaltsABMC1_9.key2(byteArray11, (int) '#');
        staticSaltsABMC1_8.key2(byteArray11, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_16 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_17 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray19 = new byte[] { (byte) 100 };
        staticSaltsABMC1_17.key2(byteArray19, (int) '#');
        staticSaltsABMC1_16.key2(byteArray19, (int) (short) 0);
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 10, (byte) 1 };
        staticSaltsABMC1_16.key2(byteArray27, (int) (short) 10);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_30 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray32 = new byte[] { (byte) 100 };
        staticSaltsABMC1_30.key2(byteArray32, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_35 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_35.key2(byteArray38, 10);
        staticSaltsABMC1_30.key2(byteArray38, 10);
        staticSaltsABMC1_16.key2(byteArray38, (int) (short) 10);
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 10, (byte) 1, (byte) 0 };
        staticSaltsABMC1_16.key2(byteArray49, (int) (short) 0);
        staticSaltsABMC1_8.key2(byteArray49, 0);
        staticSaltsABMC1_0.key2(byteArray49, 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_56 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_57 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray59 = new byte[] { (byte) 100 };
        staticSaltsABMC1_57.key2(byteArray59, (int) '#');
        staticSaltsABMC1_56.key2(byteArray59, (int) (short) 0);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_64 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray66 = new byte[] { (byte) 100 };
        staticSaltsABMC1_64.key2(byteArray66, (int) '#');
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_69 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray72 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_69.key2(byteArray72, 10);
        staticSaltsABMC1_64.key2(byteArray72, 10);
        staticSaltsABMC1_56.key2(byteArray72, (int) (short) 1);
        staticSaltsABMC1_0.key2(byteArray72, (int) (byte) -1);
        org.cryptoapi.bench.staticsalts.StaticSaltsABMC1 staticSaltsABMC1_81 = new org.cryptoapi.bench.staticsalts.StaticSaltsABMC1();
        byte[] byteArray84 = new byte[] { (byte) 100, (byte) 100 };
        staticSaltsABMC1_81.key2(byteArray84, 10);
        staticSaltsABMC1_0.key2(byteArray84, (int) '#');
        java.lang.Class<?> wildcardClass89 = staticSaltsABMC1_0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(byteArray84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }
}

